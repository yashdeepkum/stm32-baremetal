
UART_MOD_NUCLEO_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000290  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003c0  080003c8  000013c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003c0  080003c0  000013c8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080003c0  080003c0  000013c8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080003c0  080003c8  000013c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003c0  080003c0  000013c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003c4  080003c4  000013c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080003c8  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080003c8  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000013c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000004ed  00000000  00000000  000013f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000025a  00000000  00000000  000018de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000090  00000000  00000000  00001b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000005e  00000000  00000000  00001bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010d4a  00000000  00000000  00001c26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000ce0  00000000  00000000  00012970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00057cdc  00000000  00000000  00013650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006b32c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000013c  00000000  00000000  0006b370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  0006b4ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080003a8 	.word	0x080003a8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080003a8 	.word	0x080003a8

08000170 <main>:
#define LED_PIN     GPIOA_5

char key;

int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
    uart2_rxtx_init();
 8000174:	f000 f866 	bl	8000244 <uart2_rxtx_init>

    // Enable clock access to GPIOA
    RCC->APB2ENR |= GPIOAEN;
 8000178:	4b14      	ldr	r3, [pc, #80]	@ (80001cc <main+0x5c>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a13      	ldr	r2, [pc, #76]	@ (80001cc <main+0x5c>)
 800017e:	f043 0304 	orr.w	r3, r3, #4
 8000182:	6193      	str	r3, [r2, #24]

    // Configure PA5 as output push-pull
    GPIOA->CRL &= ~(0xF << 20);   // Clear MODE5[1:0], CNF5[1:0]
 8000184:	4b12      	ldr	r3, [pc, #72]	@ (80001d0 <main+0x60>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	4a11      	ldr	r2, [pc, #68]	@ (80001d0 <main+0x60>)
 800018a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800018e:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |=  (0x2 << 20);   // MODE5 = 10 (Output 2 MHz), CNF5 = 00 (Push-pull)
 8000190:	4b0f      	ldr	r3, [pc, #60]	@ (80001d0 <main+0x60>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	4a0e      	ldr	r2, [pc, #56]	@ (80001d0 <main+0x60>)
 8000196:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800019a:	6013      	str	r3, [r2, #0]

    while (1)
    {
        key = uart2_read();
 800019c:	f000 f840 	bl	8000220 <uart2_read>
 80001a0:	4603      	mov	r3, r0
 80001a2:	461a      	mov	r2, r3
 80001a4:	4b0b      	ldr	r3, [pc, #44]	@ (80001d4 <main+0x64>)
 80001a6:	701a      	strb	r2, [r3, #0]

        if (key == '1')
 80001a8:	4b0a      	ldr	r3, [pc, #40]	@ (80001d4 <main+0x64>)
 80001aa:	781b      	ldrb	r3, [r3, #0]
 80001ac:	2b31      	cmp	r3, #49	@ 0x31
 80001ae:	d106      	bne.n	80001be <main+0x4e>
            GPIOA->ODR |= LED_PIN;   // Turn ON LED
 80001b0:	4b07      	ldr	r3, [pc, #28]	@ (80001d0 <main+0x60>)
 80001b2:	68db      	ldr	r3, [r3, #12]
 80001b4:	4a06      	ldr	r2, [pc, #24]	@ (80001d0 <main+0x60>)
 80001b6:	f043 0320 	orr.w	r3, r3, #32
 80001ba:	60d3      	str	r3, [r2, #12]
 80001bc:	e7ee      	b.n	800019c <main+0x2c>
        else
            GPIOA->ODR &= ~LED_PIN;  // Turn OFF LED
 80001be:	4b04      	ldr	r3, [pc, #16]	@ (80001d0 <main+0x60>)
 80001c0:	68db      	ldr	r3, [r3, #12]
 80001c2:	4a03      	ldr	r2, [pc, #12]	@ (80001d0 <main+0x60>)
 80001c4:	f023 0320 	bic.w	r3, r3, #32
 80001c8:	60d3      	str	r3, [r2, #12]
        key = uart2_read();
 80001ca:	e7e7      	b.n	800019c <main+0x2c>
 80001cc:	40021000 	.word	0x40021000
 80001d0:	40010800 	.word	0x40010800
 80001d4:	2000001c 	.word	0x2000001c

080001d8 <compute_uart_bd>:

#define CR1_RE       (1U<<2)
#define SR_RXNE      (1U<<5)

static uint16_t compute_uart_bd(uint32_t periphclk, uint32_t baudrate)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	6039      	str	r1, [r7, #0]
    return (periphclk + (baudrate/2U)) / baudrate;
 80001e2:	683b      	ldr	r3, [r7, #0]
 80001e4:	085a      	lsrs	r2, r3, #1
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	441a      	add	r2, r3
 80001ea:	683b      	ldr	r3, [r7, #0]
 80001ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80001f0:	b29b      	uxth	r3, r3
}
 80001f2:	4618      	mov	r0, r3
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bc80      	pop	{r7}
 80001fa:	4770      	bx	lr

080001fc <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t periphclk, uint32_t baudrate)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b084      	sub	sp, #16
 8000200:	af00      	add	r7, sp, #0
 8000202:	60f8      	str	r0, [r7, #12]
 8000204:	60b9      	str	r1, [r7, #8]
 8000206:	607a      	str	r2, [r7, #4]
    USARTx->BRR = compute_uart_bd(periphclk, baudrate);
 8000208:	6879      	ldr	r1, [r7, #4]
 800020a:	68b8      	ldr	r0, [r7, #8]
 800020c:	f7ff ffe4 	bl	80001d8 <compute_uart_bd>
 8000210:	4603      	mov	r3, r0
 8000212:	461a      	mov	r2, r3
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	609a      	str	r2, [r3, #8]
}
 8000218:	bf00      	nop
 800021a:	3710      	adds	r7, #16
 800021c:	46bd      	mov	sp, r7
 800021e:	bd80      	pop	{r7, pc}

08000220 <uart2_read>:
    // write to data register
    USART2->DR = (ch & 0xFF);
}

char uart2_read(void)
{ while (!(USART2->SR & SR_RXNE)) {}
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
 8000224:	bf00      	nop
 8000226:	4b06      	ldr	r3, [pc, #24]	@ (8000240 <uart2_read+0x20>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	f003 0320 	and.w	r3, r3, #32
 800022e:	2b00      	cmp	r3, #0
 8000230:	d0f9      	beq.n	8000226 <uart2_read+0x6>
	//READ DATA
return USART2-> DR;
 8000232:	4b03      	ldr	r3, [pc, #12]	@ (8000240 <uart2_read+0x20>)
 8000234:	685b      	ldr	r3, [r3, #4]
 8000236:	b2db      	uxtb	r3, r3

	}
 8000238:	4618      	mov	r0, r3
 800023a:	46bd      	mov	sp, r7
 800023c:	bc80      	pop	{r7}
 800023e:	4770      	bx	lr
 8000240:	40004400 	.word	0x40004400

08000244 <uart2_rxtx_init>:
void uart2_rxtx_init(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
    /************* Configure UART GPIO pin ************/

    // Enable clock access to GPIOA & AFIO
    RCC->APB2ENR |= GPIOAEN;
 8000248:	4b2c      	ldr	r3, [pc, #176]	@ (80002fc <uart2_rxtx_init+0xb8>)
 800024a:	699b      	ldr	r3, [r3, #24]
 800024c:	4a2b      	ldr	r2, [pc, #172]	@ (80002fc <uart2_rxtx_init+0xb8>)
 800024e:	f043 0304 	orr.w	r3, r3, #4
 8000252:	6193      	str	r3, [r2, #24]
    RCC->APB2ENR |= AFIOEN;
 8000254:	4b29      	ldr	r3, [pc, #164]	@ (80002fc <uart2_rxtx_init+0xb8>)
 8000256:	699b      	ldr	r3, [r3, #24]
 8000258:	4a28      	ldr	r2, [pc, #160]	@ (80002fc <uart2_rxtx_init+0xb8>)
 800025a:	f043 0301 	orr.w	r3, r3, #1
 800025e:	6193      	str	r3, [r2, #24]

    // Set PA2 to alternate function push-pull
    // PA2 is configured in CRL (bits [11:8])
    GPIOA->CRL |=  (1U << 8);   // MODE2_0 = 1
 8000260:	4b27      	ldr	r3, [pc, #156]	@ (8000300 <uart2_rxtx_init+0xbc>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a26      	ldr	r2, [pc, #152]	@ (8000300 <uart2_rxtx_init+0xbc>)
 8000266:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800026a:	6013      	str	r3, [r2, #0]
        GPIOA->CRL |=  (1U << 9);   // MODE2_1 = 1
 800026c:	4b24      	ldr	r3, [pc, #144]	@ (8000300 <uart2_rxtx_init+0xbc>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a23      	ldr	r2, [pc, #140]	@ (8000300 <uart2_rxtx_init+0xbc>)
 8000272:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000276:	6013      	str	r3, [r2, #0]
        // CNF2_0 = 0 → already cleared
        GPIOA->CRL |=  (1U << 11);
 8000278:	4b21      	ldr	r3, [pc, #132]	@ (8000300 <uart2_rxtx_init+0xbc>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a20      	ldr	r2, [pc, #128]	@ (8000300 <uart2_rxtx_init+0xbc>)
 800027e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000282:	6013      	str	r3, [r2, #0]
        GPIOA->CRL &=  ~(1U << 10); // MODE2 = 11 (Output 50 MHz), CNF2 = 10 (AF push-pull)
 8000284:	4b1e      	ldr	r3, [pc, #120]	@ (8000300 <uart2_rxtx_init+0xbc>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a1d      	ldr	r2, [pc, #116]	@ (8000300 <uart2_rxtx_init+0xbc>)
 800028a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800028e:	6013      	str	r3, [r2, #0]

        //PA3 is configured as uart mode
        GPIOA->CRL &= ~(1U << 12);   // MODE3_0 = 0
 8000290:	4b1b      	ldr	r3, [pc, #108]	@ (8000300 <uart2_rxtx_init+0xbc>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a1a      	ldr	r2, [pc, #104]	@ (8000300 <uart2_rxtx_init+0xbc>)
 8000296:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800029a:	6013      	str	r3, [r2, #0]
        GPIOA->CRL &= ~(1U << 13);   // MODE3_1 = 0
 800029c:	4b18      	ldr	r3, [pc, #96]	@ (8000300 <uart2_rxtx_init+0xbc>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a17      	ldr	r2, [pc, #92]	@ (8000300 <uart2_rxtx_init+0xbc>)
 80002a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80002a6:	6013      	str	r3, [r2, #0]
        GPIOA->CRL |=  (1U << 14);   // CNF3_0 = 1
 80002a8:	4b15      	ldr	r3, [pc, #84]	@ (8000300 <uart2_rxtx_init+0xbc>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a14      	ldr	r2, [pc, #80]	@ (8000300 <uart2_rxtx_init+0xbc>)
 80002ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80002b2:	6013      	str	r3, [r2, #0]
        GPIOA->CRL &= ~(1U << 15);
 80002b4:	4b12      	ldr	r3, [pc, #72]	@ (8000300 <uart2_rxtx_init+0xbc>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a11      	ldr	r2, [pc, #68]	@ (8000300 <uart2_rxtx_init+0xbc>)
 80002ba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80002be:	6013      	str	r3, [r2, #0]
           /************* Configure UART module ************/

    // Enable clock access to USART2
    RCC->APB1ENR |= UART2EN;
 80002c0:	4b0e      	ldr	r3, [pc, #56]	@ (80002fc <uart2_rxtx_init+0xb8>)
 80002c2:	69db      	ldr	r3, [r3, #28]
 80002c4:	4a0d      	ldr	r2, [pc, #52]	@ (80002fc <uart2_rxtx_init+0xb8>)
 80002c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002ca:	61d3      	str	r3, [r2, #28]

    // Set baud rate
    uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 80002cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002d0:	490c      	ldr	r1, [pc, #48]	@ (8000304 <uart2_rxtx_init+0xc0>)
 80002d2:	480d      	ldr	r0, [pc, #52]	@ (8000308 <uart2_rxtx_init+0xc4>)
 80002d4:	f7ff ff92 	bl	80001fc <uart_set_baudrate>

    // Configure transfer direction (transmitter only)
    USART2->CR1 = CR1_TE;
 80002d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000308 <uart2_rxtx_init+0xc4>)
 80002da:	2208      	movs	r2, #8
 80002dc:	60da      	str	r2, [r3, #12]
    USART2->CR1 |=  CR1_RE;
 80002de:	4b0a      	ldr	r3, [pc, #40]	@ (8000308 <uart2_rxtx_init+0xc4>)
 80002e0:	68db      	ldr	r3, [r3, #12]
 80002e2:	4a09      	ldr	r2, [pc, #36]	@ (8000308 <uart2_rxtx_init+0xc4>)
 80002e4:	f043 0304 	orr.w	r3, r3, #4
 80002e8:	60d3      	str	r3, [r2, #12]
    // Enable UART module
    USART2->CR1 |= CR1_UE;
 80002ea:	4b07      	ldr	r3, [pc, #28]	@ (8000308 <uart2_rxtx_init+0xc4>)
 80002ec:	68db      	ldr	r3, [r3, #12]
 80002ee:	4a06      	ldr	r2, [pc, #24]	@ (8000308 <uart2_rxtx_init+0xc4>)
 80002f0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002f4:	60d3      	str	r3, [r2, #12]
}
 80002f6:	bf00      	nop
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40021000 	.word	0x40021000
 8000300:	40010800 	.word	0x40010800
 8000304:	00f42400 	.word	0x00f42400
 8000308:	40004400 	.word	0x40004400

0800030c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800030c:	480d      	ldr	r0, [pc, #52]	@ (8000344 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800030e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000310:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000314:	480c      	ldr	r0, [pc, #48]	@ (8000348 <LoopForever+0x6>)
  ldr r1, =_edata
 8000316:	490d      	ldr	r1, [pc, #52]	@ (800034c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000318:	4a0d      	ldr	r2, [pc, #52]	@ (8000350 <LoopForever+0xe>)
  movs r3, #0
 800031a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800031c:	e002      	b.n	8000324 <LoopCopyDataInit>

0800031e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800031e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000322:	3304      	adds	r3, #4

08000324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000328:	d3f9      	bcc.n	800031e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800032a:	4a0a      	ldr	r2, [pc, #40]	@ (8000354 <LoopForever+0x12>)
  ldr r4, =_ebss
 800032c:	4c0a      	ldr	r4, [pc, #40]	@ (8000358 <LoopForever+0x16>)
  movs r3, #0
 800032e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000330:	e001      	b.n	8000336 <LoopFillZerobss>

08000332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000334:	3204      	adds	r2, #4

08000336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000338:	d3fb      	bcc.n	8000332 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800033a:	f000 f811 	bl	8000360 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800033e:	f7ff ff17 	bl	8000170 <main>

08000342 <LoopForever>:

LoopForever:
  b LoopForever
 8000342:	e7fe      	b.n	8000342 <LoopForever>
  ldr   r0, =_estack
 8000344:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800034c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000350:	080003c8 	.word	0x080003c8
  ldr r2, =_sbss
 8000354:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000358:	20000020 	.word	0x20000020

0800035c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800035c:	e7fe      	b.n	800035c <ADC1_2_IRQHandler>
	...

08000360 <__libc_init_array>:
 8000360:	b570      	push	{r4, r5, r6, lr}
 8000362:	2600      	movs	r6, #0
 8000364:	4d0c      	ldr	r5, [pc, #48]	@ (8000398 <__libc_init_array+0x38>)
 8000366:	4c0d      	ldr	r4, [pc, #52]	@ (800039c <__libc_init_array+0x3c>)
 8000368:	1b64      	subs	r4, r4, r5
 800036a:	10a4      	asrs	r4, r4, #2
 800036c:	42a6      	cmp	r6, r4
 800036e:	d109      	bne.n	8000384 <__libc_init_array+0x24>
 8000370:	f000 f81a 	bl	80003a8 <_init>
 8000374:	2600      	movs	r6, #0
 8000376:	4d0a      	ldr	r5, [pc, #40]	@ (80003a0 <__libc_init_array+0x40>)
 8000378:	4c0a      	ldr	r4, [pc, #40]	@ (80003a4 <__libc_init_array+0x44>)
 800037a:	1b64      	subs	r4, r4, r5
 800037c:	10a4      	asrs	r4, r4, #2
 800037e:	42a6      	cmp	r6, r4
 8000380:	d105      	bne.n	800038e <__libc_init_array+0x2e>
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f855 3b04 	ldr.w	r3, [r5], #4
 8000388:	4798      	blx	r3
 800038a:	3601      	adds	r6, #1
 800038c:	e7ee      	b.n	800036c <__libc_init_array+0xc>
 800038e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000392:	4798      	blx	r3
 8000394:	3601      	adds	r6, #1
 8000396:	e7f2      	b.n	800037e <__libc_init_array+0x1e>
 8000398:	080003c0 	.word	0x080003c0
 800039c:	080003c0 	.word	0x080003c0
 80003a0:	080003c0 	.word	0x080003c0
 80003a4:	080003c4 	.word	0x080003c4

080003a8 <_init>:
 80003a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003aa:	bf00      	nop
 80003ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ae:	bc08      	pop	{r3}
 80003b0:	469e      	mov	lr, r3
 80003b2:	4770      	bx	lr

080003b4 <_fini>:
 80003b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003b6:	bf00      	nop
 80003b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ba:	bc08      	pop	{r3}
 80003bc:	469e      	mov	lr, r3
 80003be:	4770      	bx	lr
