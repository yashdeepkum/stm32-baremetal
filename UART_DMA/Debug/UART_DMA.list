
UART_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000348  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000478  08000478  00001478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000498  08000498  000014a0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000498  08000498  000014a0  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000498  080004a0  000014a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000498  08000498  00001498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800049c  0800049c  0000149c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000014a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080004a0  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080004a0  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000014a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000099c  00000000  00000000  000014c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000369  00000000  00000000  00001e65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c0  00000000  00000000  000021d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000085  00000000  00000000  00002290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010d8f  00000000  00000000  00002315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000e67  00000000  00000000  000130a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000580e1  00000000  00000000  00013f0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006bfec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000208  00000000  00000000  0006c030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  0006c238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000460 	.word	0x08000460

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000460 	.word	0x08000460

08000170 <main>:
#define LED_PIN     GPIOA_5

char key;
static void DMA_callback(void);
int main(void)
{
 8000170:	b5b0      	push	{r4, r5, r7, lr}
 8000172:	b088      	sub	sp, #32
 8000174:	af00      	add	r7, sp, #0

	char msg[31] = "hello from stm32 dma transfer\n\r";
 8000176:	4b14      	ldr	r3, [pc, #80]	@ (80001c8 <main+0x58>)
 8000178:	463c      	mov	r4, r7
 800017a:	461d      	mov	r5, r3
 800017c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800017e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000180:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000184:	c407      	stmia	r4!, {r0, r1, r2}
 8000186:	8023      	strh	r3, [r4, #0]
 8000188:	3402      	adds	r4, #2
 800018a:	0c1b      	lsrs	r3, r3, #16
 800018c:	7023      	strb	r3, [r4, #0]
	uart2_tx_init();
 800018e:	f000 f8d3 	bl	8000338 <uart2_tx_init>
	dma1_channe7_init((uint32_t) msg, (uint32_t)&USART2->DR,31);
 8000192:	463b      	mov	r3, r7
 8000194:	221f      	movs	r2, #31
 8000196:	490d      	ldr	r1, [pc, #52]	@ (80001cc <main+0x5c>)
 8000198:	4618      	mov	r0, r3
 800019a:	f000 f86b 	bl	8000274 <dma1_channe7_init>
    // Enable clock access to GPIOA
    RCC->APB2ENR |= GPIOAEN;
 800019e:	4b0c      	ldr	r3, [pc, #48]	@ (80001d0 <main+0x60>)
 80001a0:	699b      	ldr	r3, [r3, #24]
 80001a2:	4a0b      	ldr	r2, [pc, #44]	@ (80001d0 <main+0x60>)
 80001a4:	f043 0304 	orr.w	r3, r3, #4
 80001a8:	6193      	str	r3, [r2, #24]

    // Configure PA5 as output push-pull
    GPIOA->CRL &= ~(0xF << 20);   // Clear MODE5[1:0], CNF5[1:0]
 80001aa:	4b0a      	ldr	r3, [pc, #40]	@ (80001d4 <main+0x64>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	4a09      	ldr	r2, [pc, #36]	@ (80001d4 <main+0x64>)
 80001b0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80001b4:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |=  (0x2 << 20);   // MODE5 = 10 (Output 2 MHz), CNF5 = 00 (Push-pull)
 80001b6:	4b07      	ldr	r3, [pc, #28]	@ (80001d4 <main+0x64>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	4a06      	ldr	r2, [pc, #24]	@ (80001d4 <main+0x64>)
 80001bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80001c0:	6013      	str	r3, [r2, #0]

    while (1)
 80001c2:	bf00      	nop
 80001c4:	e7fd      	b.n	80001c2 <main+0x52>
 80001c6:	bf00      	nop
 80001c8:	08000478 	.word	0x08000478
 80001cc:	40004404 	.word	0x40004404
 80001d0:	40021000 	.word	0x40021000
 80001d4:	40010800 	.word	0x40010800

080001d8 <DMA_callback>:

         // Turn OFF LED
    }
}
static void DMA_callback(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	GPIOA->ODR |= LED_PIN;
 80001dc:	4b04      	ldr	r3, [pc, #16]	@ (80001f0 <DMA_callback+0x18>)
 80001de:	68db      	ldr	r3, [r3, #12]
 80001e0:	4a03      	ldr	r2, [pc, #12]	@ (80001f0 <DMA_callback+0x18>)
 80001e2:	f043 0320 	orr.w	r3, r3, #32
 80001e6:	60d3      	str	r3, [r2, #12]
}
 80001e8:	bf00      	nop
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bc80      	pop	{r7}
 80001ee:	4770      	bx	lr
 80001f0:	40010800 	.word	0x40010800

080001f4 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler (void){
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
	//CHECK FOR TRANSFER COMPLETE INTERRUP
	if (DMA1->ISR & (1U << 25))
 80001f8:	4b07      	ldr	r3, [pc, #28]	@ (8000218 <DMA1_Channel7_IRQHandler+0x24>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000200:	2b00      	cmp	r3, #0
 8000202:	d007      	beq.n	8000214 <DMA1_Channel7_IRQHandler+0x20>
	{
		//CLEAR FLAG
		DMA1->IFCR |= (1U << 25);
 8000204:	4b04      	ldr	r3, [pc, #16]	@ (8000218 <DMA1_Channel7_IRQHandler+0x24>)
 8000206:	685b      	ldr	r3, [r3, #4]
 8000208:	4a03      	ldr	r2, [pc, #12]	@ (8000218 <DMA1_Channel7_IRQHandler+0x24>)
 800020a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800020e:	6053      	str	r3, [r2, #4]

	//DO SOMETHING
		DMA_callback();
 8000210:	f7ff ffe2 	bl	80001d8 <DMA_callback>
	}
}
 8000214:	bf00      	nop
 8000216:	bd80      	pop	{r7, pc}
 8000218:	40020000 	.word	0x40020000

0800021c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800021c:	b480      	push	{r7}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
 8000222:	4603      	mov	r3, r0
 8000224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022a:	2b00      	cmp	r3, #0
 800022c:	db0b      	blt.n	8000246 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800022e:	79fb      	ldrb	r3, [r7, #7]
 8000230:	f003 021f 	and.w	r2, r3, #31
 8000234:	4906      	ldr	r1, [pc, #24]	@ (8000250 <__NVIC_EnableIRQ+0x34>)
 8000236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023a:	095b      	lsrs	r3, r3, #5
 800023c:	2001      	movs	r0, #1
 800023e:	fa00 f202 	lsl.w	r2, r0, r2
 8000242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000246:	bf00      	nop
 8000248:	370c      	adds	r7, #12
 800024a:	46bd      	mov	sp, r7
 800024c:	bc80      	pop	{r7}
 800024e:	4770      	bx	lr
 8000250:	e000e100 	.word	0xe000e100

08000254 <uart_set_baudrate>:
{
    return (periphclk + (baudrate/2U)) / baudrate;
}

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t periphclk, uint32_t baudrate)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	60f8      	str	r0, [r7, #12]
 800025c:	60b9      	str	r1, [r7, #8]
 800025e:	607a      	str	r2, [r7, #4]
    USARTx->BRR = 833;
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	f240 3241 	movw	r2, #833	@ 0x341
 8000266:	609a      	str	r2, [r3, #8]
}
 8000268:	bf00      	nop
 800026a:	3714      	adds	r7, #20
 800026c:	46bd      	mov	sp, r7
 800026e:	bc80      	pop	{r7}
 8000270:	4770      	bx	lr
	...

08000274 <dma1_channe7_init>:
	}


void dma1_channe7_init(uint32_t src, uint32_t dst,uint32_t len)

{
 8000274:	b580      	push	{r7, lr}
 8000276:	b084      	sub	sp, #16
 8000278:	af00      	add	r7, sp, #0
 800027a:	60f8      	str	r0, [r7, #12]
 800027c:	60b9      	str	r1, [r7, #8]
 800027e:	607a      	str	r2, [r7, #4]
//enable clk access to dma
	RCC->AHBENR |= DMA1EN;
 8000280:	4b29      	ldr	r3, [pc, #164]	@ (8000328 <dma1_channe7_init+0xb4>)
 8000282:	695b      	ldr	r3, [r3, #20]
 8000284:	4a28      	ldr	r2, [pc, #160]	@ (8000328 <dma1_channe7_init+0xb4>)
 8000286:	f043 0301 	orr.w	r3, r3, #1
 800028a:	6153      	str	r3, [r2, #20]
	//disable dma1  channel7
	DMA1_Channel7->CCR &=~DMACEN;
 800028c:	4b27      	ldr	r3, [pc, #156]	@ (800032c <dma1_channe7_init+0xb8>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a26      	ldr	r2, [pc, #152]	@ (800032c <dma1_channe7_init+0xb8>)
 8000292:	f023 0301 	bic.w	r3, r3, #1
 8000296:	6013      	str	r3, [r2, #0]
	//wait until dma is disabled
	while(DMA1_Channel7->CCR & DMACEN){}
 8000298:	bf00      	nop
 800029a:	4b24      	ldr	r3, [pc, #144]	@ (800032c <dma1_channe7_init+0xb8>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f003 0301 	and.w	r3, r3, #1
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d1f9      	bne.n	800029a <dma1_channe7_init+0x26>

	//clear all interrupt flags of channel7
	DMA1->IFCR |=(1U<<24);
 80002a6:	4b22      	ldr	r3, [pc, #136]	@ (8000330 <dma1_channe7_init+0xbc>)
 80002a8:	685b      	ldr	r3, [r3, #4]
 80002aa:	4a21      	ldr	r2, [pc, #132]	@ (8000330 <dma1_channe7_init+0xbc>)
 80002ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80002b0:	6053      	str	r3, [r2, #4]
	DMA1->IFCR |=(1U<<25);
 80002b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000330 <dma1_channe7_init+0xbc>)
 80002b4:	685b      	ldr	r3, [r3, #4]
 80002b6:	4a1e      	ldr	r2, [pc, #120]	@ (8000330 <dma1_channe7_init+0xbc>)
 80002b8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80002bc:	6053      	str	r3, [r2, #4]
		DMA1->IFCR |=(1U<<26);
 80002be:	4b1c      	ldr	r3, [pc, #112]	@ (8000330 <dma1_channe7_init+0xbc>)
 80002c0:	685b      	ldr	r3, [r3, #4]
 80002c2:	4a1b      	ldr	r2, [pc, #108]	@ (8000330 <dma1_channe7_init+0xbc>)
 80002c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80002c8:	6053      	str	r3, [r2, #4]
		DMA1->IFCR |=(1U<<27);
 80002ca:	4b19      	ldr	r3, [pc, #100]	@ (8000330 <dma1_channe7_init+0xbc>)
 80002cc:	685b      	ldr	r3, [r3, #4]
 80002ce:	4a18      	ldr	r2, [pc, #96]	@ (8000330 <dma1_channe7_init+0xbc>)
 80002d0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80002d4:	6053      	str	r3, [r2, #4]
	//set the dest buffer
		DMA1_Channel7->CPAR =dst;
 80002d6:	4a15      	ldr	r2, [pc, #84]	@ (800032c <dma1_channe7_init+0xb8>)
 80002d8:	68bb      	ldr	r3, [r7, #8]
 80002da:	6093      	str	r3, [r2, #8]
	//set the source buffer
		DMA1_Channel7->CMAR =src;
 80002dc:	4a13      	ldr	r2, [pc, #76]	@ (800032c <dma1_channe7_init+0xb8>)
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	60d3      	str	r3, [r2, #12]
	//set the length
		DMA1_Channel7->CNDTR =len;
 80002e2:	4a12      	ldr	r2, [pc, #72]	@ (800032c <dma1_channe7_init+0xb8>)
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	6053      	str	r3, [r2, #4]


	//enable memory increment
		DMA1_Channel7->CCR |= MINC;
 80002e8:	4b10      	ldr	r3, [pc, #64]	@ (800032c <dma1_channe7_init+0xb8>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a0f      	ldr	r2, [pc, #60]	@ (800032c <dma1_channe7_init+0xb8>)
 80002ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80002f2:	6013      	str	r3, [r2, #0]
	//configure direction i.e.memory array to peripheral
		DMA1_Channel7->CCR |= DTD ;
 80002f4:	4b0d      	ldr	r3, [pc, #52]	@ (800032c <dma1_channe7_init+0xb8>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a0c      	ldr	r2, [pc, #48]	@ (800032c <dma1_channe7_init+0xb8>)
 80002fa:	f043 0310 	orr.w	r3, r3, #16
 80002fe:	6013      	str	r3, [r2, #0]
		//ENABLE TRANSFER COMPLETE INTERRUPT
		DMA1_Channel7->CCR |=TCIE;
 8000300:	4b0a      	ldr	r3, [pc, #40]	@ (800032c <dma1_channe7_init+0xb8>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a09      	ldr	r2, [pc, #36]	@ (800032c <dma1_channe7_init+0xb8>)
 8000306:	f043 0302 	orr.w	r3, r3, #2
 800030a:	6013      	str	r3, [r2, #0]



	//enable uart2 tx dma
		USART2->CR3 |= DMAT;
 800030c:	4b09      	ldr	r3, [pc, #36]	@ (8000334 <dma1_channe7_init+0xc0>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	4a08      	ldr	r2, [pc, #32]	@ (8000334 <dma1_channe7_init+0xc0>)
 8000312:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000316:	6153      	str	r3, [r2, #20]
	//dma interrupt enable in nvic
		NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000318:	2011      	movs	r0, #17
 800031a:	f7ff ff7f 	bl	800021c <__NVIC_EnableIRQ>


}
 800031e:	bf00      	nop
 8000320:	3710      	adds	r7, #16
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	40021000 	.word	0x40021000
 800032c:	40020080 	.word	0x40020080
 8000330:	40020000 	.word	0x40020000
 8000334:	40004400 	.word	0x40004400

08000338 <uart2_tx_init>:


void uart2_tx_init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
    /************* Configure UART GPIO pin ************/

    // Enable clock access to GPIOA & AFIO
    RCC->APB2ENR |= GPIOAEN;
 800033c:	4b1d      	ldr	r3, [pc, #116]	@ (80003b4 <uart2_tx_init+0x7c>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	4a1c      	ldr	r2, [pc, #112]	@ (80003b4 <uart2_tx_init+0x7c>)
 8000342:	f043 0304 	orr.w	r3, r3, #4
 8000346:	6193      	str	r3, [r2, #24]
    RCC->APB2ENR |= AFIOEN;
 8000348:	4b1a      	ldr	r3, [pc, #104]	@ (80003b4 <uart2_tx_init+0x7c>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	4a19      	ldr	r2, [pc, #100]	@ (80003b4 <uart2_tx_init+0x7c>)
 800034e:	f043 0301 	orr.w	r3, r3, #1
 8000352:	6193      	str	r3, [r2, #24]

    // Set PA2 to alternate function push-pull
    // PA2 is configured in CRL (bits [11:8])
    GPIOA->CRL |=  (1U << 8);   // MODE2_0 = 1
 8000354:	4b18      	ldr	r3, [pc, #96]	@ (80003b8 <uart2_tx_init+0x80>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a17      	ldr	r2, [pc, #92]	@ (80003b8 <uart2_tx_init+0x80>)
 800035a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800035e:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |=  (1U << 9);   // MODE2_1 = 1
 8000360:	4b15      	ldr	r3, [pc, #84]	@ (80003b8 <uart2_tx_init+0x80>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a14      	ldr	r2, [pc, #80]	@ (80003b8 <uart2_tx_init+0x80>)
 8000366:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800036a:	6013      	str	r3, [r2, #0]
    // CNF2_0 = 0 → already cleared
    GPIOA->CRL |=  (1U << 11);
 800036c:	4b12      	ldr	r3, [pc, #72]	@ (80003b8 <uart2_tx_init+0x80>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a11      	ldr	r2, [pc, #68]	@ (80003b8 <uart2_tx_init+0x80>)
 8000372:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000376:	6013      	str	r3, [r2, #0]
    GPIOA->CRL &=  ~(1U << 10);
 8000378:	4b0f      	ldr	r3, [pc, #60]	@ (80003b8 <uart2_tx_init+0x80>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a0e      	ldr	r2, [pc, #56]	@ (80003b8 <uart2_tx_init+0x80>)
 800037e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000382:	6013      	str	r3, [r2, #0]
    // MODE2 = 11 (Output 50 MHz), CNF2 = 10 (AF push-pull)

    /************* Configure UART module ************/

    // Enable clock access to USART2
    RCC->APB1ENR |= UART2EN;
 8000384:	4b0b      	ldr	r3, [pc, #44]	@ (80003b4 <uart2_tx_init+0x7c>)
 8000386:	69db      	ldr	r3, [r3, #28]
 8000388:	4a0a      	ldr	r2, [pc, #40]	@ (80003b4 <uart2_tx_init+0x7c>)
 800038a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800038e:	61d3      	str	r3, [r2, #28]

    // Set baud rate
    uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000390:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000394:	4909      	ldr	r1, [pc, #36]	@ (80003bc <uart2_tx_init+0x84>)
 8000396:	480a      	ldr	r0, [pc, #40]	@ (80003c0 <uart2_tx_init+0x88>)
 8000398:	f7ff ff5c 	bl	8000254 <uart_set_baudrate>

    // Configure transfer direction (transmitter only)
    USART2->CR1 = CR1_TE;
 800039c:	4b08      	ldr	r3, [pc, #32]	@ (80003c0 <uart2_tx_init+0x88>)
 800039e:	2208      	movs	r2, #8
 80003a0:	60da      	str	r2, [r3, #12]

    // Enable UART module
    USART2->CR1 |= CR1_UE;
 80003a2:	4b07      	ldr	r3, [pc, #28]	@ (80003c0 <uart2_tx_init+0x88>)
 80003a4:	68db      	ldr	r3, [r3, #12]
 80003a6:	4a06      	ldr	r2, [pc, #24]	@ (80003c0 <uart2_tx_init+0x88>)
 80003a8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80003ac:	60d3      	str	r3, [r2, #12]
}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	40021000 	.word	0x40021000
 80003b8:	40010800 	.word	0x40010800
 80003bc:	007a1200 	.word	0x007a1200
 80003c0:	40004400 	.word	0x40004400

080003c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003c4:	480d      	ldr	r0, [pc, #52]	@ (80003fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003c8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003cc:	480c      	ldr	r0, [pc, #48]	@ (8000400 <LoopForever+0x6>)
  ldr r1, =_edata
 80003ce:	490d      	ldr	r1, [pc, #52]	@ (8000404 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000408 <LoopForever+0xe>)
  movs r3, #0
 80003d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003d4:	e002      	b.n	80003dc <LoopCopyDataInit>

080003d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003da:	3304      	adds	r3, #4

080003dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003e0:	d3f9      	bcc.n	80003d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003e2:	4a0a      	ldr	r2, [pc, #40]	@ (800040c <LoopForever+0x12>)
  ldr r4, =_ebss
 80003e4:	4c0a      	ldr	r4, [pc, #40]	@ (8000410 <LoopForever+0x16>)
  movs r3, #0
 80003e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003e8:	e001      	b.n	80003ee <LoopFillZerobss>

080003ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003ec:	3204      	adds	r2, #4

080003ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003f0:	d3fb      	bcc.n	80003ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003f2:	f000 f811 	bl	8000418 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003f6:	f7ff febb 	bl	8000170 <main>

080003fa <LoopForever>:

LoopForever:
  b LoopForever
 80003fa:	e7fe      	b.n	80003fa <LoopForever>
  ldr   r0, =_estack
 80003fc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000400:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000404:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000408:	080004a0 	.word	0x080004a0
  ldr r2, =_sbss
 800040c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000410:	2000001c 	.word	0x2000001c

08000414 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000414:	e7fe      	b.n	8000414 <ADC1_2_IRQHandler>
	...

08000418 <__libc_init_array>:
 8000418:	b570      	push	{r4, r5, r6, lr}
 800041a:	2600      	movs	r6, #0
 800041c:	4d0c      	ldr	r5, [pc, #48]	@ (8000450 <__libc_init_array+0x38>)
 800041e:	4c0d      	ldr	r4, [pc, #52]	@ (8000454 <__libc_init_array+0x3c>)
 8000420:	1b64      	subs	r4, r4, r5
 8000422:	10a4      	asrs	r4, r4, #2
 8000424:	42a6      	cmp	r6, r4
 8000426:	d109      	bne.n	800043c <__libc_init_array+0x24>
 8000428:	f000 f81a 	bl	8000460 <_init>
 800042c:	2600      	movs	r6, #0
 800042e:	4d0a      	ldr	r5, [pc, #40]	@ (8000458 <__libc_init_array+0x40>)
 8000430:	4c0a      	ldr	r4, [pc, #40]	@ (800045c <__libc_init_array+0x44>)
 8000432:	1b64      	subs	r4, r4, r5
 8000434:	10a4      	asrs	r4, r4, #2
 8000436:	42a6      	cmp	r6, r4
 8000438:	d105      	bne.n	8000446 <__libc_init_array+0x2e>
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000440:	4798      	blx	r3
 8000442:	3601      	adds	r6, #1
 8000444:	e7ee      	b.n	8000424 <__libc_init_array+0xc>
 8000446:	f855 3b04 	ldr.w	r3, [r5], #4
 800044a:	4798      	blx	r3
 800044c:	3601      	adds	r6, #1
 800044e:	e7f2      	b.n	8000436 <__libc_init_array+0x1e>
 8000450:	08000498 	.word	0x08000498
 8000454:	08000498 	.word	0x08000498
 8000458:	08000498 	.word	0x08000498
 800045c:	0800049c 	.word	0x0800049c

08000460 <_init>:
 8000460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000462:	bf00      	nop
 8000464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000466:	bc08      	pop	{r3}
 8000468:	469e      	mov	lr, r3
 800046a:	4770      	bx	lr

0800046c <_fini>:
 800046c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046e:	bf00      	nop
 8000470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000472:	bc08      	pop	{r3}
 8000474:	469e      	mov	lr, r3
 8000476:	4770      	bx	lr
