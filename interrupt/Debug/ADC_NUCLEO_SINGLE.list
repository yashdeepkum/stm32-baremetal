
ADC_NUCLEO_SINGLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012a0  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080013d0  080013d0  000023d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001418  08001418  0000305c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001418  08001418  0000305c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001418  08001418  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001418  08001418  00002418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800141c  0800141c  0000241c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001420  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  0800147c  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  0800147c  000031cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000eda  00000000  00000000  00003085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005bc  00000000  00000000  00003f5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000180  00000000  00000000  00004520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000104  00000000  00000000  000046a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011e4b  00000000  00000000  000047a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002028  00000000  00000000  000165ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00059ee0  00000000  00000000  00018617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000724f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c44  00000000  00000000  0007253c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  00073180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000005c 	.word	0x2000005c
 800014c:	00000000 	.word	0x00000000
 8000150:	080013b8 	.word	0x080013b8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000060 	.word	0x20000060
 800016c:	080013b8 	.word	0x080013b8

08000170 <pa1_adc_init>:
#define SWSTART    (1U<<22)    /* Start conversion */
#define ADCEOC     (1U<<1)     /* End of conversion flag */

/* PA1 â†’ ADC Channel 1 */
void pa1_adc_init(void)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
    /* 1) Enable clock access to GPIOA */
    RCC->APB2ENR |= GPIOAEN;
 8000176:	4b26      	ldr	r3, [pc, #152]	@ (8000210 <pa1_adc_init+0xa0>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	4a25      	ldr	r2, [pc, #148]	@ (8000210 <pa1_adc_init+0xa0>)
 800017c:	f043 0304 	orr.w	r3, r3, #4
 8000180:	6193      	str	r3, [r2, #24]

    /* 2) Set PA1 to analog mode (MODE1 = 00, CNF1 = 00) */
    /* Clear MODE1[1:0] (bits 5 and 4) */
    GPIOA->CRL &= ~(1U << 4);
 8000182:	4b24      	ldr	r3, [pc, #144]	@ (8000214 <pa1_adc_init+0xa4>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	4a23      	ldr	r2, [pc, #140]	@ (8000214 <pa1_adc_init+0xa4>)
 8000188:	f023 0310 	bic.w	r3, r3, #16
 800018c:	6013      	str	r3, [r2, #0]
    GPIOA->CRL &= ~(1U << 5);
 800018e:	4b21      	ldr	r3, [pc, #132]	@ (8000214 <pa1_adc_init+0xa4>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	4a20      	ldr	r2, [pc, #128]	@ (8000214 <pa1_adc_init+0xa4>)
 8000194:	f023 0320 	bic.w	r3, r3, #32
 8000198:	6013      	str	r3, [r2, #0]

    /* Clear CNF1[1:0] (bits 7 and 6) */
    GPIOA->CRL &= ~(1U << 6);
 800019a:	4b1e      	ldr	r3, [pc, #120]	@ (8000214 <pa1_adc_init+0xa4>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	4a1d      	ldr	r2, [pc, #116]	@ (8000214 <pa1_adc_init+0xa4>)
 80001a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80001a4:	6013      	str	r3, [r2, #0]
    GPIOA->CRL &= ~(1U << 7);
 80001a6:	4b1b      	ldr	r3, [pc, #108]	@ (8000214 <pa1_adc_init+0xa4>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	4a1a      	ldr	r2, [pc, #104]	@ (8000214 <pa1_adc_init+0xa4>)
 80001ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80001b0:	6013      	str	r3, [r2, #0]
  /* Clear bits for PA1 */

    /* 3) Enable clock access to ADC1 */
    RCC->APB2ENR |= ADC1EN;
 80001b2:	4b17      	ldr	r3, [pc, #92]	@ (8000210 <pa1_adc_init+0xa0>)
 80001b4:	699b      	ldr	r3, [r3, #24]
 80001b6:	4a16      	ldr	r2, [pc, #88]	@ (8000210 <pa1_adc_init+0xa0>)
 80001b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80001bc:	6193      	str	r3, [r2, #24]

    /* 4) Configure sequence */
    ADC1->SQR1 = ADC_SEQ_LEN;   /* Sequence length = 1 */
 80001be:	4b16      	ldr	r3, [pc, #88]	@ (8000218 <pa1_adc_init+0xa8>)
 80001c0:	2200      	movs	r2, #0
 80001c2:	62da      	str	r2, [r3, #44]	@ 0x2c
    ADC1->SQR3 = ADC_CH1;       /* First conversion: channel 1 */
 80001c4:	4b14      	ldr	r3, [pc, #80]	@ (8000218 <pa1_adc_init+0xa8>)
 80001c6:	2201      	movs	r2, #1
 80001c8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* 5) Enable ADC module (wake-up) */
    ADC1->CR2 |= ADC_MOD_EN;
 80001ca:	4b13      	ldr	r3, [pc, #76]	@ (8000218 <pa1_adc_init+0xa8>)
 80001cc:	689b      	ldr	r3, [r3, #8]
 80001ce:	4a12      	ldr	r2, [pc, #72]	@ (8000218 <pa1_adc_init+0xa8>)
 80001d0:	f043 0301 	orr.w	r3, r3, #1
 80001d4:	6093      	str	r3, [r2, #8]

    /* Small delay */
    for (volatile int i=0; i<1000; i++) {}
 80001d6:	2300      	movs	r3, #0
 80001d8:	607b      	str	r3, [r7, #4]
 80001da:	e002      	b.n	80001e2 <pa1_adc_init+0x72>
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	3301      	adds	r3, #1
 80001e0:	607b      	str	r3, [r7, #4]
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80001e8:	dbf8      	blt.n	80001dc <pa1_adc_init+0x6c>

    /* 6) Calibrate ADC */
    ADC1->CR2 |= ADC_CAL;
 80001ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000218 <pa1_adc_init+0xa8>)
 80001ec:	689b      	ldr	r3, [r3, #8]
 80001ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000218 <pa1_adc_init+0xa8>)
 80001f0:	f043 0304 	orr.w	r3, r3, #4
 80001f4:	6093      	str	r3, [r2, #8]
    while (ADC1->CR2 & ADC_CAL) {}
 80001f6:	bf00      	nop
 80001f8:	4b07      	ldr	r3, [pc, #28]	@ (8000218 <pa1_adc_init+0xa8>)
 80001fa:	689b      	ldr	r3, [r3, #8]
 80001fc:	f003 0304 	and.w	r3, r3, #4
 8000200:	2b00      	cmp	r3, #0
 8000202:	d1f9      	bne.n	80001f8 <pa1_adc_init+0x88>
}
 8000204:	bf00      	nop
 8000206:	bf00      	nop
 8000208:	370c      	adds	r7, #12
 800020a:	46bd      	mov	sp, r7
 800020c:	bc80      	pop	{r7}
 800020e:	4770      	bx	lr
 8000210:	40021000 	.word	0x40021000
 8000214:	40010800 	.word	0x40010800
 8000218:	40012400 	.word	0x40012400

0800021c <start_conversion>:

void start_conversion(void)
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
    /* Start conversion by software */
    ADC1->CR2 |= ADC_MOD_EN;  /* make sure ADC is ON */
 8000220:	4b07      	ldr	r3, [pc, #28]	@ (8000240 <start_conversion+0x24>)
 8000222:	689b      	ldr	r3, [r3, #8]
 8000224:	4a06      	ldr	r2, [pc, #24]	@ (8000240 <start_conversion+0x24>)
 8000226:	f043 0301 	orr.w	r3, r3, #1
 800022a:	6093      	str	r3, [r2, #8]
    ADC1->CR2 |= SWSTART;
 800022c:	4b04      	ldr	r3, [pc, #16]	@ (8000240 <start_conversion+0x24>)
 800022e:	689b      	ldr	r3, [r3, #8]
 8000230:	4a03      	ldr	r2, [pc, #12]	@ (8000240 <start_conversion+0x24>)
 8000232:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000236:	6093      	str	r3, [r2, #8]
}
 8000238:	bf00      	nop
 800023a:	46bd      	mov	sp, r7
 800023c:	bc80      	pop	{r7}
 800023e:	4770      	bx	lr
 8000240:	40012400 	.word	0x40012400

08000244 <adc_read>:

uint32_t adc_read(void)
{
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
    /* Wait for conversion complete */
    while (!(ADC1->SR & ADCEOC)) {}
 8000248:	bf00      	nop
 800024a:	4b06      	ldr	r3, [pc, #24]	@ (8000264 <adc_read+0x20>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	f003 0302 	and.w	r3, r3, #2
 8000252:	2b00      	cmp	r3, #0
 8000254:	d0f9      	beq.n	800024a <adc_read+0x6>
    return ADC1->DR;
 8000256:	4b03      	ldr	r3, [pc, #12]	@ (8000264 <adc_read+0x20>)
 8000258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800025a:	4618      	mov	r0, r3
 800025c:	46bd      	mov	sp, r7
 800025e:	bc80      	pop	{r7}
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	40012400 	.word	0x40012400

08000268 <main>:
#include "adc.h"
#include "uart.h"

uint32_t sensor_value;
int main(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
     uart2_tx_init();
 800026c:	f000 f8f0 	bl	8000450 <uart2_tx_init>
     pa1_adc_init();
 8000270:	f7ff ff7e 	bl	8000170 <pa1_adc_init>


    // Enable clock access to GPIOA

    while (1)
    {start_conversion();
 8000274:	f7ff ffd2 	bl	800021c <start_conversion>
    	sensor_value=adc_read();
 8000278:	f7ff ffe4 	bl	8000244 <adc_read>
 800027c:	4603      	mov	r3, r0
 800027e:	4a05      	ldr	r2, [pc, #20]	@ (8000294 <main+0x2c>)
 8000280:	6013      	str	r3, [r2, #0]
    	printf("sensor value %d \n \r",sensor_value);
 8000282:	4b04      	ldr	r3, [pc, #16]	@ (8000294 <main+0x2c>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4619      	mov	r1, r3
 8000288:	4803      	ldr	r0, [pc, #12]	@ (8000298 <main+0x30>)
 800028a:	f000 fa1f 	bl	80006cc <iprintf>
    {start_conversion();
 800028e:	bf00      	nop
 8000290:	e7f0      	b.n	8000274 <main+0xc>
 8000292:	bf00      	nop
 8000294:	20000078 	.word	0x20000078
 8000298:	080013d0 	.word	0x080013d0

0800029c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b086      	sub	sp, #24
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	60f8      	str	r0, [r7, #12]
 80002a4:	60b9      	str	r1, [r7, #8]
 80002a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002a8:	2300      	movs	r3, #0
 80002aa:	617b      	str	r3, [r7, #20]
 80002ac:	e00a      	b.n	80002c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80002ae:	f3af 8000 	nop.w
 80002b2:	4601      	mov	r1, r0
 80002b4:	68bb      	ldr	r3, [r7, #8]
 80002b6:	1c5a      	adds	r2, r3, #1
 80002b8:	60ba      	str	r2, [r7, #8]
 80002ba:	b2ca      	uxtb	r2, r1
 80002bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002be:	697b      	ldr	r3, [r7, #20]
 80002c0:	3301      	adds	r3, #1
 80002c2:	617b      	str	r3, [r7, #20]
 80002c4:	697a      	ldr	r2, [r7, #20]
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	429a      	cmp	r2, r3
 80002ca:	dbf0      	blt.n	80002ae <_read+0x12>
  }

  return len;
 80002cc:	687b      	ldr	r3, [r7, #4]
}
 80002ce:	4618      	mov	r0, r3
 80002d0:	3718      	adds	r7, #24
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}

080002d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80002d6:	b580      	push	{r7, lr}
 80002d8:	b086      	sub	sp, #24
 80002da:	af00      	add	r7, sp, #0
 80002dc:	60f8      	str	r0, [r7, #12]
 80002de:	60b9      	str	r1, [r7, #8]
 80002e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002e2:	2300      	movs	r3, #0
 80002e4:	617b      	str	r3, [r7, #20]
 80002e6:	e009      	b.n	80002fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80002e8:	68bb      	ldr	r3, [r7, #8]
 80002ea:	1c5a      	adds	r2, r3, #1
 80002ec:	60ba      	str	r2, [r7, #8]
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	4618      	mov	r0, r3
 80002f2:	f000 f8f3 	bl	80004dc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002f6:	697b      	ldr	r3, [r7, #20]
 80002f8:	3301      	adds	r3, #1
 80002fa:	617b      	str	r3, [r7, #20]
 80002fc:	697a      	ldr	r2, [r7, #20]
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	429a      	cmp	r2, r3
 8000302:	dbf1      	blt.n	80002e8 <_write+0x12>
  }
  return len;
 8000304:	687b      	ldr	r3, [r7, #4]
}
 8000306:	4618      	mov	r0, r3
 8000308:	3718      	adds	r7, #24
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}

0800030e <_close>:

int _close(int file)
{
 800030e:	b480      	push	{r7}
 8000310:	b083      	sub	sp, #12
 8000312:	af00      	add	r7, sp, #0
 8000314:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000316:	f04f 33ff 	mov.w	r3, #4294967295
}
 800031a:	4618      	mov	r0, r3
 800031c:	370c      	adds	r7, #12
 800031e:	46bd      	mov	sp, r7
 8000320:	bc80      	pop	{r7}
 8000322:	4770      	bx	lr

08000324 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000334:	605a      	str	r2, [r3, #4]
  return 0;
 8000336:	2300      	movs	r3, #0
}
 8000338:	4618      	mov	r0, r3
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	bc80      	pop	{r7}
 8000340:	4770      	bx	lr

08000342 <_isatty>:

int _isatty(int file)
{
 8000342:	b480      	push	{r7}
 8000344:	b083      	sub	sp, #12
 8000346:	af00      	add	r7, sp, #0
 8000348:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800034a:	2301      	movs	r3, #1
}
 800034c:	4618      	mov	r0, r3
 800034e:	370c      	adds	r7, #12
 8000350:	46bd      	mov	sp, r7
 8000352:	bc80      	pop	{r7}
 8000354:	4770      	bx	lr

08000356 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000356:	b480      	push	{r7}
 8000358:	b085      	sub	sp, #20
 800035a:	af00      	add	r7, sp, #0
 800035c:	60f8      	str	r0, [r7, #12]
 800035e:	60b9      	str	r1, [r7, #8]
 8000360:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000362:	2300      	movs	r3, #0
}
 8000364:	4618      	mov	r0, r3
 8000366:	3714      	adds	r7, #20
 8000368:	46bd      	mov	sp, r7
 800036a:	bc80      	pop	{r7}
 800036c:	4770      	bx	lr
	...

08000370 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b086      	sub	sp, #24
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000378:	4a14      	ldr	r2, [pc, #80]	@ (80003cc <_sbrk+0x5c>)
 800037a:	4b15      	ldr	r3, [pc, #84]	@ (80003d0 <_sbrk+0x60>)
 800037c:	1ad3      	subs	r3, r2, r3
 800037e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000380:	697b      	ldr	r3, [r7, #20]
 8000382:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000384:	4b13      	ldr	r3, [pc, #76]	@ (80003d4 <_sbrk+0x64>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d102      	bne.n	8000392 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800038c:	4b11      	ldr	r3, [pc, #68]	@ (80003d4 <_sbrk+0x64>)
 800038e:	4a12      	ldr	r2, [pc, #72]	@ (80003d8 <_sbrk+0x68>)
 8000390:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000392:	4b10      	ldr	r3, [pc, #64]	@ (80003d4 <_sbrk+0x64>)
 8000394:	681a      	ldr	r2, [r3, #0]
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	4413      	add	r3, r2
 800039a:	693a      	ldr	r2, [r7, #16]
 800039c:	429a      	cmp	r2, r3
 800039e:	d207      	bcs.n	80003b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003a0:	f000 fa38 	bl	8000814 <__errno>
 80003a4:	4603      	mov	r3, r0
 80003a6:	220c      	movs	r2, #12
 80003a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003aa:	f04f 33ff 	mov.w	r3, #4294967295
 80003ae:	e009      	b.n	80003c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80003b0:	4b08      	ldr	r3, [pc, #32]	@ (80003d4 <_sbrk+0x64>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80003b6:	4b07      	ldr	r3, [pc, #28]	@ (80003d4 <_sbrk+0x64>)
 80003b8:	681a      	ldr	r2, [r3, #0]
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4413      	add	r3, r2
 80003be:	4a05      	ldr	r2, [pc, #20]	@ (80003d4 <_sbrk+0x64>)
 80003c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80003c2:	68fb      	ldr	r3, [r7, #12]
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	3718      	adds	r7, #24
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	20005000 	.word	0x20005000
 80003d0:	00000400 	.word	0x00000400
 80003d4:	2000007c 	.word	0x2000007c
 80003d8:	200001d0 	.word	0x200001d0

080003dc <compute_uart_bd>:
#define CR1_TE      (1U<<3)
#define CR1_UE      (1U<<13)
#define SR_TXE      (1U<<7)

static uint16_t compute_uart_bd(uint32_t periphclk, uint32_t baudrate)
{
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	6039      	str	r1, [r7, #0]
    return (periphclk + (baudrate/2U)) / baudrate;
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	085a      	lsrs	r2, r3, #1
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	441a      	add	r2, r3
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80003f4:	b29b      	uxth	r3, r3
}
 80003f6:	4618      	mov	r0, r3
 80003f8:	370c      	adds	r7, #12
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bc80      	pop	{r7}
 80003fe:	4770      	bx	lr

08000400 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t periphclk, uint32_t baudrate)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b084      	sub	sp, #16
 8000404:	af00      	add	r7, sp, #0
 8000406:	60f8      	str	r0, [r7, #12]
 8000408:	60b9      	str	r1, [r7, #8]
 800040a:	607a      	str	r2, [r7, #4]
    USARTx->BRR = compute_uart_bd(periphclk, baudrate);
 800040c:	6879      	ldr	r1, [r7, #4]
 800040e:	68b8      	ldr	r0, [r7, #8]
 8000410:	f7ff ffe4 	bl	80003dc <compute_uart_bd>
 8000414:	4603      	mov	r3, r0
 8000416:	461a      	mov	r2, r3
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	609a      	str	r2, [r3, #8]
}
 800041c:	bf00      	nop
 800041e:	3710      	adds	r7, #16
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}

08000424 <uart2_write>:

void uart2_write(int ch)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
    // wait until transmit data register is empty
    while (!(USART2->SR & SR_TXE)) {}
 800042c:	bf00      	nop
 800042e:	4b07      	ldr	r3, [pc, #28]	@ (800044c <uart2_write+0x28>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000436:	2b00      	cmp	r3, #0
 8000438:	d0f9      	beq.n	800042e <uart2_write+0xa>
    // write to data register
    USART2->DR = (ch & 0xFF);
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	4a03      	ldr	r2, [pc, #12]	@ (800044c <uart2_write+0x28>)
 800043e:	b2db      	uxtb	r3, r3
 8000440:	6053      	str	r3, [r2, #4]
}
 8000442:	bf00      	nop
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr
 800044c:	40004400 	.word	0x40004400

08000450 <uart2_tx_init>:

void uart2_tx_init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
    /************* Configure UART GPIO pin ************/

    // Enable clock access to GPIOA & AFIO
    RCC->APB2ENR |= GPIOAEN;
 8000454:	4b1d      	ldr	r3, [pc, #116]	@ (80004cc <uart2_tx_init+0x7c>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	4a1c      	ldr	r2, [pc, #112]	@ (80004cc <uart2_tx_init+0x7c>)
 800045a:	f043 0304 	orr.w	r3, r3, #4
 800045e:	6193      	str	r3, [r2, #24]
    RCC->APB2ENR |= AFIOEN;
 8000460:	4b1a      	ldr	r3, [pc, #104]	@ (80004cc <uart2_tx_init+0x7c>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	4a19      	ldr	r2, [pc, #100]	@ (80004cc <uart2_tx_init+0x7c>)
 8000466:	f043 0301 	orr.w	r3, r3, #1
 800046a:	6193      	str	r3, [r2, #24]

    // Set PA2 to alternate function push-pull
    // PA2 is configured in CRL (bits [11:8])
    GPIOA->CRL |=  (1U << 8);   // MODE2_0 = 1
 800046c:	4b18      	ldr	r3, [pc, #96]	@ (80004d0 <uart2_tx_init+0x80>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a17      	ldr	r2, [pc, #92]	@ (80004d0 <uart2_tx_init+0x80>)
 8000472:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000476:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |=  (1U << 9);   // MODE2_1 = 1
 8000478:	4b15      	ldr	r3, [pc, #84]	@ (80004d0 <uart2_tx_init+0x80>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a14      	ldr	r2, [pc, #80]	@ (80004d0 <uart2_tx_init+0x80>)
 800047e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000482:	6013      	str	r3, [r2, #0]
    // CNF2_0 = 0 â†’ already cleared
    GPIOA->CRL |=  (1U << 11);
 8000484:	4b12      	ldr	r3, [pc, #72]	@ (80004d0 <uart2_tx_init+0x80>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a11      	ldr	r2, [pc, #68]	@ (80004d0 <uart2_tx_init+0x80>)
 800048a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800048e:	6013      	str	r3, [r2, #0]
    GPIOA->CRL &=  ~(1U << 10);
 8000490:	4b0f      	ldr	r3, [pc, #60]	@ (80004d0 <uart2_tx_init+0x80>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a0e      	ldr	r2, [pc, #56]	@ (80004d0 <uart2_tx_init+0x80>)
 8000496:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800049a:	6013      	str	r3, [r2, #0]
    // MODE2 = 11 (Output 50 MHz), CNF2 = 10 (AF push-pull)

    /************* Configure UART module ************/

    // Enable clock access to USART2
    RCC->APB1ENR |= UART2EN;
 800049c:	4b0b      	ldr	r3, [pc, #44]	@ (80004cc <uart2_tx_init+0x7c>)
 800049e:	69db      	ldr	r3, [r3, #28]
 80004a0:	4a0a      	ldr	r2, [pc, #40]	@ (80004cc <uart2_tx_init+0x7c>)
 80004a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004a6:	61d3      	str	r3, [r2, #28]

    // Set baud rate
    uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 80004a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80004ac:	4909      	ldr	r1, [pc, #36]	@ (80004d4 <uart2_tx_init+0x84>)
 80004ae:	480a      	ldr	r0, [pc, #40]	@ (80004d8 <uart2_tx_init+0x88>)
 80004b0:	f7ff ffa6 	bl	8000400 <uart_set_baudrate>

    // Configure transfer direction (transmitter only)
    USART2->CR1 = CR1_TE;
 80004b4:	4b08      	ldr	r3, [pc, #32]	@ (80004d8 <uart2_tx_init+0x88>)
 80004b6:	2208      	movs	r2, #8
 80004b8:	60da      	str	r2, [r3, #12]

    // Enable UART module
    USART2->CR1 |= CR1_UE;
 80004ba:	4b07      	ldr	r3, [pc, #28]	@ (80004d8 <uart2_tx_init+0x88>)
 80004bc:	68db      	ldr	r3, [r3, #12]
 80004be:	4a06      	ldr	r2, [pc, #24]	@ (80004d8 <uart2_tx_init+0x88>)
 80004c0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80004c4:	60d3      	str	r3, [r2, #12]
}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	40021000 	.word	0x40021000
 80004d0:	40010800 	.word	0x40010800
 80004d4:	00f42400 	.word	0x00f42400
 80004d8:	40004400 	.word	0x40004400

080004dc <__io_putchar>:

int __io_putchar(int ch)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
    uart2_write(ch);
 80004e4:	6878      	ldr	r0, [r7, #4]
 80004e6:	f7ff ff9d 	bl	8000424 <uart2_write>
    return ch;
 80004ea:	687b      	ldr	r3, [r7, #4]
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	3708      	adds	r7, #8
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}

080004f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004f4:	480d      	ldr	r0, [pc, #52]	@ (800052c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004f8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004fc:	480c      	ldr	r0, [pc, #48]	@ (8000530 <LoopForever+0x6>)
  ldr r1, =_edata
 80004fe:	490d      	ldr	r1, [pc, #52]	@ (8000534 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000500:	4a0d      	ldr	r2, [pc, #52]	@ (8000538 <LoopForever+0xe>)
  movs r3, #0
 8000502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000504:	e002      	b.n	800050c <LoopCopyDataInit>

08000506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800050a:	3304      	adds	r3, #4

0800050c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800050c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800050e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000510:	d3f9      	bcc.n	8000506 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000512:	4a0a      	ldr	r2, [pc, #40]	@ (800053c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000514:	4c0a      	ldr	r4, [pc, #40]	@ (8000540 <LoopForever+0x16>)
  movs r3, #0
 8000516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000518:	e001      	b.n	800051e <LoopFillZerobss>

0800051a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800051a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800051c:	3204      	adds	r2, #4

0800051e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800051e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000520:	d3fb      	bcc.n	800051a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000522:	f000 f97d 	bl	8000820 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000526:	f7ff fe9f 	bl	8000268 <main>

0800052a <LoopForever>:

LoopForever:
  b LoopForever
 800052a:	e7fe      	b.n	800052a <LoopForever>
  ldr   r0, =_estack
 800052c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000534:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000538:	08001420 	.word	0x08001420
  ldr r2, =_sbss
 800053c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000540:	200001cc 	.word	0x200001cc

08000544 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000544:	e7fe      	b.n	8000544 <ADC1_2_IRQHandler>
	...

08000548 <std>:
 8000548:	2300      	movs	r3, #0
 800054a:	b510      	push	{r4, lr}
 800054c:	4604      	mov	r4, r0
 800054e:	e9c0 3300 	strd	r3, r3, [r0]
 8000552:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000556:	6083      	str	r3, [r0, #8]
 8000558:	8181      	strh	r1, [r0, #12]
 800055a:	6643      	str	r3, [r0, #100]	@ 0x64
 800055c:	81c2      	strh	r2, [r0, #14]
 800055e:	6183      	str	r3, [r0, #24]
 8000560:	4619      	mov	r1, r3
 8000562:	2208      	movs	r2, #8
 8000564:	305c      	adds	r0, #92	@ 0x5c
 8000566:	f000 f906 	bl	8000776 <memset>
 800056a:	4b0d      	ldr	r3, [pc, #52]	@ (80005a0 <std+0x58>)
 800056c:	6224      	str	r4, [r4, #32]
 800056e:	6263      	str	r3, [r4, #36]	@ 0x24
 8000570:	4b0c      	ldr	r3, [pc, #48]	@ (80005a4 <std+0x5c>)
 8000572:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000574:	4b0c      	ldr	r3, [pc, #48]	@ (80005a8 <std+0x60>)
 8000576:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000578:	4b0c      	ldr	r3, [pc, #48]	@ (80005ac <std+0x64>)
 800057a:	6323      	str	r3, [r4, #48]	@ 0x30
 800057c:	4b0c      	ldr	r3, [pc, #48]	@ (80005b0 <std+0x68>)
 800057e:	429c      	cmp	r4, r3
 8000580:	d006      	beq.n	8000590 <std+0x48>
 8000582:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000586:	4294      	cmp	r4, r2
 8000588:	d002      	beq.n	8000590 <std+0x48>
 800058a:	33d0      	adds	r3, #208	@ 0xd0
 800058c:	429c      	cmp	r4, r3
 800058e:	d105      	bne.n	800059c <std+0x54>
 8000590:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000598:	f000 b966 	b.w	8000868 <__retarget_lock_init_recursive>
 800059c:	bd10      	pop	{r4, pc}
 800059e:	bf00      	nop
 80005a0:	080006f1 	.word	0x080006f1
 80005a4:	08000713 	.word	0x08000713
 80005a8:	0800074b 	.word	0x0800074b
 80005ac:	0800076f 	.word	0x0800076f
 80005b0:	20000080 	.word	0x20000080

080005b4 <stdio_exit_handler>:
 80005b4:	4a02      	ldr	r2, [pc, #8]	@ (80005c0 <stdio_exit_handler+0xc>)
 80005b6:	4903      	ldr	r1, [pc, #12]	@ (80005c4 <stdio_exit_handler+0x10>)
 80005b8:	4803      	ldr	r0, [pc, #12]	@ (80005c8 <stdio_exit_handler+0x14>)
 80005ba:	f000 b869 	b.w	8000690 <_fwalk_sglue>
 80005be:	bf00      	nop
 80005c0:	20000000 	.word	0x20000000
 80005c4:	080010fd 	.word	0x080010fd
 80005c8:	20000010 	.word	0x20000010

080005cc <cleanup_stdio>:
 80005cc:	6841      	ldr	r1, [r0, #4]
 80005ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <cleanup_stdio+0x34>)
 80005d0:	b510      	push	{r4, lr}
 80005d2:	4299      	cmp	r1, r3
 80005d4:	4604      	mov	r4, r0
 80005d6:	d001      	beq.n	80005dc <cleanup_stdio+0x10>
 80005d8:	f000 fd90 	bl	80010fc <_fflush_r>
 80005dc:	68a1      	ldr	r1, [r4, #8]
 80005de:	4b09      	ldr	r3, [pc, #36]	@ (8000604 <cleanup_stdio+0x38>)
 80005e0:	4299      	cmp	r1, r3
 80005e2:	d002      	beq.n	80005ea <cleanup_stdio+0x1e>
 80005e4:	4620      	mov	r0, r4
 80005e6:	f000 fd89 	bl	80010fc <_fflush_r>
 80005ea:	68e1      	ldr	r1, [r4, #12]
 80005ec:	4b06      	ldr	r3, [pc, #24]	@ (8000608 <cleanup_stdio+0x3c>)
 80005ee:	4299      	cmp	r1, r3
 80005f0:	d004      	beq.n	80005fc <cleanup_stdio+0x30>
 80005f2:	4620      	mov	r0, r4
 80005f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005f8:	f000 bd80 	b.w	80010fc <_fflush_r>
 80005fc:	bd10      	pop	{r4, pc}
 80005fe:	bf00      	nop
 8000600:	20000080 	.word	0x20000080
 8000604:	200000e8 	.word	0x200000e8
 8000608:	20000150 	.word	0x20000150

0800060c <global_stdio_init.part.0>:
 800060c:	b510      	push	{r4, lr}
 800060e:	4b0b      	ldr	r3, [pc, #44]	@ (800063c <global_stdio_init.part.0+0x30>)
 8000610:	4c0b      	ldr	r4, [pc, #44]	@ (8000640 <global_stdio_init.part.0+0x34>)
 8000612:	4a0c      	ldr	r2, [pc, #48]	@ (8000644 <global_stdio_init.part.0+0x38>)
 8000614:	4620      	mov	r0, r4
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	2104      	movs	r1, #4
 800061a:	2200      	movs	r2, #0
 800061c:	f7ff ff94 	bl	8000548 <std>
 8000620:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000624:	2201      	movs	r2, #1
 8000626:	2109      	movs	r1, #9
 8000628:	f7ff ff8e 	bl	8000548 <std>
 800062c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000630:	2202      	movs	r2, #2
 8000632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000636:	2112      	movs	r1, #18
 8000638:	f7ff bf86 	b.w	8000548 <std>
 800063c:	200001b8 	.word	0x200001b8
 8000640:	20000080 	.word	0x20000080
 8000644:	080005b5 	.word	0x080005b5

08000648 <__sfp_lock_acquire>:
 8000648:	4801      	ldr	r0, [pc, #4]	@ (8000650 <__sfp_lock_acquire+0x8>)
 800064a:	f000 b90e 	b.w	800086a <__retarget_lock_acquire_recursive>
 800064e:	bf00      	nop
 8000650:	200001c1 	.word	0x200001c1

08000654 <__sfp_lock_release>:
 8000654:	4801      	ldr	r0, [pc, #4]	@ (800065c <__sfp_lock_release+0x8>)
 8000656:	f000 b909 	b.w	800086c <__retarget_lock_release_recursive>
 800065a:	bf00      	nop
 800065c:	200001c1 	.word	0x200001c1

08000660 <__sinit>:
 8000660:	b510      	push	{r4, lr}
 8000662:	4604      	mov	r4, r0
 8000664:	f7ff fff0 	bl	8000648 <__sfp_lock_acquire>
 8000668:	6a23      	ldr	r3, [r4, #32]
 800066a:	b11b      	cbz	r3, 8000674 <__sinit+0x14>
 800066c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000670:	f7ff bff0 	b.w	8000654 <__sfp_lock_release>
 8000674:	4b04      	ldr	r3, [pc, #16]	@ (8000688 <__sinit+0x28>)
 8000676:	6223      	str	r3, [r4, #32]
 8000678:	4b04      	ldr	r3, [pc, #16]	@ (800068c <__sinit+0x2c>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d1f5      	bne.n	800066c <__sinit+0xc>
 8000680:	f7ff ffc4 	bl	800060c <global_stdio_init.part.0>
 8000684:	e7f2      	b.n	800066c <__sinit+0xc>
 8000686:	bf00      	nop
 8000688:	080005cd 	.word	0x080005cd
 800068c:	200001b8 	.word	0x200001b8

08000690 <_fwalk_sglue>:
 8000690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000694:	4607      	mov	r7, r0
 8000696:	4688      	mov	r8, r1
 8000698:	4614      	mov	r4, r2
 800069a:	2600      	movs	r6, #0
 800069c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80006a0:	f1b9 0901 	subs.w	r9, r9, #1
 80006a4:	d505      	bpl.n	80006b2 <_fwalk_sglue+0x22>
 80006a6:	6824      	ldr	r4, [r4, #0]
 80006a8:	2c00      	cmp	r4, #0
 80006aa:	d1f7      	bne.n	800069c <_fwalk_sglue+0xc>
 80006ac:	4630      	mov	r0, r6
 80006ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80006b2:	89ab      	ldrh	r3, [r5, #12]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d907      	bls.n	80006c8 <_fwalk_sglue+0x38>
 80006b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80006bc:	3301      	adds	r3, #1
 80006be:	d003      	beq.n	80006c8 <_fwalk_sglue+0x38>
 80006c0:	4629      	mov	r1, r5
 80006c2:	4638      	mov	r0, r7
 80006c4:	47c0      	blx	r8
 80006c6:	4306      	orrs	r6, r0
 80006c8:	3568      	adds	r5, #104	@ 0x68
 80006ca:	e7e9      	b.n	80006a0 <_fwalk_sglue+0x10>

080006cc <iprintf>:
 80006cc:	b40f      	push	{r0, r1, r2, r3}
 80006ce:	b507      	push	{r0, r1, r2, lr}
 80006d0:	4906      	ldr	r1, [pc, #24]	@ (80006ec <iprintf+0x20>)
 80006d2:	ab04      	add	r3, sp, #16
 80006d4:	6808      	ldr	r0, [r1, #0]
 80006d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80006da:	6881      	ldr	r1, [r0, #8]
 80006dc:	9301      	str	r3, [sp, #4]
 80006de:	f000 f9e5 	bl	8000aac <_vfiprintf_r>
 80006e2:	b003      	add	sp, #12
 80006e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80006e8:	b004      	add	sp, #16
 80006ea:	4770      	bx	lr
 80006ec:	2000000c 	.word	0x2000000c

080006f0 <__sread>:
 80006f0:	b510      	push	{r4, lr}
 80006f2:	460c      	mov	r4, r1
 80006f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80006f8:	f000 f868 	bl	80007cc <_read_r>
 80006fc:	2800      	cmp	r0, #0
 80006fe:	bfab      	itete	ge
 8000700:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000702:	89a3      	ldrhlt	r3, [r4, #12]
 8000704:	181b      	addge	r3, r3, r0
 8000706:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800070a:	bfac      	ite	ge
 800070c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800070e:	81a3      	strhlt	r3, [r4, #12]
 8000710:	bd10      	pop	{r4, pc}

08000712 <__swrite>:
 8000712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000716:	461f      	mov	r7, r3
 8000718:	898b      	ldrh	r3, [r1, #12]
 800071a:	4605      	mov	r5, r0
 800071c:	05db      	lsls	r3, r3, #23
 800071e:	460c      	mov	r4, r1
 8000720:	4616      	mov	r6, r2
 8000722:	d505      	bpl.n	8000730 <__swrite+0x1e>
 8000724:	2302      	movs	r3, #2
 8000726:	2200      	movs	r2, #0
 8000728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800072c:	f000 f83c 	bl	80007a8 <_lseek_r>
 8000730:	89a3      	ldrh	r3, [r4, #12]
 8000732:	4632      	mov	r2, r6
 8000734:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000738:	81a3      	strh	r3, [r4, #12]
 800073a:	4628      	mov	r0, r5
 800073c:	463b      	mov	r3, r7
 800073e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000742:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000746:	f000 b853 	b.w	80007f0 <_write_r>

0800074a <__sseek>:
 800074a:	b510      	push	{r4, lr}
 800074c:	460c      	mov	r4, r1
 800074e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000752:	f000 f829 	bl	80007a8 <_lseek_r>
 8000756:	1c43      	adds	r3, r0, #1
 8000758:	89a3      	ldrh	r3, [r4, #12]
 800075a:	bf15      	itete	ne
 800075c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800075e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000762:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000766:	81a3      	strheq	r3, [r4, #12]
 8000768:	bf18      	it	ne
 800076a:	81a3      	strhne	r3, [r4, #12]
 800076c:	bd10      	pop	{r4, pc}

0800076e <__sclose>:
 800076e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000772:	f000 b809 	b.w	8000788 <_close_r>

08000776 <memset>:
 8000776:	4603      	mov	r3, r0
 8000778:	4402      	add	r2, r0
 800077a:	4293      	cmp	r3, r2
 800077c:	d100      	bne.n	8000780 <memset+0xa>
 800077e:	4770      	bx	lr
 8000780:	f803 1b01 	strb.w	r1, [r3], #1
 8000784:	e7f9      	b.n	800077a <memset+0x4>
	...

08000788 <_close_r>:
 8000788:	b538      	push	{r3, r4, r5, lr}
 800078a:	2300      	movs	r3, #0
 800078c:	4d05      	ldr	r5, [pc, #20]	@ (80007a4 <_close_r+0x1c>)
 800078e:	4604      	mov	r4, r0
 8000790:	4608      	mov	r0, r1
 8000792:	602b      	str	r3, [r5, #0]
 8000794:	f7ff fdbb 	bl	800030e <_close>
 8000798:	1c43      	adds	r3, r0, #1
 800079a:	d102      	bne.n	80007a2 <_close_r+0x1a>
 800079c:	682b      	ldr	r3, [r5, #0]
 800079e:	b103      	cbz	r3, 80007a2 <_close_r+0x1a>
 80007a0:	6023      	str	r3, [r4, #0]
 80007a2:	bd38      	pop	{r3, r4, r5, pc}
 80007a4:	200001bc 	.word	0x200001bc

080007a8 <_lseek_r>:
 80007a8:	b538      	push	{r3, r4, r5, lr}
 80007aa:	4604      	mov	r4, r0
 80007ac:	4608      	mov	r0, r1
 80007ae:	4611      	mov	r1, r2
 80007b0:	2200      	movs	r2, #0
 80007b2:	4d05      	ldr	r5, [pc, #20]	@ (80007c8 <_lseek_r+0x20>)
 80007b4:	602a      	str	r2, [r5, #0]
 80007b6:	461a      	mov	r2, r3
 80007b8:	f7ff fdcd 	bl	8000356 <_lseek>
 80007bc:	1c43      	adds	r3, r0, #1
 80007be:	d102      	bne.n	80007c6 <_lseek_r+0x1e>
 80007c0:	682b      	ldr	r3, [r5, #0]
 80007c2:	b103      	cbz	r3, 80007c6 <_lseek_r+0x1e>
 80007c4:	6023      	str	r3, [r4, #0]
 80007c6:	bd38      	pop	{r3, r4, r5, pc}
 80007c8:	200001bc 	.word	0x200001bc

080007cc <_read_r>:
 80007cc:	b538      	push	{r3, r4, r5, lr}
 80007ce:	4604      	mov	r4, r0
 80007d0:	4608      	mov	r0, r1
 80007d2:	4611      	mov	r1, r2
 80007d4:	2200      	movs	r2, #0
 80007d6:	4d05      	ldr	r5, [pc, #20]	@ (80007ec <_read_r+0x20>)
 80007d8:	602a      	str	r2, [r5, #0]
 80007da:	461a      	mov	r2, r3
 80007dc:	f7ff fd5e 	bl	800029c <_read>
 80007e0:	1c43      	adds	r3, r0, #1
 80007e2:	d102      	bne.n	80007ea <_read_r+0x1e>
 80007e4:	682b      	ldr	r3, [r5, #0]
 80007e6:	b103      	cbz	r3, 80007ea <_read_r+0x1e>
 80007e8:	6023      	str	r3, [r4, #0]
 80007ea:	bd38      	pop	{r3, r4, r5, pc}
 80007ec:	200001bc 	.word	0x200001bc

080007f0 <_write_r>:
 80007f0:	b538      	push	{r3, r4, r5, lr}
 80007f2:	4604      	mov	r4, r0
 80007f4:	4608      	mov	r0, r1
 80007f6:	4611      	mov	r1, r2
 80007f8:	2200      	movs	r2, #0
 80007fa:	4d05      	ldr	r5, [pc, #20]	@ (8000810 <_write_r+0x20>)
 80007fc:	602a      	str	r2, [r5, #0]
 80007fe:	461a      	mov	r2, r3
 8000800:	f7ff fd69 	bl	80002d6 <_write>
 8000804:	1c43      	adds	r3, r0, #1
 8000806:	d102      	bne.n	800080e <_write_r+0x1e>
 8000808:	682b      	ldr	r3, [r5, #0]
 800080a:	b103      	cbz	r3, 800080e <_write_r+0x1e>
 800080c:	6023      	str	r3, [r4, #0]
 800080e:	bd38      	pop	{r3, r4, r5, pc}
 8000810:	200001bc 	.word	0x200001bc

08000814 <__errno>:
 8000814:	4b01      	ldr	r3, [pc, #4]	@ (800081c <__errno+0x8>)
 8000816:	6818      	ldr	r0, [r3, #0]
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	2000000c 	.word	0x2000000c

08000820 <__libc_init_array>:
 8000820:	b570      	push	{r4, r5, r6, lr}
 8000822:	2600      	movs	r6, #0
 8000824:	4d0c      	ldr	r5, [pc, #48]	@ (8000858 <__libc_init_array+0x38>)
 8000826:	4c0d      	ldr	r4, [pc, #52]	@ (800085c <__libc_init_array+0x3c>)
 8000828:	1b64      	subs	r4, r4, r5
 800082a:	10a4      	asrs	r4, r4, #2
 800082c:	42a6      	cmp	r6, r4
 800082e:	d109      	bne.n	8000844 <__libc_init_array+0x24>
 8000830:	f000 fdc2 	bl	80013b8 <_init>
 8000834:	2600      	movs	r6, #0
 8000836:	4d0a      	ldr	r5, [pc, #40]	@ (8000860 <__libc_init_array+0x40>)
 8000838:	4c0a      	ldr	r4, [pc, #40]	@ (8000864 <__libc_init_array+0x44>)
 800083a:	1b64      	subs	r4, r4, r5
 800083c:	10a4      	asrs	r4, r4, #2
 800083e:	42a6      	cmp	r6, r4
 8000840:	d105      	bne.n	800084e <__libc_init_array+0x2e>
 8000842:	bd70      	pop	{r4, r5, r6, pc}
 8000844:	f855 3b04 	ldr.w	r3, [r5], #4
 8000848:	4798      	blx	r3
 800084a:	3601      	adds	r6, #1
 800084c:	e7ee      	b.n	800082c <__libc_init_array+0xc>
 800084e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000852:	4798      	blx	r3
 8000854:	3601      	adds	r6, #1
 8000856:	e7f2      	b.n	800083e <__libc_init_array+0x1e>
 8000858:	08001418 	.word	0x08001418
 800085c:	08001418 	.word	0x08001418
 8000860:	08001418 	.word	0x08001418
 8000864:	0800141c 	.word	0x0800141c

08000868 <__retarget_lock_init_recursive>:
 8000868:	4770      	bx	lr

0800086a <__retarget_lock_acquire_recursive>:
 800086a:	4770      	bx	lr

0800086c <__retarget_lock_release_recursive>:
 800086c:	4770      	bx	lr
	...

08000870 <_free_r>:
 8000870:	b538      	push	{r3, r4, r5, lr}
 8000872:	4605      	mov	r5, r0
 8000874:	2900      	cmp	r1, #0
 8000876:	d040      	beq.n	80008fa <_free_r+0x8a>
 8000878:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800087c:	1f0c      	subs	r4, r1, #4
 800087e:	2b00      	cmp	r3, #0
 8000880:	bfb8      	it	lt
 8000882:	18e4      	addlt	r4, r4, r3
 8000884:	f000 f8de 	bl	8000a44 <__malloc_lock>
 8000888:	4a1c      	ldr	r2, [pc, #112]	@ (80008fc <_free_r+0x8c>)
 800088a:	6813      	ldr	r3, [r2, #0]
 800088c:	b933      	cbnz	r3, 800089c <_free_r+0x2c>
 800088e:	6063      	str	r3, [r4, #4]
 8000890:	6014      	str	r4, [r2, #0]
 8000892:	4628      	mov	r0, r5
 8000894:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000898:	f000 b8da 	b.w	8000a50 <__malloc_unlock>
 800089c:	42a3      	cmp	r3, r4
 800089e:	d908      	bls.n	80008b2 <_free_r+0x42>
 80008a0:	6820      	ldr	r0, [r4, #0]
 80008a2:	1821      	adds	r1, r4, r0
 80008a4:	428b      	cmp	r3, r1
 80008a6:	bf01      	itttt	eq
 80008a8:	6819      	ldreq	r1, [r3, #0]
 80008aa:	685b      	ldreq	r3, [r3, #4]
 80008ac:	1809      	addeq	r1, r1, r0
 80008ae:	6021      	streq	r1, [r4, #0]
 80008b0:	e7ed      	b.n	800088e <_free_r+0x1e>
 80008b2:	461a      	mov	r2, r3
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	b10b      	cbz	r3, 80008bc <_free_r+0x4c>
 80008b8:	42a3      	cmp	r3, r4
 80008ba:	d9fa      	bls.n	80008b2 <_free_r+0x42>
 80008bc:	6811      	ldr	r1, [r2, #0]
 80008be:	1850      	adds	r0, r2, r1
 80008c0:	42a0      	cmp	r0, r4
 80008c2:	d10b      	bne.n	80008dc <_free_r+0x6c>
 80008c4:	6820      	ldr	r0, [r4, #0]
 80008c6:	4401      	add	r1, r0
 80008c8:	1850      	adds	r0, r2, r1
 80008ca:	4283      	cmp	r3, r0
 80008cc:	6011      	str	r1, [r2, #0]
 80008ce:	d1e0      	bne.n	8000892 <_free_r+0x22>
 80008d0:	6818      	ldr	r0, [r3, #0]
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	4408      	add	r0, r1
 80008d6:	6010      	str	r0, [r2, #0]
 80008d8:	6053      	str	r3, [r2, #4]
 80008da:	e7da      	b.n	8000892 <_free_r+0x22>
 80008dc:	d902      	bls.n	80008e4 <_free_r+0x74>
 80008de:	230c      	movs	r3, #12
 80008e0:	602b      	str	r3, [r5, #0]
 80008e2:	e7d6      	b.n	8000892 <_free_r+0x22>
 80008e4:	6820      	ldr	r0, [r4, #0]
 80008e6:	1821      	adds	r1, r4, r0
 80008e8:	428b      	cmp	r3, r1
 80008ea:	bf01      	itttt	eq
 80008ec:	6819      	ldreq	r1, [r3, #0]
 80008ee:	685b      	ldreq	r3, [r3, #4]
 80008f0:	1809      	addeq	r1, r1, r0
 80008f2:	6021      	streq	r1, [r4, #0]
 80008f4:	6063      	str	r3, [r4, #4]
 80008f6:	6054      	str	r4, [r2, #4]
 80008f8:	e7cb      	b.n	8000892 <_free_r+0x22>
 80008fa:	bd38      	pop	{r3, r4, r5, pc}
 80008fc:	200001c8 	.word	0x200001c8

08000900 <sbrk_aligned>:
 8000900:	b570      	push	{r4, r5, r6, lr}
 8000902:	4e0f      	ldr	r6, [pc, #60]	@ (8000940 <sbrk_aligned+0x40>)
 8000904:	460c      	mov	r4, r1
 8000906:	6831      	ldr	r1, [r6, #0]
 8000908:	4605      	mov	r5, r0
 800090a:	b911      	cbnz	r1, 8000912 <sbrk_aligned+0x12>
 800090c:	f000 fcb2 	bl	8001274 <_sbrk_r>
 8000910:	6030      	str	r0, [r6, #0]
 8000912:	4621      	mov	r1, r4
 8000914:	4628      	mov	r0, r5
 8000916:	f000 fcad 	bl	8001274 <_sbrk_r>
 800091a:	1c43      	adds	r3, r0, #1
 800091c:	d103      	bne.n	8000926 <sbrk_aligned+0x26>
 800091e:	f04f 34ff 	mov.w	r4, #4294967295
 8000922:	4620      	mov	r0, r4
 8000924:	bd70      	pop	{r4, r5, r6, pc}
 8000926:	1cc4      	adds	r4, r0, #3
 8000928:	f024 0403 	bic.w	r4, r4, #3
 800092c:	42a0      	cmp	r0, r4
 800092e:	d0f8      	beq.n	8000922 <sbrk_aligned+0x22>
 8000930:	1a21      	subs	r1, r4, r0
 8000932:	4628      	mov	r0, r5
 8000934:	f000 fc9e 	bl	8001274 <_sbrk_r>
 8000938:	3001      	adds	r0, #1
 800093a:	d1f2      	bne.n	8000922 <sbrk_aligned+0x22>
 800093c:	e7ef      	b.n	800091e <sbrk_aligned+0x1e>
 800093e:	bf00      	nop
 8000940:	200001c4 	.word	0x200001c4

08000944 <_malloc_r>:
 8000944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000948:	1ccd      	adds	r5, r1, #3
 800094a:	f025 0503 	bic.w	r5, r5, #3
 800094e:	3508      	adds	r5, #8
 8000950:	2d0c      	cmp	r5, #12
 8000952:	bf38      	it	cc
 8000954:	250c      	movcc	r5, #12
 8000956:	2d00      	cmp	r5, #0
 8000958:	4606      	mov	r6, r0
 800095a:	db01      	blt.n	8000960 <_malloc_r+0x1c>
 800095c:	42a9      	cmp	r1, r5
 800095e:	d904      	bls.n	800096a <_malloc_r+0x26>
 8000960:	230c      	movs	r3, #12
 8000962:	6033      	str	r3, [r6, #0]
 8000964:	2000      	movs	r0, #0
 8000966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800096a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000a40 <_malloc_r+0xfc>
 800096e:	f000 f869 	bl	8000a44 <__malloc_lock>
 8000972:	f8d8 3000 	ldr.w	r3, [r8]
 8000976:	461c      	mov	r4, r3
 8000978:	bb44      	cbnz	r4, 80009cc <_malloc_r+0x88>
 800097a:	4629      	mov	r1, r5
 800097c:	4630      	mov	r0, r6
 800097e:	f7ff ffbf 	bl	8000900 <sbrk_aligned>
 8000982:	1c43      	adds	r3, r0, #1
 8000984:	4604      	mov	r4, r0
 8000986:	d158      	bne.n	8000a3a <_malloc_r+0xf6>
 8000988:	f8d8 4000 	ldr.w	r4, [r8]
 800098c:	4627      	mov	r7, r4
 800098e:	2f00      	cmp	r7, #0
 8000990:	d143      	bne.n	8000a1a <_malloc_r+0xd6>
 8000992:	2c00      	cmp	r4, #0
 8000994:	d04b      	beq.n	8000a2e <_malloc_r+0xea>
 8000996:	6823      	ldr	r3, [r4, #0]
 8000998:	4639      	mov	r1, r7
 800099a:	4630      	mov	r0, r6
 800099c:	eb04 0903 	add.w	r9, r4, r3
 80009a0:	f000 fc68 	bl	8001274 <_sbrk_r>
 80009a4:	4581      	cmp	r9, r0
 80009a6:	d142      	bne.n	8000a2e <_malloc_r+0xea>
 80009a8:	6821      	ldr	r1, [r4, #0]
 80009aa:	4630      	mov	r0, r6
 80009ac:	1a6d      	subs	r5, r5, r1
 80009ae:	4629      	mov	r1, r5
 80009b0:	f7ff ffa6 	bl	8000900 <sbrk_aligned>
 80009b4:	3001      	adds	r0, #1
 80009b6:	d03a      	beq.n	8000a2e <_malloc_r+0xea>
 80009b8:	6823      	ldr	r3, [r4, #0]
 80009ba:	442b      	add	r3, r5
 80009bc:	6023      	str	r3, [r4, #0]
 80009be:	f8d8 3000 	ldr.w	r3, [r8]
 80009c2:	685a      	ldr	r2, [r3, #4]
 80009c4:	bb62      	cbnz	r2, 8000a20 <_malloc_r+0xdc>
 80009c6:	f8c8 7000 	str.w	r7, [r8]
 80009ca:	e00f      	b.n	80009ec <_malloc_r+0xa8>
 80009cc:	6822      	ldr	r2, [r4, #0]
 80009ce:	1b52      	subs	r2, r2, r5
 80009d0:	d420      	bmi.n	8000a14 <_malloc_r+0xd0>
 80009d2:	2a0b      	cmp	r2, #11
 80009d4:	d917      	bls.n	8000a06 <_malloc_r+0xc2>
 80009d6:	1961      	adds	r1, r4, r5
 80009d8:	42a3      	cmp	r3, r4
 80009da:	6025      	str	r5, [r4, #0]
 80009dc:	bf18      	it	ne
 80009de:	6059      	strne	r1, [r3, #4]
 80009e0:	6863      	ldr	r3, [r4, #4]
 80009e2:	bf08      	it	eq
 80009e4:	f8c8 1000 	streq.w	r1, [r8]
 80009e8:	5162      	str	r2, [r4, r5]
 80009ea:	604b      	str	r3, [r1, #4]
 80009ec:	4630      	mov	r0, r6
 80009ee:	f000 f82f 	bl	8000a50 <__malloc_unlock>
 80009f2:	f104 000b 	add.w	r0, r4, #11
 80009f6:	1d23      	adds	r3, r4, #4
 80009f8:	f020 0007 	bic.w	r0, r0, #7
 80009fc:	1ac2      	subs	r2, r0, r3
 80009fe:	bf1c      	itt	ne
 8000a00:	1a1b      	subne	r3, r3, r0
 8000a02:	50a3      	strne	r3, [r4, r2]
 8000a04:	e7af      	b.n	8000966 <_malloc_r+0x22>
 8000a06:	6862      	ldr	r2, [r4, #4]
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	bf0c      	ite	eq
 8000a0c:	f8c8 2000 	streq.w	r2, [r8]
 8000a10:	605a      	strne	r2, [r3, #4]
 8000a12:	e7eb      	b.n	80009ec <_malloc_r+0xa8>
 8000a14:	4623      	mov	r3, r4
 8000a16:	6864      	ldr	r4, [r4, #4]
 8000a18:	e7ae      	b.n	8000978 <_malloc_r+0x34>
 8000a1a:	463c      	mov	r4, r7
 8000a1c:	687f      	ldr	r7, [r7, #4]
 8000a1e:	e7b6      	b.n	800098e <_malloc_r+0x4a>
 8000a20:	461a      	mov	r2, r3
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	42a3      	cmp	r3, r4
 8000a26:	d1fb      	bne.n	8000a20 <_malloc_r+0xdc>
 8000a28:	2300      	movs	r3, #0
 8000a2a:	6053      	str	r3, [r2, #4]
 8000a2c:	e7de      	b.n	80009ec <_malloc_r+0xa8>
 8000a2e:	230c      	movs	r3, #12
 8000a30:	4630      	mov	r0, r6
 8000a32:	6033      	str	r3, [r6, #0]
 8000a34:	f000 f80c 	bl	8000a50 <__malloc_unlock>
 8000a38:	e794      	b.n	8000964 <_malloc_r+0x20>
 8000a3a:	6005      	str	r5, [r0, #0]
 8000a3c:	e7d6      	b.n	80009ec <_malloc_r+0xa8>
 8000a3e:	bf00      	nop
 8000a40:	200001c8 	.word	0x200001c8

08000a44 <__malloc_lock>:
 8000a44:	4801      	ldr	r0, [pc, #4]	@ (8000a4c <__malloc_lock+0x8>)
 8000a46:	f7ff bf10 	b.w	800086a <__retarget_lock_acquire_recursive>
 8000a4a:	bf00      	nop
 8000a4c:	200001c0 	.word	0x200001c0

08000a50 <__malloc_unlock>:
 8000a50:	4801      	ldr	r0, [pc, #4]	@ (8000a58 <__malloc_unlock+0x8>)
 8000a52:	f7ff bf0b 	b.w	800086c <__retarget_lock_release_recursive>
 8000a56:	bf00      	nop
 8000a58:	200001c0 	.word	0x200001c0

08000a5c <__sfputc_r>:
 8000a5c:	6893      	ldr	r3, [r2, #8]
 8000a5e:	b410      	push	{r4}
 8000a60:	3b01      	subs	r3, #1
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	6093      	str	r3, [r2, #8]
 8000a66:	da07      	bge.n	8000a78 <__sfputc_r+0x1c>
 8000a68:	6994      	ldr	r4, [r2, #24]
 8000a6a:	42a3      	cmp	r3, r4
 8000a6c:	db01      	blt.n	8000a72 <__sfputc_r+0x16>
 8000a6e:	290a      	cmp	r1, #10
 8000a70:	d102      	bne.n	8000a78 <__sfputc_r+0x1c>
 8000a72:	bc10      	pop	{r4}
 8000a74:	f000 bb6a 	b.w	800114c <__swbuf_r>
 8000a78:	6813      	ldr	r3, [r2, #0]
 8000a7a:	1c58      	adds	r0, r3, #1
 8000a7c:	6010      	str	r0, [r2, #0]
 8000a7e:	7019      	strb	r1, [r3, #0]
 8000a80:	4608      	mov	r0, r1
 8000a82:	bc10      	pop	{r4}
 8000a84:	4770      	bx	lr

08000a86 <__sfputs_r>:
 8000a86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a88:	4606      	mov	r6, r0
 8000a8a:	460f      	mov	r7, r1
 8000a8c:	4614      	mov	r4, r2
 8000a8e:	18d5      	adds	r5, r2, r3
 8000a90:	42ac      	cmp	r4, r5
 8000a92:	d101      	bne.n	8000a98 <__sfputs_r+0x12>
 8000a94:	2000      	movs	r0, #0
 8000a96:	e007      	b.n	8000aa8 <__sfputs_r+0x22>
 8000a98:	463a      	mov	r2, r7
 8000a9a:	4630      	mov	r0, r6
 8000a9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000aa0:	f7ff ffdc 	bl	8000a5c <__sfputc_r>
 8000aa4:	1c43      	adds	r3, r0, #1
 8000aa6:	d1f3      	bne.n	8000a90 <__sfputs_r+0xa>
 8000aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000aac <_vfiprintf_r>:
 8000aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ab0:	460d      	mov	r5, r1
 8000ab2:	4614      	mov	r4, r2
 8000ab4:	4698      	mov	r8, r3
 8000ab6:	4606      	mov	r6, r0
 8000ab8:	b09d      	sub	sp, #116	@ 0x74
 8000aba:	b118      	cbz	r0, 8000ac4 <_vfiprintf_r+0x18>
 8000abc:	6a03      	ldr	r3, [r0, #32]
 8000abe:	b90b      	cbnz	r3, 8000ac4 <_vfiprintf_r+0x18>
 8000ac0:	f7ff fdce 	bl	8000660 <__sinit>
 8000ac4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000ac6:	07d9      	lsls	r1, r3, #31
 8000ac8:	d405      	bmi.n	8000ad6 <_vfiprintf_r+0x2a>
 8000aca:	89ab      	ldrh	r3, [r5, #12]
 8000acc:	059a      	lsls	r2, r3, #22
 8000ace:	d402      	bmi.n	8000ad6 <_vfiprintf_r+0x2a>
 8000ad0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000ad2:	f7ff feca 	bl	800086a <__retarget_lock_acquire_recursive>
 8000ad6:	89ab      	ldrh	r3, [r5, #12]
 8000ad8:	071b      	lsls	r3, r3, #28
 8000ada:	d501      	bpl.n	8000ae0 <_vfiprintf_r+0x34>
 8000adc:	692b      	ldr	r3, [r5, #16]
 8000ade:	b99b      	cbnz	r3, 8000b08 <_vfiprintf_r+0x5c>
 8000ae0:	4629      	mov	r1, r5
 8000ae2:	4630      	mov	r0, r6
 8000ae4:	f000 fb70 	bl	80011c8 <__swsetup_r>
 8000ae8:	b170      	cbz	r0, 8000b08 <_vfiprintf_r+0x5c>
 8000aea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000aec:	07dc      	lsls	r4, r3, #31
 8000aee:	d504      	bpl.n	8000afa <_vfiprintf_r+0x4e>
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	b01d      	add	sp, #116	@ 0x74
 8000af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000afa:	89ab      	ldrh	r3, [r5, #12]
 8000afc:	0598      	lsls	r0, r3, #22
 8000afe:	d4f7      	bmi.n	8000af0 <_vfiprintf_r+0x44>
 8000b00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000b02:	f7ff feb3 	bl	800086c <__retarget_lock_release_recursive>
 8000b06:	e7f3      	b.n	8000af0 <_vfiprintf_r+0x44>
 8000b08:	2300      	movs	r3, #0
 8000b0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8000b0c:	2320      	movs	r3, #32
 8000b0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000b12:	2330      	movs	r3, #48	@ 0x30
 8000b14:	f04f 0901 	mov.w	r9, #1
 8000b18:	f8cd 800c 	str.w	r8, [sp, #12]
 8000b1c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8000cc8 <_vfiprintf_r+0x21c>
 8000b20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000b24:	4623      	mov	r3, r4
 8000b26:	469a      	mov	sl, r3
 8000b28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b2c:	b10a      	cbz	r2, 8000b32 <_vfiprintf_r+0x86>
 8000b2e:	2a25      	cmp	r2, #37	@ 0x25
 8000b30:	d1f9      	bne.n	8000b26 <_vfiprintf_r+0x7a>
 8000b32:	ebba 0b04 	subs.w	fp, sl, r4
 8000b36:	d00b      	beq.n	8000b50 <_vfiprintf_r+0xa4>
 8000b38:	465b      	mov	r3, fp
 8000b3a:	4622      	mov	r2, r4
 8000b3c:	4629      	mov	r1, r5
 8000b3e:	4630      	mov	r0, r6
 8000b40:	f7ff ffa1 	bl	8000a86 <__sfputs_r>
 8000b44:	3001      	adds	r0, #1
 8000b46:	f000 80a7 	beq.w	8000c98 <_vfiprintf_r+0x1ec>
 8000b4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000b4c:	445a      	add	r2, fp
 8000b4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8000b50:	f89a 3000 	ldrb.w	r3, [sl]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	f000 809f 	beq.w	8000c98 <_vfiprintf_r+0x1ec>
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000b64:	f10a 0a01 	add.w	sl, sl, #1
 8000b68:	9304      	str	r3, [sp, #16]
 8000b6a:	9307      	str	r3, [sp, #28]
 8000b6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000b70:	931a      	str	r3, [sp, #104]	@ 0x68
 8000b72:	4654      	mov	r4, sl
 8000b74:	2205      	movs	r2, #5
 8000b76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b7a:	4853      	ldr	r0, [pc, #332]	@ (8000cc8 <_vfiprintf_r+0x21c>)
 8000b7c:	f000 fb8a 	bl	8001294 <memchr>
 8000b80:	9a04      	ldr	r2, [sp, #16]
 8000b82:	b9d8      	cbnz	r0, 8000bbc <_vfiprintf_r+0x110>
 8000b84:	06d1      	lsls	r1, r2, #27
 8000b86:	bf44      	itt	mi
 8000b88:	2320      	movmi	r3, #32
 8000b8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000b8e:	0713      	lsls	r3, r2, #28
 8000b90:	bf44      	itt	mi
 8000b92:	232b      	movmi	r3, #43	@ 0x2b
 8000b94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000b98:	f89a 3000 	ldrb.w	r3, [sl]
 8000b9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b9e:	d015      	beq.n	8000bcc <_vfiprintf_r+0x120>
 8000ba0:	4654      	mov	r4, sl
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f04f 0c0a 	mov.w	ip, #10
 8000ba8:	9a07      	ldr	r2, [sp, #28]
 8000baa:	4621      	mov	r1, r4
 8000bac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000bb0:	3b30      	subs	r3, #48	@ 0x30
 8000bb2:	2b09      	cmp	r3, #9
 8000bb4:	d94b      	bls.n	8000c4e <_vfiprintf_r+0x1a2>
 8000bb6:	b1b0      	cbz	r0, 8000be6 <_vfiprintf_r+0x13a>
 8000bb8:	9207      	str	r2, [sp, #28]
 8000bba:	e014      	b.n	8000be6 <_vfiprintf_r+0x13a>
 8000bbc:	eba0 0308 	sub.w	r3, r0, r8
 8000bc0:	fa09 f303 	lsl.w	r3, r9, r3
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	46a2      	mov	sl, r4
 8000bc8:	9304      	str	r3, [sp, #16]
 8000bca:	e7d2      	b.n	8000b72 <_vfiprintf_r+0xc6>
 8000bcc:	9b03      	ldr	r3, [sp, #12]
 8000bce:	1d19      	adds	r1, r3, #4
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	9103      	str	r1, [sp, #12]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	bfbb      	ittet	lt
 8000bd8:	425b      	neglt	r3, r3
 8000bda:	f042 0202 	orrlt.w	r2, r2, #2
 8000bde:	9307      	strge	r3, [sp, #28]
 8000be0:	9307      	strlt	r3, [sp, #28]
 8000be2:	bfb8      	it	lt
 8000be4:	9204      	strlt	r2, [sp, #16]
 8000be6:	7823      	ldrb	r3, [r4, #0]
 8000be8:	2b2e      	cmp	r3, #46	@ 0x2e
 8000bea:	d10a      	bne.n	8000c02 <_vfiprintf_r+0x156>
 8000bec:	7863      	ldrb	r3, [r4, #1]
 8000bee:	2b2a      	cmp	r3, #42	@ 0x2a
 8000bf0:	d132      	bne.n	8000c58 <_vfiprintf_r+0x1ac>
 8000bf2:	9b03      	ldr	r3, [sp, #12]
 8000bf4:	3402      	adds	r4, #2
 8000bf6:	1d1a      	adds	r2, r3, #4
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	9203      	str	r2, [sp, #12]
 8000bfc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000c00:	9305      	str	r3, [sp, #20]
 8000c02:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8000ccc <_vfiprintf_r+0x220>
 8000c06:	2203      	movs	r2, #3
 8000c08:	4650      	mov	r0, sl
 8000c0a:	7821      	ldrb	r1, [r4, #0]
 8000c0c:	f000 fb42 	bl	8001294 <memchr>
 8000c10:	b138      	cbz	r0, 8000c22 <_vfiprintf_r+0x176>
 8000c12:	2240      	movs	r2, #64	@ 0x40
 8000c14:	9b04      	ldr	r3, [sp, #16]
 8000c16:	eba0 000a 	sub.w	r0, r0, sl
 8000c1a:	4082      	lsls	r2, r0
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	3401      	adds	r4, #1
 8000c20:	9304      	str	r3, [sp, #16]
 8000c22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c26:	2206      	movs	r2, #6
 8000c28:	4829      	ldr	r0, [pc, #164]	@ (8000cd0 <_vfiprintf_r+0x224>)
 8000c2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000c2e:	f000 fb31 	bl	8001294 <memchr>
 8000c32:	2800      	cmp	r0, #0
 8000c34:	d03f      	beq.n	8000cb6 <_vfiprintf_r+0x20a>
 8000c36:	4b27      	ldr	r3, [pc, #156]	@ (8000cd4 <_vfiprintf_r+0x228>)
 8000c38:	bb1b      	cbnz	r3, 8000c82 <_vfiprintf_r+0x1d6>
 8000c3a:	9b03      	ldr	r3, [sp, #12]
 8000c3c:	3307      	adds	r3, #7
 8000c3e:	f023 0307 	bic.w	r3, r3, #7
 8000c42:	3308      	adds	r3, #8
 8000c44:	9303      	str	r3, [sp, #12]
 8000c46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000c48:	443b      	add	r3, r7
 8000c4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8000c4c:	e76a      	b.n	8000b24 <_vfiprintf_r+0x78>
 8000c4e:	460c      	mov	r4, r1
 8000c50:	2001      	movs	r0, #1
 8000c52:	fb0c 3202 	mla	r2, ip, r2, r3
 8000c56:	e7a8      	b.n	8000baa <_vfiprintf_r+0xfe>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	f04f 0c0a 	mov.w	ip, #10
 8000c5e:	4619      	mov	r1, r3
 8000c60:	3401      	adds	r4, #1
 8000c62:	9305      	str	r3, [sp, #20]
 8000c64:	4620      	mov	r0, r4
 8000c66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000c6a:	3a30      	subs	r2, #48	@ 0x30
 8000c6c:	2a09      	cmp	r2, #9
 8000c6e:	d903      	bls.n	8000c78 <_vfiprintf_r+0x1cc>
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d0c6      	beq.n	8000c02 <_vfiprintf_r+0x156>
 8000c74:	9105      	str	r1, [sp, #20]
 8000c76:	e7c4      	b.n	8000c02 <_vfiprintf_r+0x156>
 8000c78:	4604      	mov	r4, r0
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8000c80:	e7f0      	b.n	8000c64 <_vfiprintf_r+0x1b8>
 8000c82:	ab03      	add	r3, sp, #12
 8000c84:	9300      	str	r3, [sp, #0]
 8000c86:	462a      	mov	r2, r5
 8000c88:	4630      	mov	r0, r6
 8000c8a:	4b13      	ldr	r3, [pc, #76]	@ (8000cd8 <_vfiprintf_r+0x22c>)
 8000c8c:	a904      	add	r1, sp, #16
 8000c8e:	f3af 8000 	nop.w
 8000c92:	4607      	mov	r7, r0
 8000c94:	1c78      	adds	r0, r7, #1
 8000c96:	d1d6      	bne.n	8000c46 <_vfiprintf_r+0x19a>
 8000c98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000c9a:	07d9      	lsls	r1, r3, #31
 8000c9c:	d405      	bmi.n	8000caa <_vfiprintf_r+0x1fe>
 8000c9e:	89ab      	ldrh	r3, [r5, #12]
 8000ca0:	059a      	lsls	r2, r3, #22
 8000ca2:	d402      	bmi.n	8000caa <_vfiprintf_r+0x1fe>
 8000ca4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000ca6:	f7ff fde1 	bl	800086c <__retarget_lock_release_recursive>
 8000caa:	89ab      	ldrh	r3, [r5, #12]
 8000cac:	065b      	lsls	r3, r3, #25
 8000cae:	f53f af1f 	bmi.w	8000af0 <_vfiprintf_r+0x44>
 8000cb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000cb4:	e71e      	b.n	8000af4 <_vfiprintf_r+0x48>
 8000cb6:	ab03      	add	r3, sp, #12
 8000cb8:	9300      	str	r3, [sp, #0]
 8000cba:	462a      	mov	r2, r5
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <_vfiprintf_r+0x22c>)
 8000cc0:	a904      	add	r1, sp, #16
 8000cc2:	f000 f87d 	bl	8000dc0 <_printf_i>
 8000cc6:	e7e4      	b.n	8000c92 <_vfiprintf_r+0x1e6>
 8000cc8:	080013e4 	.word	0x080013e4
 8000ccc:	080013ea 	.word	0x080013ea
 8000cd0:	080013ee 	.word	0x080013ee
 8000cd4:	00000000 	.word	0x00000000
 8000cd8:	08000a87 	.word	0x08000a87

08000cdc <_printf_common>:
 8000cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce0:	4616      	mov	r6, r2
 8000ce2:	4698      	mov	r8, r3
 8000ce4:	688a      	ldr	r2, [r1, #8]
 8000ce6:	690b      	ldr	r3, [r1, #16]
 8000ce8:	4607      	mov	r7, r0
 8000cea:	4293      	cmp	r3, r2
 8000cec:	bfb8      	it	lt
 8000cee:	4613      	movlt	r3, r2
 8000cf0:	6033      	str	r3, [r6, #0]
 8000cf2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000cf6:	460c      	mov	r4, r1
 8000cf8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000cfc:	b10a      	cbz	r2, 8000d02 <_printf_common+0x26>
 8000cfe:	3301      	adds	r3, #1
 8000d00:	6033      	str	r3, [r6, #0]
 8000d02:	6823      	ldr	r3, [r4, #0]
 8000d04:	0699      	lsls	r1, r3, #26
 8000d06:	bf42      	ittt	mi
 8000d08:	6833      	ldrmi	r3, [r6, #0]
 8000d0a:	3302      	addmi	r3, #2
 8000d0c:	6033      	strmi	r3, [r6, #0]
 8000d0e:	6825      	ldr	r5, [r4, #0]
 8000d10:	f015 0506 	ands.w	r5, r5, #6
 8000d14:	d106      	bne.n	8000d24 <_printf_common+0x48>
 8000d16:	f104 0a19 	add.w	sl, r4, #25
 8000d1a:	68e3      	ldr	r3, [r4, #12]
 8000d1c:	6832      	ldr	r2, [r6, #0]
 8000d1e:	1a9b      	subs	r3, r3, r2
 8000d20:	42ab      	cmp	r3, r5
 8000d22:	dc2b      	bgt.n	8000d7c <_printf_common+0xa0>
 8000d24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000d28:	6822      	ldr	r2, [r4, #0]
 8000d2a:	3b00      	subs	r3, #0
 8000d2c:	bf18      	it	ne
 8000d2e:	2301      	movne	r3, #1
 8000d30:	0692      	lsls	r2, r2, #26
 8000d32:	d430      	bmi.n	8000d96 <_printf_common+0xba>
 8000d34:	4641      	mov	r1, r8
 8000d36:	4638      	mov	r0, r7
 8000d38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000d3c:	47c8      	blx	r9
 8000d3e:	3001      	adds	r0, #1
 8000d40:	d023      	beq.n	8000d8a <_printf_common+0xae>
 8000d42:	6823      	ldr	r3, [r4, #0]
 8000d44:	6922      	ldr	r2, [r4, #16]
 8000d46:	f003 0306 	and.w	r3, r3, #6
 8000d4a:	2b04      	cmp	r3, #4
 8000d4c:	bf14      	ite	ne
 8000d4e:	2500      	movne	r5, #0
 8000d50:	6833      	ldreq	r3, [r6, #0]
 8000d52:	f04f 0600 	mov.w	r6, #0
 8000d56:	bf08      	it	eq
 8000d58:	68e5      	ldreq	r5, [r4, #12]
 8000d5a:	f104 041a 	add.w	r4, r4, #26
 8000d5e:	bf08      	it	eq
 8000d60:	1aed      	subeq	r5, r5, r3
 8000d62:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8000d66:	bf08      	it	eq
 8000d68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	bfc4      	itt	gt
 8000d70:	1a9b      	subgt	r3, r3, r2
 8000d72:	18ed      	addgt	r5, r5, r3
 8000d74:	42b5      	cmp	r5, r6
 8000d76:	d11a      	bne.n	8000dae <_printf_common+0xd2>
 8000d78:	2000      	movs	r0, #0
 8000d7a:	e008      	b.n	8000d8e <_printf_common+0xb2>
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	4652      	mov	r2, sl
 8000d80:	4641      	mov	r1, r8
 8000d82:	4638      	mov	r0, r7
 8000d84:	47c8      	blx	r9
 8000d86:	3001      	adds	r0, #1
 8000d88:	d103      	bne.n	8000d92 <_printf_common+0xb6>
 8000d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	3501      	adds	r5, #1
 8000d94:	e7c1      	b.n	8000d1a <_printf_common+0x3e>
 8000d96:	2030      	movs	r0, #48	@ 0x30
 8000d98:	18e1      	adds	r1, r4, r3
 8000d9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000d9e:	1c5a      	adds	r2, r3, #1
 8000da0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000da4:	4422      	add	r2, r4
 8000da6:	3302      	adds	r3, #2
 8000da8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000dac:	e7c2      	b.n	8000d34 <_printf_common+0x58>
 8000dae:	2301      	movs	r3, #1
 8000db0:	4622      	mov	r2, r4
 8000db2:	4641      	mov	r1, r8
 8000db4:	4638      	mov	r0, r7
 8000db6:	47c8      	blx	r9
 8000db8:	3001      	adds	r0, #1
 8000dba:	d0e6      	beq.n	8000d8a <_printf_common+0xae>
 8000dbc:	3601      	adds	r6, #1
 8000dbe:	e7d9      	b.n	8000d74 <_printf_common+0x98>

08000dc0 <_printf_i>:
 8000dc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc4:	7e0f      	ldrb	r7, [r1, #24]
 8000dc6:	4691      	mov	r9, r2
 8000dc8:	2f78      	cmp	r7, #120	@ 0x78
 8000dca:	4680      	mov	r8, r0
 8000dcc:	460c      	mov	r4, r1
 8000dce:	469a      	mov	sl, r3
 8000dd0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000dd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000dd6:	d807      	bhi.n	8000de8 <_printf_i+0x28>
 8000dd8:	2f62      	cmp	r7, #98	@ 0x62
 8000dda:	d80a      	bhi.n	8000df2 <_printf_i+0x32>
 8000ddc:	2f00      	cmp	r7, #0
 8000dde:	f000 80d1 	beq.w	8000f84 <_printf_i+0x1c4>
 8000de2:	2f58      	cmp	r7, #88	@ 0x58
 8000de4:	f000 80b8 	beq.w	8000f58 <_printf_i+0x198>
 8000de8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000dec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000df0:	e03a      	b.n	8000e68 <_printf_i+0xa8>
 8000df2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000df6:	2b15      	cmp	r3, #21
 8000df8:	d8f6      	bhi.n	8000de8 <_printf_i+0x28>
 8000dfa:	a101      	add	r1, pc, #4	@ (adr r1, 8000e00 <_printf_i+0x40>)
 8000dfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000e00:	08000e59 	.word	0x08000e59
 8000e04:	08000e6d 	.word	0x08000e6d
 8000e08:	08000de9 	.word	0x08000de9
 8000e0c:	08000de9 	.word	0x08000de9
 8000e10:	08000de9 	.word	0x08000de9
 8000e14:	08000de9 	.word	0x08000de9
 8000e18:	08000e6d 	.word	0x08000e6d
 8000e1c:	08000de9 	.word	0x08000de9
 8000e20:	08000de9 	.word	0x08000de9
 8000e24:	08000de9 	.word	0x08000de9
 8000e28:	08000de9 	.word	0x08000de9
 8000e2c:	08000f6b 	.word	0x08000f6b
 8000e30:	08000e97 	.word	0x08000e97
 8000e34:	08000f25 	.word	0x08000f25
 8000e38:	08000de9 	.word	0x08000de9
 8000e3c:	08000de9 	.word	0x08000de9
 8000e40:	08000f8d 	.word	0x08000f8d
 8000e44:	08000de9 	.word	0x08000de9
 8000e48:	08000e97 	.word	0x08000e97
 8000e4c:	08000de9 	.word	0x08000de9
 8000e50:	08000de9 	.word	0x08000de9
 8000e54:	08000f2d 	.word	0x08000f2d
 8000e58:	6833      	ldr	r3, [r6, #0]
 8000e5a:	1d1a      	adds	r2, r3, #4
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	6032      	str	r2, [r6, #0]
 8000e60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000e64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000e68:	2301      	movs	r3, #1
 8000e6a:	e09c      	b.n	8000fa6 <_printf_i+0x1e6>
 8000e6c:	6833      	ldr	r3, [r6, #0]
 8000e6e:	6820      	ldr	r0, [r4, #0]
 8000e70:	1d19      	adds	r1, r3, #4
 8000e72:	6031      	str	r1, [r6, #0]
 8000e74:	0606      	lsls	r6, r0, #24
 8000e76:	d501      	bpl.n	8000e7c <_printf_i+0xbc>
 8000e78:	681d      	ldr	r5, [r3, #0]
 8000e7a:	e003      	b.n	8000e84 <_printf_i+0xc4>
 8000e7c:	0645      	lsls	r5, r0, #25
 8000e7e:	d5fb      	bpl.n	8000e78 <_printf_i+0xb8>
 8000e80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000e84:	2d00      	cmp	r5, #0
 8000e86:	da03      	bge.n	8000e90 <_printf_i+0xd0>
 8000e88:	232d      	movs	r3, #45	@ 0x2d
 8000e8a:	426d      	negs	r5, r5
 8000e8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000e90:	230a      	movs	r3, #10
 8000e92:	4858      	ldr	r0, [pc, #352]	@ (8000ff4 <_printf_i+0x234>)
 8000e94:	e011      	b.n	8000eba <_printf_i+0xfa>
 8000e96:	6821      	ldr	r1, [r4, #0]
 8000e98:	6833      	ldr	r3, [r6, #0]
 8000e9a:	0608      	lsls	r0, r1, #24
 8000e9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8000ea0:	d402      	bmi.n	8000ea8 <_printf_i+0xe8>
 8000ea2:	0649      	lsls	r1, r1, #25
 8000ea4:	bf48      	it	mi
 8000ea6:	b2ad      	uxthmi	r5, r5
 8000ea8:	2f6f      	cmp	r7, #111	@ 0x6f
 8000eaa:	6033      	str	r3, [r6, #0]
 8000eac:	bf14      	ite	ne
 8000eae:	230a      	movne	r3, #10
 8000eb0:	2308      	moveq	r3, #8
 8000eb2:	4850      	ldr	r0, [pc, #320]	@ (8000ff4 <_printf_i+0x234>)
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000eba:	6866      	ldr	r6, [r4, #4]
 8000ebc:	2e00      	cmp	r6, #0
 8000ebe:	60a6      	str	r6, [r4, #8]
 8000ec0:	db05      	blt.n	8000ece <_printf_i+0x10e>
 8000ec2:	6821      	ldr	r1, [r4, #0]
 8000ec4:	432e      	orrs	r6, r5
 8000ec6:	f021 0104 	bic.w	r1, r1, #4
 8000eca:	6021      	str	r1, [r4, #0]
 8000ecc:	d04b      	beq.n	8000f66 <_printf_i+0x1a6>
 8000ece:	4616      	mov	r6, r2
 8000ed0:	fbb5 f1f3 	udiv	r1, r5, r3
 8000ed4:	fb03 5711 	mls	r7, r3, r1, r5
 8000ed8:	5dc7      	ldrb	r7, [r0, r7]
 8000eda:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000ede:	462f      	mov	r7, r5
 8000ee0:	42bb      	cmp	r3, r7
 8000ee2:	460d      	mov	r5, r1
 8000ee4:	d9f4      	bls.n	8000ed0 <_printf_i+0x110>
 8000ee6:	2b08      	cmp	r3, #8
 8000ee8:	d10b      	bne.n	8000f02 <_printf_i+0x142>
 8000eea:	6823      	ldr	r3, [r4, #0]
 8000eec:	07df      	lsls	r7, r3, #31
 8000eee:	d508      	bpl.n	8000f02 <_printf_i+0x142>
 8000ef0:	6923      	ldr	r3, [r4, #16]
 8000ef2:	6861      	ldr	r1, [r4, #4]
 8000ef4:	4299      	cmp	r1, r3
 8000ef6:	bfde      	ittt	le
 8000ef8:	2330      	movle	r3, #48	@ 0x30
 8000efa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000efe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000f02:	1b92      	subs	r2, r2, r6
 8000f04:	6122      	str	r2, [r4, #16]
 8000f06:	464b      	mov	r3, r9
 8000f08:	4621      	mov	r1, r4
 8000f0a:	4640      	mov	r0, r8
 8000f0c:	f8cd a000 	str.w	sl, [sp]
 8000f10:	aa03      	add	r2, sp, #12
 8000f12:	f7ff fee3 	bl	8000cdc <_printf_common>
 8000f16:	3001      	adds	r0, #1
 8000f18:	d14a      	bne.n	8000fb0 <_printf_i+0x1f0>
 8000f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1e:	b004      	add	sp, #16
 8000f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f24:	6823      	ldr	r3, [r4, #0]
 8000f26:	f043 0320 	orr.w	r3, r3, #32
 8000f2a:	6023      	str	r3, [r4, #0]
 8000f2c:	2778      	movs	r7, #120	@ 0x78
 8000f2e:	4832      	ldr	r0, [pc, #200]	@ (8000ff8 <_printf_i+0x238>)
 8000f30:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000f34:	6823      	ldr	r3, [r4, #0]
 8000f36:	6831      	ldr	r1, [r6, #0]
 8000f38:	061f      	lsls	r7, r3, #24
 8000f3a:	f851 5b04 	ldr.w	r5, [r1], #4
 8000f3e:	d402      	bmi.n	8000f46 <_printf_i+0x186>
 8000f40:	065f      	lsls	r7, r3, #25
 8000f42:	bf48      	it	mi
 8000f44:	b2ad      	uxthmi	r5, r5
 8000f46:	6031      	str	r1, [r6, #0]
 8000f48:	07d9      	lsls	r1, r3, #31
 8000f4a:	bf44      	itt	mi
 8000f4c:	f043 0320 	orrmi.w	r3, r3, #32
 8000f50:	6023      	strmi	r3, [r4, #0]
 8000f52:	b11d      	cbz	r5, 8000f5c <_printf_i+0x19c>
 8000f54:	2310      	movs	r3, #16
 8000f56:	e7ad      	b.n	8000eb4 <_printf_i+0xf4>
 8000f58:	4826      	ldr	r0, [pc, #152]	@ (8000ff4 <_printf_i+0x234>)
 8000f5a:	e7e9      	b.n	8000f30 <_printf_i+0x170>
 8000f5c:	6823      	ldr	r3, [r4, #0]
 8000f5e:	f023 0320 	bic.w	r3, r3, #32
 8000f62:	6023      	str	r3, [r4, #0]
 8000f64:	e7f6      	b.n	8000f54 <_printf_i+0x194>
 8000f66:	4616      	mov	r6, r2
 8000f68:	e7bd      	b.n	8000ee6 <_printf_i+0x126>
 8000f6a:	6833      	ldr	r3, [r6, #0]
 8000f6c:	6825      	ldr	r5, [r4, #0]
 8000f6e:	1d18      	adds	r0, r3, #4
 8000f70:	6961      	ldr	r1, [r4, #20]
 8000f72:	6030      	str	r0, [r6, #0]
 8000f74:	062e      	lsls	r6, r5, #24
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	d501      	bpl.n	8000f7e <_printf_i+0x1be>
 8000f7a:	6019      	str	r1, [r3, #0]
 8000f7c:	e002      	b.n	8000f84 <_printf_i+0x1c4>
 8000f7e:	0668      	lsls	r0, r5, #25
 8000f80:	d5fb      	bpl.n	8000f7a <_printf_i+0x1ba>
 8000f82:	8019      	strh	r1, [r3, #0]
 8000f84:	2300      	movs	r3, #0
 8000f86:	4616      	mov	r6, r2
 8000f88:	6123      	str	r3, [r4, #16]
 8000f8a:	e7bc      	b.n	8000f06 <_printf_i+0x146>
 8000f8c:	6833      	ldr	r3, [r6, #0]
 8000f8e:	2100      	movs	r1, #0
 8000f90:	1d1a      	adds	r2, r3, #4
 8000f92:	6032      	str	r2, [r6, #0]
 8000f94:	681e      	ldr	r6, [r3, #0]
 8000f96:	6862      	ldr	r2, [r4, #4]
 8000f98:	4630      	mov	r0, r6
 8000f9a:	f000 f97b 	bl	8001294 <memchr>
 8000f9e:	b108      	cbz	r0, 8000fa4 <_printf_i+0x1e4>
 8000fa0:	1b80      	subs	r0, r0, r6
 8000fa2:	6060      	str	r0, [r4, #4]
 8000fa4:	6863      	ldr	r3, [r4, #4]
 8000fa6:	6123      	str	r3, [r4, #16]
 8000fa8:	2300      	movs	r3, #0
 8000faa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000fae:	e7aa      	b.n	8000f06 <_printf_i+0x146>
 8000fb0:	4632      	mov	r2, r6
 8000fb2:	4649      	mov	r1, r9
 8000fb4:	4640      	mov	r0, r8
 8000fb6:	6923      	ldr	r3, [r4, #16]
 8000fb8:	47d0      	blx	sl
 8000fba:	3001      	adds	r0, #1
 8000fbc:	d0ad      	beq.n	8000f1a <_printf_i+0x15a>
 8000fbe:	6823      	ldr	r3, [r4, #0]
 8000fc0:	079b      	lsls	r3, r3, #30
 8000fc2:	d413      	bmi.n	8000fec <_printf_i+0x22c>
 8000fc4:	68e0      	ldr	r0, [r4, #12]
 8000fc6:	9b03      	ldr	r3, [sp, #12]
 8000fc8:	4298      	cmp	r0, r3
 8000fca:	bfb8      	it	lt
 8000fcc:	4618      	movlt	r0, r3
 8000fce:	e7a6      	b.n	8000f1e <_printf_i+0x15e>
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	4632      	mov	r2, r6
 8000fd4:	4649      	mov	r1, r9
 8000fd6:	4640      	mov	r0, r8
 8000fd8:	47d0      	blx	sl
 8000fda:	3001      	adds	r0, #1
 8000fdc:	d09d      	beq.n	8000f1a <_printf_i+0x15a>
 8000fde:	3501      	adds	r5, #1
 8000fe0:	68e3      	ldr	r3, [r4, #12]
 8000fe2:	9903      	ldr	r1, [sp, #12]
 8000fe4:	1a5b      	subs	r3, r3, r1
 8000fe6:	42ab      	cmp	r3, r5
 8000fe8:	dcf2      	bgt.n	8000fd0 <_printf_i+0x210>
 8000fea:	e7eb      	b.n	8000fc4 <_printf_i+0x204>
 8000fec:	2500      	movs	r5, #0
 8000fee:	f104 0619 	add.w	r6, r4, #25
 8000ff2:	e7f5      	b.n	8000fe0 <_printf_i+0x220>
 8000ff4:	080013f5 	.word	0x080013f5
 8000ff8:	08001406 	.word	0x08001406

08000ffc <__sflush_r>:
 8000ffc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001002:	0716      	lsls	r6, r2, #28
 8001004:	4605      	mov	r5, r0
 8001006:	460c      	mov	r4, r1
 8001008:	d454      	bmi.n	80010b4 <__sflush_r+0xb8>
 800100a:	684b      	ldr	r3, [r1, #4]
 800100c:	2b00      	cmp	r3, #0
 800100e:	dc02      	bgt.n	8001016 <__sflush_r+0x1a>
 8001010:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001012:	2b00      	cmp	r3, #0
 8001014:	dd48      	ble.n	80010a8 <__sflush_r+0xac>
 8001016:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001018:	2e00      	cmp	r6, #0
 800101a:	d045      	beq.n	80010a8 <__sflush_r+0xac>
 800101c:	2300      	movs	r3, #0
 800101e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001022:	682f      	ldr	r7, [r5, #0]
 8001024:	6a21      	ldr	r1, [r4, #32]
 8001026:	602b      	str	r3, [r5, #0]
 8001028:	d030      	beq.n	800108c <__sflush_r+0x90>
 800102a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800102c:	89a3      	ldrh	r3, [r4, #12]
 800102e:	0759      	lsls	r1, r3, #29
 8001030:	d505      	bpl.n	800103e <__sflush_r+0x42>
 8001032:	6863      	ldr	r3, [r4, #4]
 8001034:	1ad2      	subs	r2, r2, r3
 8001036:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001038:	b10b      	cbz	r3, 800103e <__sflush_r+0x42>
 800103a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800103c:	1ad2      	subs	r2, r2, r3
 800103e:	2300      	movs	r3, #0
 8001040:	4628      	mov	r0, r5
 8001042:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001044:	6a21      	ldr	r1, [r4, #32]
 8001046:	47b0      	blx	r6
 8001048:	1c43      	adds	r3, r0, #1
 800104a:	89a3      	ldrh	r3, [r4, #12]
 800104c:	d106      	bne.n	800105c <__sflush_r+0x60>
 800104e:	6829      	ldr	r1, [r5, #0]
 8001050:	291d      	cmp	r1, #29
 8001052:	d82b      	bhi.n	80010ac <__sflush_r+0xb0>
 8001054:	4a28      	ldr	r2, [pc, #160]	@ (80010f8 <__sflush_r+0xfc>)
 8001056:	40ca      	lsrs	r2, r1
 8001058:	07d6      	lsls	r6, r2, #31
 800105a:	d527      	bpl.n	80010ac <__sflush_r+0xb0>
 800105c:	2200      	movs	r2, #0
 800105e:	6062      	str	r2, [r4, #4]
 8001060:	6922      	ldr	r2, [r4, #16]
 8001062:	04d9      	lsls	r1, r3, #19
 8001064:	6022      	str	r2, [r4, #0]
 8001066:	d504      	bpl.n	8001072 <__sflush_r+0x76>
 8001068:	1c42      	adds	r2, r0, #1
 800106a:	d101      	bne.n	8001070 <__sflush_r+0x74>
 800106c:	682b      	ldr	r3, [r5, #0]
 800106e:	b903      	cbnz	r3, 8001072 <__sflush_r+0x76>
 8001070:	6560      	str	r0, [r4, #84]	@ 0x54
 8001072:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001074:	602f      	str	r7, [r5, #0]
 8001076:	b1b9      	cbz	r1, 80010a8 <__sflush_r+0xac>
 8001078:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800107c:	4299      	cmp	r1, r3
 800107e:	d002      	beq.n	8001086 <__sflush_r+0x8a>
 8001080:	4628      	mov	r0, r5
 8001082:	f7ff fbf5 	bl	8000870 <_free_r>
 8001086:	2300      	movs	r3, #0
 8001088:	6363      	str	r3, [r4, #52]	@ 0x34
 800108a:	e00d      	b.n	80010a8 <__sflush_r+0xac>
 800108c:	2301      	movs	r3, #1
 800108e:	4628      	mov	r0, r5
 8001090:	47b0      	blx	r6
 8001092:	4602      	mov	r2, r0
 8001094:	1c50      	adds	r0, r2, #1
 8001096:	d1c9      	bne.n	800102c <__sflush_r+0x30>
 8001098:	682b      	ldr	r3, [r5, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d0c6      	beq.n	800102c <__sflush_r+0x30>
 800109e:	2b1d      	cmp	r3, #29
 80010a0:	d001      	beq.n	80010a6 <__sflush_r+0xaa>
 80010a2:	2b16      	cmp	r3, #22
 80010a4:	d11d      	bne.n	80010e2 <__sflush_r+0xe6>
 80010a6:	602f      	str	r7, [r5, #0]
 80010a8:	2000      	movs	r0, #0
 80010aa:	e021      	b.n	80010f0 <__sflush_r+0xf4>
 80010ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010b0:	b21b      	sxth	r3, r3
 80010b2:	e01a      	b.n	80010ea <__sflush_r+0xee>
 80010b4:	690f      	ldr	r7, [r1, #16]
 80010b6:	2f00      	cmp	r7, #0
 80010b8:	d0f6      	beq.n	80010a8 <__sflush_r+0xac>
 80010ba:	0793      	lsls	r3, r2, #30
 80010bc:	bf18      	it	ne
 80010be:	2300      	movne	r3, #0
 80010c0:	680e      	ldr	r6, [r1, #0]
 80010c2:	bf08      	it	eq
 80010c4:	694b      	ldreq	r3, [r1, #20]
 80010c6:	1bf6      	subs	r6, r6, r7
 80010c8:	600f      	str	r7, [r1, #0]
 80010ca:	608b      	str	r3, [r1, #8]
 80010cc:	2e00      	cmp	r6, #0
 80010ce:	ddeb      	ble.n	80010a8 <__sflush_r+0xac>
 80010d0:	4633      	mov	r3, r6
 80010d2:	463a      	mov	r2, r7
 80010d4:	4628      	mov	r0, r5
 80010d6:	6a21      	ldr	r1, [r4, #32]
 80010d8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80010dc:	47e0      	blx	ip
 80010de:	2800      	cmp	r0, #0
 80010e0:	dc07      	bgt.n	80010f2 <__sflush_r+0xf6>
 80010e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80010e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010ea:	f04f 30ff 	mov.w	r0, #4294967295
 80010ee:	81a3      	strh	r3, [r4, #12]
 80010f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010f2:	4407      	add	r7, r0
 80010f4:	1a36      	subs	r6, r6, r0
 80010f6:	e7e9      	b.n	80010cc <__sflush_r+0xd0>
 80010f8:	20400001 	.word	0x20400001

080010fc <_fflush_r>:
 80010fc:	b538      	push	{r3, r4, r5, lr}
 80010fe:	690b      	ldr	r3, [r1, #16]
 8001100:	4605      	mov	r5, r0
 8001102:	460c      	mov	r4, r1
 8001104:	b913      	cbnz	r3, 800110c <_fflush_r+0x10>
 8001106:	2500      	movs	r5, #0
 8001108:	4628      	mov	r0, r5
 800110a:	bd38      	pop	{r3, r4, r5, pc}
 800110c:	b118      	cbz	r0, 8001116 <_fflush_r+0x1a>
 800110e:	6a03      	ldr	r3, [r0, #32]
 8001110:	b90b      	cbnz	r3, 8001116 <_fflush_r+0x1a>
 8001112:	f7ff faa5 	bl	8000660 <__sinit>
 8001116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d0f3      	beq.n	8001106 <_fflush_r+0xa>
 800111e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001120:	07d0      	lsls	r0, r2, #31
 8001122:	d404      	bmi.n	800112e <_fflush_r+0x32>
 8001124:	0599      	lsls	r1, r3, #22
 8001126:	d402      	bmi.n	800112e <_fflush_r+0x32>
 8001128:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800112a:	f7ff fb9e 	bl	800086a <__retarget_lock_acquire_recursive>
 800112e:	4628      	mov	r0, r5
 8001130:	4621      	mov	r1, r4
 8001132:	f7ff ff63 	bl	8000ffc <__sflush_r>
 8001136:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001138:	4605      	mov	r5, r0
 800113a:	07da      	lsls	r2, r3, #31
 800113c:	d4e4      	bmi.n	8001108 <_fflush_r+0xc>
 800113e:	89a3      	ldrh	r3, [r4, #12]
 8001140:	059b      	lsls	r3, r3, #22
 8001142:	d4e1      	bmi.n	8001108 <_fflush_r+0xc>
 8001144:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001146:	f7ff fb91 	bl	800086c <__retarget_lock_release_recursive>
 800114a:	e7dd      	b.n	8001108 <_fflush_r+0xc>

0800114c <__swbuf_r>:
 800114c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800114e:	460e      	mov	r6, r1
 8001150:	4614      	mov	r4, r2
 8001152:	4605      	mov	r5, r0
 8001154:	b118      	cbz	r0, 800115e <__swbuf_r+0x12>
 8001156:	6a03      	ldr	r3, [r0, #32]
 8001158:	b90b      	cbnz	r3, 800115e <__swbuf_r+0x12>
 800115a:	f7ff fa81 	bl	8000660 <__sinit>
 800115e:	69a3      	ldr	r3, [r4, #24]
 8001160:	60a3      	str	r3, [r4, #8]
 8001162:	89a3      	ldrh	r3, [r4, #12]
 8001164:	071a      	lsls	r2, r3, #28
 8001166:	d501      	bpl.n	800116c <__swbuf_r+0x20>
 8001168:	6923      	ldr	r3, [r4, #16]
 800116a:	b943      	cbnz	r3, 800117e <__swbuf_r+0x32>
 800116c:	4621      	mov	r1, r4
 800116e:	4628      	mov	r0, r5
 8001170:	f000 f82a 	bl	80011c8 <__swsetup_r>
 8001174:	b118      	cbz	r0, 800117e <__swbuf_r+0x32>
 8001176:	f04f 37ff 	mov.w	r7, #4294967295
 800117a:	4638      	mov	r0, r7
 800117c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800117e:	6823      	ldr	r3, [r4, #0]
 8001180:	6922      	ldr	r2, [r4, #16]
 8001182:	b2f6      	uxtb	r6, r6
 8001184:	1a98      	subs	r0, r3, r2
 8001186:	6963      	ldr	r3, [r4, #20]
 8001188:	4637      	mov	r7, r6
 800118a:	4283      	cmp	r3, r0
 800118c:	dc05      	bgt.n	800119a <__swbuf_r+0x4e>
 800118e:	4621      	mov	r1, r4
 8001190:	4628      	mov	r0, r5
 8001192:	f7ff ffb3 	bl	80010fc <_fflush_r>
 8001196:	2800      	cmp	r0, #0
 8001198:	d1ed      	bne.n	8001176 <__swbuf_r+0x2a>
 800119a:	68a3      	ldr	r3, [r4, #8]
 800119c:	3b01      	subs	r3, #1
 800119e:	60a3      	str	r3, [r4, #8]
 80011a0:	6823      	ldr	r3, [r4, #0]
 80011a2:	1c5a      	adds	r2, r3, #1
 80011a4:	6022      	str	r2, [r4, #0]
 80011a6:	701e      	strb	r6, [r3, #0]
 80011a8:	6962      	ldr	r2, [r4, #20]
 80011aa:	1c43      	adds	r3, r0, #1
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d004      	beq.n	80011ba <__swbuf_r+0x6e>
 80011b0:	89a3      	ldrh	r3, [r4, #12]
 80011b2:	07db      	lsls	r3, r3, #31
 80011b4:	d5e1      	bpl.n	800117a <__swbuf_r+0x2e>
 80011b6:	2e0a      	cmp	r6, #10
 80011b8:	d1df      	bne.n	800117a <__swbuf_r+0x2e>
 80011ba:	4621      	mov	r1, r4
 80011bc:	4628      	mov	r0, r5
 80011be:	f7ff ff9d 	bl	80010fc <_fflush_r>
 80011c2:	2800      	cmp	r0, #0
 80011c4:	d0d9      	beq.n	800117a <__swbuf_r+0x2e>
 80011c6:	e7d6      	b.n	8001176 <__swbuf_r+0x2a>

080011c8 <__swsetup_r>:
 80011c8:	b538      	push	{r3, r4, r5, lr}
 80011ca:	4b29      	ldr	r3, [pc, #164]	@ (8001270 <__swsetup_r+0xa8>)
 80011cc:	4605      	mov	r5, r0
 80011ce:	6818      	ldr	r0, [r3, #0]
 80011d0:	460c      	mov	r4, r1
 80011d2:	b118      	cbz	r0, 80011dc <__swsetup_r+0x14>
 80011d4:	6a03      	ldr	r3, [r0, #32]
 80011d6:	b90b      	cbnz	r3, 80011dc <__swsetup_r+0x14>
 80011d8:	f7ff fa42 	bl	8000660 <__sinit>
 80011dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011e0:	0719      	lsls	r1, r3, #28
 80011e2:	d422      	bmi.n	800122a <__swsetup_r+0x62>
 80011e4:	06da      	lsls	r2, r3, #27
 80011e6:	d407      	bmi.n	80011f8 <__swsetup_r+0x30>
 80011e8:	2209      	movs	r2, #9
 80011ea:	602a      	str	r2, [r5, #0]
 80011ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295
 80011f4:	81a3      	strh	r3, [r4, #12]
 80011f6:	e033      	b.n	8001260 <__swsetup_r+0x98>
 80011f8:	0758      	lsls	r0, r3, #29
 80011fa:	d512      	bpl.n	8001222 <__swsetup_r+0x5a>
 80011fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80011fe:	b141      	cbz	r1, 8001212 <__swsetup_r+0x4a>
 8001200:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001204:	4299      	cmp	r1, r3
 8001206:	d002      	beq.n	800120e <__swsetup_r+0x46>
 8001208:	4628      	mov	r0, r5
 800120a:	f7ff fb31 	bl	8000870 <_free_r>
 800120e:	2300      	movs	r3, #0
 8001210:	6363      	str	r3, [r4, #52]	@ 0x34
 8001212:	89a3      	ldrh	r3, [r4, #12]
 8001214:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001218:	81a3      	strh	r3, [r4, #12]
 800121a:	2300      	movs	r3, #0
 800121c:	6063      	str	r3, [r4, #4]
 800121e:	6923      	ldr	r3, [r4, #16]
 8001220:	6023      	str	r3, [r4, #0]
 8001222:	89a3      	ldrh	r3, [r4, #12]
 8001224:	f043 0308 	orr.w	r3, r3, #8
 8001228:	81a3      	strh	r3, [r4, #12]
 800122a:	6923      	ldr	r3, [r4, #16]
 800122c:	b94b      	cbnz	r3, 8001242 <__swsetup_r+0x7a>
 800122e:	89a3      	ldrh	r3, [r4, #12]
 8001230:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001234:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001238:	d003      	beq.n	8001242 <__swsetup_r+0x7a>
 800123a:	4621      	mov	r1, r4
 800123c:	4628      	mov	r0, r5
 800123e:	f000 f85c 	bl	80012fa <__smakebuf_r>
 8001242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001246:	f013 0201 	ands.w	r2, r3, #1
 800124a:	d00a      	beq.n	8001262 <__swsetup_r+0x9a>
 800124c:	2200      	movs	r2, #0
 800124e:	60a2      	str	r2, [r4, #8]
 8001250:	6962      	ldr	r2, [r4, #20]
 8001252:	4252      	negs	r2, r2
 8001254:	61a2      	str	r2, [r4, #24]
 8001256:	6922      	ldr	r2, [r4, #16]
 8001258:	b942      	cbnz	r2, 800126c <__swsetup_r+0xa4>
 800125a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800125e:	d1c5      	bne.n	80011ec <__swsetup_r+0x24>
 8001260:	bd38      	pop	{r3, r4, r5, pc}
 8001262:	0799      	lsls	r1, r3, #30
 8001264:	bf58      	it	pl
 8001266:	6962      	ldrpl	r2, [r4, #20]
 8001268:	60a2      	str	r2, [r4, #8]
 800126a:	e7f4      	b.n	8001256 <__swsetup_r+0x8e>
 800126c:	2000      	movs	r0, #0
 800126e:	e7f7      	b.n	8001260 <__swsetup_r+0x98>
 8001270:	2000000c 	.word	0x2000000c

08001274 <_sbrk_r>:
 8001274:	b538      	push	{r3, r4, r5, lr}
 8001276:	2300      	movs	r3, #0
 8001278:	4d05      	ldr	r5, [pc, #20]	@ (8001290 <_sbrk_r+0x1c>)
 800127a:	4604      	mov	r4, r0
 800127c:	4608      	mov	r0, r1
 800127e:	602b      	str	r3, [r5, #0]
 8001280:	f7ff f876 	bl	8000370 <_sbrk>
 8001284:	1c43      	adds	r3, r0, #1
 8001286:	d102      	bne.n	800128e <_sbrk_r+0x1a>
 8001288:	682b      	ldr	r3, [r5, #0]
 800128a:	b103      	cbz	r3, 800128e <_sbrk_r+0x1a>
 800128c:	6023      	str	r3, [r4, #0]
 800128e:	bd38      	pop	{r3, r4, r5, pc}
 8001290:	200001bc 	.word	0x200001bc

08001294 <memchr>:
 8001294:	4603      	mov	r3, r0
 8001296:	b510      	push	{r4, lr}
 8001298:	b2c9      	uxtb	r1, r1
 800129a:	4402      	add	r2, r0
 800129c:	4293      	cmp	r3, r2
 800129e:	4618      	mov	r0, r3
 80012a0:	d101      	bne.n	80012a6 <memchr+0x12>
 80012a2:	2000      	movs	r0, #0
 80012a4:	e003      	b.n	80012ae <memchr+0x1a>
 80012a6:	7804      	ldrb	r4, [r0, #0]
 80012a8:	3301      	adds	r3, #1
 80012aa:	428c      	cmp	r4, r1
 80012ac:	d1f6      	bne.n	800129c <memchr+0x8>
 80012ae:	bd10      	pop	{r4, pc}

080012b0 <__swhatbuf_r>:
 80012b0:	b570      	push	{r4, r5, r6, lr}
 80012b2:	460c      	mov	r4, r1
 80012b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012b8:	4615      	mov	r5, r2
 80012ba:	2900      	cmp	r1, #0
 80012bc:	461e      	mov	r6, r3
 80012be:	b096      	sub	sp, #88	@ 0x58
 80012c0:	da0c      	bge.n	80012dc <__swhatbuf_r+0x2c>
 80012c2:	89a3      	ldrh	r3, [r4, #12]
 80012c4:	2100      	movs	r1, #0
 80012c6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80012ca:	bf14      	ite	ne
 80012cc:	2340      	movne	r3, #64	@ 0x40
 80012ce:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80012d2:	2000      	movs	r0, #0
 80012d4:	6031      	str	r1, [r6, #0]
 80012d6:	602b      	str	r3, [r5, #0]
 80012d8:	b016      	add	sp, #88	@ 0x58
 80012da:	bd70      	pop	{r4, r5, r6, pc}
 80012dc:	466a      	mov	r2, sp
 80012de:	f000 f849 	bl	8001374 <_fstat_r>
 80012e2:	2800      	cmp	r0, #0
 80012e4:	dbed      	blt.n	80012c2 <__swhatbuf_r+0x12>
 80012e6:	9901      	ldr	r1, [sp, #4]
 80012e8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80012ec:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80012f0:	4259      	negs	r1, r3
 80012f2:	4159      	adcs	r1, r3
 80012f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012f8:	e7eb      	b.n	80012d2 <__swhatbuf_r+0x22>

080012fa <__smakebuf_r>:
 80012fa:	898b      	ldrh	r3, [r1, #12]
 80012fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80012fe:	079d      	lsls	r5, r3, #30
 8001300:	4606      	mov	r6, r0
 8001302:	460c      	mov	r4, r1
 8001304:	d507      	bpl.n	8001316 <__smakebuf_r+0x1c>
 8001306:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800130a:	6023      	str	r3, [r4, #0]
 800130c:	6123      	str	r3, [r4, #16]
 800130e:	2301      	movs	r3, #1
 8001310:	6163      	str	r3, [r4, #20]
 8001312:	b003      	add	sp, #12
 8001314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001316:	466a      	mov	r2, sp
 8001318:	ab01      	add	r3, sp, #4
 800131a:	f7ff ffc9 	bl	80012b0 <__swhatbuf_r>
 800131e:	9f00      	ldr	r7, [sp, #0]
 8001320:	4605      	mov	r5, r0
 8001322:	4639      	mov	r1, r7
 8001324:	4630      	mov	r0, r6
 8001326:	f7ff fb0d 	bl	8000944 <_malloc_r>
 800132a:	b948      	cbnz	r0, 8001340 <__smakebuf_r+0x46>
 800132c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001330:	059a      	lsls	r2, r3, #22
 8001332:	d4ee      	bmi.n	8001312 <__smakebuf_r+0x18>
 8001334:	f023 0303 	bic.w	r3, r3, #3
 8001338:	f043 0302 	orr.w	r3, r3, #2
 800133c:	81a3      	strh	r3, [r4, #12]
 800133e:	e7e2      	b.n	8001306 <__smakebuf_r+0xc>
 8001340:	89a3      	ldrh	r3, [r4, #12]
 8001342:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001346:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800134a:	81a3      	strh	r3, [r4, #12]
 800134c:	9b01      	ldr	r3, [sp, #4]
 800134e:	6020      	str	r0, [r4, #0]
 8001350:	b15b      	cbz	r3, 800136a <__smakebuf_r+0x70>
 8001352:	4630      	mov	r0, r6
 8001354:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001358:	f000 f81e 	bl	8001398 <_isatty_r>
 800135c:	b128      	cbz	r0, 800136a <__smakebuf_r+0x70>
 800135e:	89a3      	ldrh	r3, [r4, #12]
 8001360:	f023 0303 	bic.w	r3, r3, #3
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	81a3      	strh	r3, [r4, #12]
 800136a:	89a3      	ldrh	r3, [r4, #12]
 800136c:	431d      	orrs	r5, r3
 800136e:	81a5      	strh	r5, [r4, #12]
 8001370:	e7cf      	b.n	8001312 <__smakebuf_r+0x18>
	...

08001374 <_fstat_r>:
 8001374:	b538      	push	{r3, r4, r5, lr}
 8001376:	2300      	movs	r3, #0
 8001378:	4d06      	ldr	r5, [pc, #24]	@ (8001394 <_fstat_r+0x20>)
 800137a:	4604      	mov	r4, r0
 800137c:	4608      	mov	r0, r1
 800137e:	4611      	mov	r1, r2
 8001380:	602b      	str	r3, [r5, #0]
 8001382:	f7fe ffcf 	bl	8000324 <_fstat>
 8001386:	1c43      	adds	r3, r0, #1
 8001388:	d102      	bne.n	8001390 <_fstat_r+0x1c>
 800138a:	682b      	ldr	r3, [r5, #0]
 800138c:	b103      	cbz	r3, 8001390 <_fstat_r+0x1c>
 800138e:	6023      	str	r3, [r4, #0]
 8001390:	bd38      	pop	{r3, r4, r5, pc}
 8001392:	bf00      	nop
 8001394:	200001bc 	.word	0x200001bc

08001398 <_isatty_r>:
 8001398:	b538      	push	{r3, r4, r5, lr}
 800139a:	2300      	movs	r3, #0
 800139c:	4d05      	ldr	r5, [pc, #20]	@ (80013b4 <_isatty_r+0x1c>)
 800139e:	4604      	mov	r4, r0
 80013a0:	4608      	mov	r0, r1
 80013a2:	602b      	str	r3, [r5, #0]
 80013a4:	f7fe ffcd 	bl	8000342 <_isatty>
 80013a8:	1c43      	adds	r3, r0, #1
 80013aa:	d102      	bne.n	80013b2 <_isatty_r+0x1a>
 80013ac:	682b      	ldr	r3, [r5, #0]
 80013ae:	b103      	cbz	r3, 80013b2 <_isatty_r+0x1a>
 80013b0:	6023      	str	r3, [r4, #0]
 80013b2:	bd38      	pop	{r3, r4, r5, pc}
 80013b4:	200001bc 	.word	0x200001bc

080013b8 <_init>:
 80013b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ba:	bf00      	nop
 80013bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013be:	bc08      	pop	{r3}
 80013c0:	469e      	mov	lr, r3
 80013c2:	4770      	bx	lr

080013c4 <_fini>:
 80013c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013c6:	bf00      	nop
 80013c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013ca:	bc08      	pop	{r3}
 80013cc:	469e      	mov	lr, r3
 80013ce:	4770      	bx	lr
