
interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002c4  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003f4  080003fc  000013fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003f4  080003f4  000013fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080003f4  080003f4  000013fc  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080003f4  080003fc  000013fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003f4  080003f4  000013f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003f8  080003f8  000013f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003fc  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003fc  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000013fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000ad7  00000000  00000000  00001425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003df  00000000  00000000  00001efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c0  00000000  00000000  000022e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000007e  00000000  00000000  000023a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000f95  00000000  00000000  0000241e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001255  00000000  00000000  000033b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000580db  00000000  00000000  00004608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0005c6e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001a8  00000000  00000000  0005c728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  0005c8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080003dc 	.word	0x080003dc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080003dc 	.word	0x080003dc

08000170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800017a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800017e:	2b00      	cmp	r3, #0
 8000180:	db0b      	blt.n	800019a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	f003 021f 	and.w	r2, r3, #31
 8000188:	4906      	ldr	r1, [pc, #24]	@ (80001a4 <__NVIC_EnableIRQ+0x34>)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	095b      	lsrs	r3, r3, #5
 8000190:	2001      	movs	r0, #1
 8000192:	fa00 f202 	lsl.w	r2, r0, r2
 8000196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800019a:	bf00      	nop
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	e000e100 	.word	0xe000e100

080001a8 <pc13_exti_init>:
#define GPIOCEN (1U<<4)
#define AFIOEN  (1U<<0)
#define EXTI_MR (1U<<13)
#define EXTI_FTSR    (1U<<13)
void pc13_exti_init(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80001ac:	b672      	cpsid	i
}
 80001ae:	bf00      	nop
	//disable global interrupts
	__disable_irq();

	//enable clock access for gpioc
	RCC->APB2ENR |= GPIOCEN;
 80001b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000220 <pc13_exti_init+0x78>)
 80001b2:	699b      	ldr	r3, [r3, #24]
 80001b4:	4a1a      	ldr	r2, [pc, #104]	@ (8000220 <pc13_exti_init+0x78>)
 80001b6:	f043 0310 	orr.w	r3, r3, #16
 80001ba:	6193      	str	r3, [r2, #24]

	//set pc13 as input

	//enable clock access to AFIO

	RCC->APB2ENR |= AFIOEN;
 80001bc:	4b18      	ldr	r3, [pc, #96]	@ (8000220 <pc13_exti_init+0x78>)
 80001be:	699b      	ldr	r3, [r3, #24]
 80001c0:	4a17      	ldr	r2, [pc, #92]	@ (8000220 <pc13_exti_init+0x78>)
 80001c2:	f043 0301 	orr.w	r3, r3, #1
 80001c6:	6193      	str	r3, [r2, #24]
	//select portc for exti13
	   GPIOC->CRH &= ~(0xF << ((13 - 8) * 4));
 80001c8:	4b16      	ldr	r3, [pc, #88]	@ (8000224 <pc13_exti_init+0x7c>)
 80001ca:	685b      	ldr	r3, [r3, #4]
 80001cc:	4a15      	ldr	r2, [pc, #84]	@ (8000224 <pc13_exti_init+0x7c>)
 80001ce:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80001d2:	6053      	str	r3, [r2, #4]
	    GPIOC->CRH |=  (0x4 << ((13 - 8) * 4));  // 0b0100 = input floating
 80001d4:	4b13      	ldr	r3, [pc, #76]	@ (8000224 <pc13_exti_init+0x7c>)
 80001d6:	685b      	ldr	r3, [r3, #4]
 80001d8:	4a12      	ldr	r2, [pc, #72]	@ (8000224 <pc13_exti_init+0x7c>)
 80001da:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80001de:	6053      	str	r3, [r2, #4]

	    // Map EXTI13 to Port C
	    AFIO->EXTICR[3] &= ~(0xF << 4);
 80001e0:	4b11      	ldr	r3, [pc, #68]	@ (8000228 <pc13_exti_init+0x80>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a10      	ldr	r2, [pc, #64]	@ (8000228 <pc13_exti_init+0x80>)
 80001e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80001ea:	6153      	str	r3, [r2, #20]
	    AFIO->EXTICR[3] |=  (0x2 << 4);
 80001ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000228 <pc13_exti_init+0x80>)
 80001ee:	695b      	ldr	r3, [r3, #20]
 80001f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000228 <pc13_exti_init+0x80>)
 80001f2:	f043 0320 	orr.w	r3, r3, #32
 80001f6:	6153      	str	r3, [r2, #20]
	//unmask exti13
EXTI->IMR |= EXTI_MR;
 80001f8:	4b0c      	ldr	r3, [pc, #48]	@ (800022c <pc13_exti_init+0x84>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a0b      	ldr	r2, [pc, #44]	@ (800022c <pc13_exti_init+0x84>)
 80001fe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000202:	6013      	str	r3, [r2, #0]
	//select falling edge trigger
EXTI->FTSR |= EXTI_FTSR;
 8000204:	4b09      	ldr	r3, [pc, #36]	@ (800022c <pc13_exti_init+0x84>)
 8000206:	68db      	ldr	r3, [r3, #12]
 8000208:	4a08      	ldr	r2, [pc, #32]	@ (800022c <pc13_exti_init+0x84>)
 800020a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800020e:	60d3      	str	r3, [r2, #12]
//enble exti line in nvic
NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000210:	2028      	movs	r0, #40	@ 0x28
 8000212:	f7ff ffad 	bl	8000170 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000216:	b662      	cpsie	i
}
 8000218:	bf00      	nop
	//enable global interrupt
__enable_irq();
}
 800021a:	bf00      	nop
 800021c:	bd80      	pop	{r7, pc}
 800021e:	bf00      	nop
 8000220:	40021000 	.word	0x40021000
 8000224:	40011000 	.word	0x40011000
 8000228:	40010000 	.word	0x40010000
 800022c:	40010400 	.word	0x40010400

08000230 <main>:
#define PIN5    (1U<<5)
#define LED_PIN  PIN5

//connect juper wire from pa0 to pa6
int main(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= GPIOAEN;
 8000234:	4b0b      	ldr	r3, [pc, #44]	@ (8000264 <main+0x34>)
 8000236:	699b      	ldr	r3, [r3, #24]
 8000238:	4a0a      	ldr	r2, [pc, #40]	@ (8000264 <main+0x34>)
 800023a:	f043 0304 	orr.w	r3, r3, #4
 800023e:	6193      	str	r3, [r2, #24]
	GPIOA->CRL &= ~(0xF << (5 * 4));
 8000240:	4b09      	ldr	r3, [pc, #36]	@ (8000268 <main+0x38>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a08      	ldr	r2, [pc, #32]	@ (8000268 <main+0x38>)
 8000246:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800024a:	6013      	str	r3, [r2, #0]
	// Set MODE5 = 0b10 (output 2MHz), CNF5 = 0b00 (GP push-pull)
	GPIOA->CRL |=  (0x2 << (5 * 4));
 800024c:	4b06      	ldr	r3, [pc, #24]	@ (8000268 <main+0x38>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a05      	ldr	r2, [pc, #20]	@ (8000268 <main+0x38>)
 8000252:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000256:	6013      	str	r3, [r2, #0]
	     uart2_tx_init();
 8000258:	f000 f82c 	bl	80002b4 <uart2_tx_init>

	pc13_exti_init();
 800025c:	f7ff ffa4 	bl	80001a8 <pc13_exti_init>


    while (1)
 8000260:	bf00      	nop
 8000262:	e7fd      	b.n	8000260 <main+0x30>
 8000264:	40021000 	.word	0x40021000
 8000268:	40010800 	.word	0x40010800

0800026c <compute_uart_bd>:
#define CR1_TE      (1U<<3)
#define CR1_UE      (1U<<13)
#define SR_TXE      (1U<<7)

static uint16_t compute_uart_bd(uint32_t periphclk, uint32_t baudrate)
{
 800026c:	b480      	push	{r7}
 800026e:	b083      	sub	sp, #12
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	6039      	str	r1, [r7, #0]
    return (periphclk + (baudrate/2U)) / baudrate;
 8000276:	683b      	ldr	r3, [r7, #0]
 8000278:	085a      	lsrs	r2, r3, #1
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	441a      	add	r2, r3
 800027e:	683b      	ldr	r3, [r7, #0]
 8000280:	fbb2 f3f3 	udiv	r3, r2, r3
 8000284:	b29b      	uxth	r3, r3
}
 8000286:	4618      	mov	r0, r3
 8000288:	370c      	adds	r7, #12
 800028a:	46bd      	mov	sp, r7
 800028c:	bc80      	pop	{r7}
 800028e:	4770      	bx	lr

08000290 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t periphclk, uint32_t baudrate)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
 8000296:	60f8      	str	r0, [r7, #12]
 8000298:	60b9      	str	r1, [r7, #8]
 800029a:	607a      	str	r2, [r7, #4]
    USARTx->BRR = compute_uart_bd(periphclk, baudrate);
 800029c:	6879      	ldr	r1, [r7, #4]
 800029e:	68b8      	ldr	r0, [r7, #8]
 80002a0:	f7ff ffe4 	bl	800026c <compute_uart_bd>
 80002a4:	4603      	mov	r3, r0
 80002a6:	461a      	mov	r2, r3
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	609a      	str	r2, [r3, #8]
}
 80002ac:	bf00      	nop
 80002ae:	3710      	adds	r7, #16
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}

080002b4 <uart2_tx_init>:
    // write to data register
    USART2->DR = (ch & 0xFF);
}

void uart2_tx_init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
    /************* Configure UART GPIO pin ************/

    // Enable clock access to GPIOA & AFIO
    RCC->APB2ENR |= GPIOAEN;
 80002b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000330 <uart2_tx_init+0x7c>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	4a1c      	ldr	r2, [pc, #112]	@ (8000330 <uart2_tx_init+0x7c>)
 80002be:	f043 0304 	orr.w	r3, r3, #4
 80002c2:	6193      	str	r3, [r2, #24]
    RCC->APB2ENR |= AFIOEN;
 80002c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000330 <uart2_tx_init+0x7c>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	4a19      	ldr	r2, [pc, #100]	@ (8000330 <uart2_tx_init+0x7c>)
 80002ca:	f043 0301 	orr.w	r3, r3, #1
 80002ce:	6193      	str	r3, [r2, #24]

    // Set PA2 to alternate function push-pull
    // PA2 is configured in CRL (bits [11:8])
    GPIOA->CRL |=  (1U << 8);   // MODE2_0 = 1
 80002d0:	4b18      	ldr	r3, [pc, #96]	@ (8000334 <uart2_tx_init+0x80>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a17      	ldr	r2, [pc, #92]	@ (8000334 <uart2_tx_init+0x80>)
 80002d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002da:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |=  (1U << 9);   // MODE2_1 = 1
 80002dc:	4b15      	ldr	r3, [pc, #84]	@ (8000334 <uart2_tx_init+0x80>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a14      	ldr	r2, [pc, #80]	@ (8000334 <uart2_tx_init+0x80>)
 80002e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80002e6:	6013      	str	r3, [r2, #0]
    // CNF2_0 = 0 → already cleared
    GPIOA->CRL |=  (1U << 11);
 80002e8:	4b12      	ldr	r3, [pc, #72]	@ (8000334 <uart2_tx_init+0x80>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a11      	ldr	r2, [pc, #68]	@ (8000334 <uart2_tx_init+0x80>)
 80002ee:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80002f2:	6013      	str	r3, [r2, #0]
    GPIOA->CRL &=  ~(1U << 10);
 80002f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000334 <uart2_tx_init+0x80>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a0e      	ldr	r2, [pc, #56]	@ (8000334 <uart2_tx_init+0x80>)
 80002fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80002fe:	6013      	str	r3, [r2, #0]
    // MODE2 = 11 (Output 50 MHz), CNF2 = 10 (AF push-pull)

    /************* Configure UART module ************/

    // Enable clock access to USART2
    RCC->APB1ENR |= UART2EN;
 8000300:	4b0b      	ldr	r3, [pc, #44]	@ (8000330 <uart2_tx_init+0x7c>)
 8000302:	69db      	ldr	r3, [r3, #28]
 8000304:	4a0a      	ldr	r2, [pc, #40]	@ (8000330 <uart2_tx_init+0x7c>)
 8000306:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800030a:	61d3      	str	r3, [r2, #28]

    // Set baud rate
    uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 800030c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000310:	4909      	ldr	r1, [pc, #36]	@ (8000338 <uart2_tx_init+0x84>)
 8000312:	480a      	ldr	r0, [pc, #40]	@ (800033c <uart2_tx_init+0x88>)
 8000314:	f7ff ffbc 	bl	8000290 <uart_set_baudrate>

    // Configure transfer direction (transmitter only)
    USART2->CR1 = CR1_TE;
 8000318:	4b08      	ldr	r3, [pc, #32]	@ (800033c <uart2_tx_init+0x88>)
 800031a:	2208      	movs	r2, #8
 800031c:	60da      	str	r2, [r3, #12]

    // Enable UART module
    USART2->CR1 |= CR1_UE;
 800031e:	4b07      	ldr	r3, [pc, #28]	@ (800033c <uart2_tx_init+0x88>)
 8000320:	68db      	ldr	r3, [r3, #12]
 8000322:	4a06      	ldr	r2, [pc, #24]	@ (800033c <uart2_tx_init+0x88>)
 8000324:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000328:	60d3      	str	r3, [r2, #12]
}
 800032a:	bf00      	nop
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	40021000 	.word	0x40021000
 8000334:	40010800 	.word	0x40010800
 8000338:	00f42400 	.word	0x00f42400
 800033c:	40004400 	.word	0x40004400

08000340 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000340:	480d      	ldr	r0, [pc, #52]	@ (8000378 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000342:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000344:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000348:	480c      	ldr	r0, [pc, #48]	@ (800037c <LoopForever+0x6>)
  ldr r1, =_edata
 800034a:	490d      	ldr	r1, [pc, #52]	@ (8000380 <LoopForever+0xa>)
  ldr r2, =_sidata
 800034c:	4a0d      	ldr	r2, [pc, #52]	@ (8000384 <LoopForever+0xe>)
  movs r3, #0
 800034e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000350:	e002      	b.n	8000358 <LoopCopyDataInit>

08000352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000356:	3304      	adds	r3, #4

08000358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800035a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800035c:	d3f9      	bcc.n	8000352 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800035e:	4a0a      	ldr	r2, [pc, #40]	@ (8000388 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000360:	4c0a      	ldr	r4, [pc, #40]	@ (800038c <LoopForever+0x16>)
  movs r3, #0
 8000362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000364:	e001      	b.n	800036a <LoopFillZerobss>

08000366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000368:	3204      	adds	r2, #4

0800036a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800036a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800036c:	d3fb      	bcc.n	8000366 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800036e:	f000 f811 	bl	8000394 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000372:	f7ff ff5d 	bl	8000230 <main>

08000376 <LoopForever>:

LoopForever:
  b LoopForever
 8000376:	e7fe      	b.n	8000376 <LoopForever>
  ldr   r0, =_estack
 8000378:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800037c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000380:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000384:	080003fc 	.word	0x080003fc
  ldr r2, =_sbss
 8000388:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800038c:	2000001c 	.word	0x2000001c

08000390 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000390:	e7fe      	b.n	8000390 <ADC1_2_IRQHandler>
	...

08000394 <__libc_init_array>:
 8000394:	b570      	push	{r4, r5, r6, lr}
 8000396:	2600      	movs	r6, #0
 8000398:	4d0c      	ldr	r5, [pc, #48]	@ (80003cc <__libc_init_array+0x38>)
 800039a:	4c0d      	ldr	r4, [pc, #52]	@ (80003d0 <__libc_init_array+0x3c>)
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	10a4      	asrs	r4, r4, #2
 80003a0:	42a6      	cmp	r6, r4
 80003a2:	d109      	bne.n	80003b8 <__libc_init_array+0x24>
 80003a4:	f000 f81a 	bl	80003dc <_init>
 80003a8:	2600      	movs	r6, #0
 80003aa:	4d0a      	ldr	r5, [pc, #40]	@ (80003d4 <__libc_init_array+0x40>)
 80003ac:	4c0a      	ldr	r4, [pc, #40]	@ (80003d8 <__libc_init_array+0x44>)
 80003ae:	1b64      	subs	r4, r4, r5
 80003b0:	10a4      	asrs	r4, r4, #2
 80003b2:	42a6      	cmp	r6, r4
 80003b4:	d105      	bne.n	80003c2 <__libc_init_array+0x2e>
 80003b6:	bd70      	pop	{r4, r5, r6, pc}
 80003b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003bc:	4798      	blx	r3
 80003be:	3601      	adds	r6, #1
 80003c0:	e7ee      	b.n	80003a0 <__libc_init_array+0xc>
 80003c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c6:	4798      	blx	r3
 80003c8:	3601      	adds	r6, #1
 80003ca:	e7f2      	b.n	80003b2 <__libc_init_array+0x1e>
 80003cc:	080003f4 	.word	0x080003f4
 80003d0:	080003f4 	.word	0x080003f4
 80003d4:	080003f4 	.word	0x080003f4
 80003d8:	080003f8 	.word	0x080003f8

080003dc <_init>:
 80003dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003de:	bf00      	nop
 80003e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003e2:	bc08      	pop	{r3}
 80003e4:	469e      	mov	lr, r3
 80003e6:	4770      	bx	lr

080003e8 <_fini>:
 80003e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ea:	bf00      	nop
 80003ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ee:	bc08      	pop	{r3}
 80003f0:	469e      	mov	lr, r3
 80003f2:	4770      	bx	lr
