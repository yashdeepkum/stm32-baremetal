
capture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012e8  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001418  08001418  00002418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001458  08001458  0000305c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001458  08001458  0000305c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001458  08001458  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001458  08001458  00002458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800145c  0800145c  0000245c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001460  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  080014bc  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  080014bc  000031cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000fe4  00000000  00000000  00003085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000570  00000000  00000000  00004069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000180  00000000  00000000  000045e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000105  00000000  00000000  00004760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002005  00000000  00000000  00004865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002077  00000000  00000000  0000686a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00059f23  00000000  00000000  000088e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00062804  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c3c  00000000  00000000  00062848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  00063484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000005c 	.word	0x2000005c
 800014c:	00000000 	.word	0x00000000
 8000150:	08001400 	.word	0x08001400

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000060 	.word	0x20000060
 800016c:	08001400 	.word	0x08001400

08000170 <main>:


volatile int timestamp=0;
//connect juper wire from pa0 to pa6
int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	tim2_pa0_output_cmp();
 8000174:	f000 f8be 	bl	80002f4 <tim2_pa0_output_cmp>
	tim3_input_capture();
 8000178:	f000 f90a 	bl	8000390 <tim3_input_capture>
    uart2_tx_init();
 800017c:	f000 f98c 	bl	8000498 <uart2_tx_init>

    // Enable clock access to GPIOA

    while (1)
    {//wait until edge is captured
    	while(!(TIM3->SR & SR_CC1IF)){}
 8000180:	bf00      	nop
 8000182:	4b09      	ldr	r3, [pc, #36]	@ (80001a8 <main+0x38>)
 8000184:	691b      	ldr	r3, [r3, #16]
 8000186:	f003 0302 	and.w	r3, r3, #2
 800018a:	2b00      	cmp	r3, #0
 800018c:	d0f9      	beq.n	8000182 <main+0x12>
    	//READ VALUE
    	timestamp=TIM3->CCR1;
 800018e:	4b06      	ldr	r3, [pc, #24]	@ (80001a8 <main+0x38>)
 8000190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000192:	461a      	mov	r2, r3
 8000194:	4b05      	ldr	r3, [pc, #20]	@ (80001ac <main+0x3c>)
 8000196:	601a      	str	r2, [r3, #0]
        printf("timestamp %d",timestamp);
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <main+0x3c>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4619      	mov	r1, r3
 800019e:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <main+0x40>)
 80001a0:	f000 fab8 	bl	8000714 <iprintf>
    	while(!(TIM3->SR & SR_CC1IF)){}
 80001a4:	e7ec      	b.n	8000180 <main+0x10>
 80001a6:	bf00      	nop
 80001a8:	40000400 	.word	0x40000400
 80001ac:	20000078 	.word	0x20000078
 80001b0:	08001418 	.word	0x08001418

080001b4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b086      	sub	sp, #24
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	60f8      	str	r0, [r7, #12]
 80001bc:	60b9      	str	r1, [r7, #8]
 80001be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80001c0:	2300      	movs	r3, #0
 80001c2:	617b      	str	r3, [r7, #20]
 80001c4:	e00a      	b.n	80001dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80001c6:	f3af 8000 	nop.w
 80001ca:	4601      	mov	r1, r0
 80001cc:	68bb      	ldr	r3, [r7, #8]
 80001ce:	1c5a      	adds	r2, r3, #1
 80001d0:	60ba      	str	r2, [r7, #8]
 80001d2:	b2ca      	uxtb	r2, r1
 80001d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80001d6:	697b      	ldr	r3, [r7, #20]
 80001d8:	3301      	adds	r3, #1
 80001da:	617b      	str	r3, [r7, #20]
 80001dc:	697a      	ldr	r2, [r7, #20]
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	429a      	cmp	r2, r3
 80001e2:	dbf0      	blt.n	80001c6 <_read+0x12>
  }

  return len;
 80001e4:	687b      	ldr	r3, [r7, #4]
}
 80001e6:	4618      	mov	r0, r3
 80001e8:	3718      	adds	r7, #24
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}

080001ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80001ee:	b580      	push	{r7, lr}
 80001f0:	b086      	sub	sp, #24
 80001f2:	af00      	add	r7, sp, #0
 80001f4:	60f8      	str	r0, [r7, #12]
 80001f6:	60b9      	str	r1, [r7, #8]
 80001f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80001fa:	2300      	movs	r3, #0
 80001fc:	617b      	str	r3, [r7, #20]
 80001fe:	e009      	b.n	8000214 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000200:	68bb      	ldr	r3, [r7, #8]
 8000202:	1c5a      	adds	r2, r3, #1
 8000204:	60ba      	str	r2, [r7, #8]
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	4618      	mov	r0, r3
 800020a:	f000 f98b 	bl	8000524 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800020e:	697b      	ldr	r3, [r7, #20]
 8000210:	3301      	adds	r3, #1
 8000212:	617b      	str	r3, [r7, #20]
 8000214:	697a      	ldr	r2, [r7, #20]
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	429a      	cmp	r2, r3
 800021a:	dbf1      	blt.n	8000200 <_write+0x12>
  }
  return len;
 800021c:	687b      	ldr	r3, [r7, #4]
}
 800021e:	4618      	mov	r0, r3
 8000220:	3718      	adds	r7, #24
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}

08000226 <_close>:

int _close(int file)
{
 8000226:	b480      	push	{r7}
 8000228:	b083      	sub	sp, #12
 800022a:	af00      	add	r7, sp, #0
 800022c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800022e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000232:	4618      	mov	r0, r3
 8000234:	370c      	adds	r7, #12
 8000236:	46bd      	mov	sp, r7
 8000238:	bc80      	pop	{r7}
 800023a:	4770      	bx	lr

0800023c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800024c:	605a      	str	r2, [r3, #4]
  return 0;
 800024e:	2300      	movs	r3, #0
}
 8000250:	4618      	mov	r0, r3
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	bc80      	pop	{r7}
 8000258:	4770      	bx	lr

0800025a <_isatty>:

int _isatty(int file)
{
 800025a:	b480      	push	{r7}
 800025c:	b083      	sub	sp, #12
 800025e:	af00      	add	r7, sp, #0
 8000260:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000262:	2301      	movs	r3, #1
}
 8000264:	4618      	mov	r0, r3
 8000266:	370c      	adds	r7, #12
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr

0800026e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800026e:	b480      	push	{r7}
 8000270:	b085      	sub	sp, #20
 8000272:	af00      	add	r7, sp, #0
 8000274:	60f8      	str	r0, [r7, #12]
 8000276:	60b9      	str	r1, [r7, #8]
 8000278:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800027a:	2300      	movs	r3, #0
}
 800027c:	4618      	mov	r0, r3
 800027e:	3714      	adds	r7, #20
 8000280:	46bd      	mov	sp, r7
 8000282:	bc80      	pop	{r7}
 8000284:	4770      	bx	lr
	...

08000288 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b086      	sub	sp, #24
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000290:	4a14      	ldr	r2, [pc, #80]	@ (80002e4 <_sbrk+0x5c>)
 8000292:	4b15      	ldr	r3, [pc, #84]	@ (80002e8 <_sbrk+0x60>)
 8000294:	1ad3      	subs	r3, r2, r3
 8000296:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000298:	697b      	ldr	r3, [r7, #20]
 800029a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800029c:	4b13      	ldr	r3, [pc, #76]	@ (80002ec <_sbrk+0x64>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d102      	bne.n	80002aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80002a4:	4b11      	ldr	r3, [pc, #68]	@ (80002ec <_sbrk+0x64>)
 80002a6:	4a12      	ldr	r2, [pc, #72]	@ (80002f0 <_sbrk+0x68>)
 80002a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80002aa:	4b10      	ldr	r3, [pc, #64]	@ (80002ec <_sbrk+0x64>)
 80002ac:	681a      	ldr	r2, [r3, #0]
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	4413      	add	r3, r2
 80002b2:	693a      	ldr	r2, [r7, #16]
 80002b4:	429a      	cmp	r2, r3
 80002b6:	d207      	bcs.n	80002c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80002b8:	f000 fad0 	bl	800085c <__errno>
 80002bc:	4603      	mov	r3, r0
 80002be:	220c      	movs	r2, #12
 80002c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80002c2:	f04f 33ff 	mov.w	r3, #4294967295
 80002c6:	e009      	b.n	80002dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80002c8:	4b08      	ldr	r3, [pc, #32]	@ (80002ec <_sbrk+0x64>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80002ce:	4b07      	ldr	r3, [pc, #28]	@ (80002ec <_sbrk+0x64>)
 80002d0:	681a      	ldr	r2, [r3, #0]
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	4413      	add	r3, r2
 80002d6:	4a05      	ldr	r2, [pc, #20]	@ (80002ec <_sbrk+0x64>)
 80002d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80002da:	68fb      	ldr	r3, [r7, #12]
}
 80002dc:	4618      	mov	r0, r3
 80002de:	3718      	adds	r7, #24
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	20005000 	.word	0x20005000
 80002e8:	00000400 	.word	0x00000400
 80002ec:	2000007c 	.word	0x2000007c
 80002f0:	200001d0 	.word	0x200001d0

080002f4 <tim2_pa0_output_cmp>:
	//enable timer
	TIM2->CR1 = CR1_CEN;
}

void tim2_pa0_output_cmp(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
	//enable clk access to tim2
	RCC->APB1ENR |= TIM2EN;
 80002f8:	4b23      	ldr	r3, [pc, #140]	@ (8000388 <tim2_pa0_output_cmp+0x94>)
 80002fa:	69db      	ldr	r3, [r3, #28]
 80002fc:	4a22      	ldr	r2, [pc, #136]	@ (8000388 <tim2_pa0_output_cmp+0x94>)
 80002fe:	f043 0301 	orr.w	r3, r3, #1
 8000302:	61d3      	str	r3, [r2, #28]
	//enable clock acess to gpioa
	RCC->APB2ENR |= GPIOAEN;
 8000304:	4b20      	ldr	r3, [pc, #128]	@ (8000388 <tim2_pa0_output_cmp+0x94>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	4a1f      	ldr	r2, [pc, #124]	@ (8000388 <tim2_pa0_output_cmp+0x94>)
 800030a:	f043 0304 	orr.w	r3, r3, #4
 800030e:	6193      	str	r3, [r2, #24]
	//enable alternate function clock
	RCC->APB2ENR |= AFIOEN;
 8000310:	4b1d      	ldr	r3, [pc, #116]	@ (8000388 <tim2_pa0_output_cmp+0x94>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	4a1c      	ldr	r2, [pc, #112]	@ (8000388 <tim2_pa0_output_cmp+0x94>)
 8000316:	f043 0301 	orr.w	r3, r3, #1
 800031a:	6193      	str	r3, [r2, #24]
	GPIOA->CRL |=(1U<<3);
 800031c:	4b1b      	ldr	r3, [pc, #108]	@ (800038c <tim2_pa0_output_cmp+0x98>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a1a      	ldr	r2, [pc, #104]	@ (800038c <tim2_pa0_output_cmp+0x98>)
 8000322:	f043 0308 	orr.w	r3, r3, #8
 8000326:	6013      	str	r3, [r2, #0]
		GPIOA->CRL &=~(1U<<2);
 8000328:	4b18      	ldr	r3, [pc, #96]	@ (800038c <tim2_pa0_output_cmp+0x98>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a17      	ldr	r2, [pc, #92]	@ (800038c <tim2_pa0_output_cmp+0x98>)
 800032e:	f023 0304 	bic.w	r3, r3, #4
 8000332:	6013      	str	r3, [r2, #0]
		GPIOA->CRL |=(1U<<1);
 8000334:	4b15      	ldr	r3, [pc, #84]	@ (800038c <tim2_pa0_output_cmp+0x98>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a14      	ldr	r2, [pc, #80]	@ (800038c <tim2_pa0_output_cmp+0x98>)
 800033a:	f043 0302 	orr.w	r3, r3, #2
 800033e:	6013      	str	r3, [r2, #0]
		GPIOA->CRL |=(1U<<0);
 8000340:	4b12      	ldr	r3, [pc, #72]	@ (800038c <tim2_pa0_output_cmp+0x98>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a11      	ldr	r2, [pc, #68]	@ (800038c <tim2_pa0_output_cmp+0x98>)
 8000346:	f043 0301 	orr.w	r3, r3, #1
 800034a:	6013      	str	r3, [r2, #0]
	//set prescaler value
	TIM2->PSC = 1600 - 1; //16 000 000/1600=10000
 800034c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000350:	f240 623f 	movw	r2, #1599	@ 0x63f
 8000354:	629a      	str	r2, [r3, #40]	@ 0x28
	//set auto reload value
	TIM2->ARR = 10000 - 1;//10000/10000=1
 8000356:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800035a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800035e:	62da      	str	r2, [r3, #44]	@ 0x2c

	 //set output compare toggle mode
	 TIM2->CCMR1 =OC_TOGGLE;
 8000360:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000364:	2230      	movs	r2, #48	@ 0x30
 8000366:	619a      	str	r2, [r3, #24]

	//enable tim2 ch1 in compare mode
	TIM2->CCER =CCER_CC1E;//BIT 0 FOR USING CHANNEL 1
 8000368:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800036c:	2201      	movs	r2, #1
 800036e:	621a      	str	r2, [r3, #32]
	 //clear counter
	TIM2->CNT =0;
 8000370:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000374:	2200      	movs	r2, #0
 8000376:	625a      	str	r2, [r3, #36]	@ 0x24

	//enable timer
	TIM2->CR1 = CR1_CEN;
 8000378:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800037c:	2201      	movs	r2, #1
 800037e:	601a      	str	r2, [r3, #0]
}
 8000380:	bf00      	nop
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr
 8000388:	40021000 	.word	0x40021000
 800038c:	40010800 	.word	0x40010800

08000390 <tim3_input_capture>:
void tim3_input_capture(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
	//enable clk access to tim2
	RCC->APB1ENR |= TIM3EN;
 8000394:	4b20      	ldr	r3, [pc, #128]	@ (8000418 <tim3_input_capture+0x88>)
 8000396:	69db      	ldr	r3, [r3, #28]
 8000398:	4a1f      	ldr	r2, [pc, #124]	@ (8000418 <tim3_input_capture+0x88>)
 800039a:	f043 0302 	orr.w	r3, r3, #2
 800039e:	61d3      	str	r3, [r2, #28]
	//enable clock acess to gpioa
	RCC->APB2ENR |= GPIOAEN;
 80003a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000418 <tim3_input_capture+0x88>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	4a1c      	ldr	r2, [pc, #112]	@ (8000418 <tim3_input_capture+0x88>)
 80003a6:	f043 0304 	orr.w	r3, r3, #4
 80003aa:	6193      	str	r3, [r2, #24]
	//enable alternate function clock
	RCC->APB2ENR |= AFIOEN;
 80003ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000418 <tim3_input_capture+0x88>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	4a19      	ldr	r2, [pc, #100]	@ (8000418 <tim3_input_capture+0x88>)
 80003b2:	f043 0301 	orr.w	r3, r3, #1
 80003b6:	6193      	str	r3, [r2, #24]
	//set pa6 alternate function to tim3ch1
	GPIOA->CRL |=(1U<<27);
 80003b8:	4b18      	ldr	r3, [pc, #96]	@ (800041c <tim3_input_capture+0x8c>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a17      	ldr	r2, [pc, #92]	@ (800041c <tim3_input_capture+0x8c>)
 80003be:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80003c2:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &=~(1U<<26);
 80003c4:	4b15      	ldr	r3, [pc, #84]	@ (800041c <tim3_input_capture+0x8c>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a14      	ldr	r2, [pc, #80]	@ (800041c <tim3_input_capture+0x8c>)
 80003ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80003ce:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &=~(1U<<25);
 80003d0:	4b12      	ldr	r3, [pc, #72]	@ (800041c <tim3_input_capture+0x8c>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a11      	ldr	r2, [pc, #68]	@ (800041c <tim3_input_capture+0x8c>)
 80003d6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80003da:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &=~(1U<<24);
 80003dc:	4b0f      	ldr	r3, [pc, #60]	@ (800041c <tim3_input_capture+0x8c>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a0e      	ldr	r2, [pc, #56]	@ (800041c <tim3_input_capture+0x8c>)
 80003e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80003e6:	6013      	str	r3, [r2, #0]
	//set prescaler value
	TIM3->PSC = 16000 - 1; //16 000 000/16000=1000
 80003e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000420 <tim3_input_capture+0x90>)
 80003ea:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80003ee:	629a      	str	r2, [r3, #40]	@ 0x28
	//set auto reload value
	TIM3->CCMR1 = CCER_CC1S;
 80003f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000420 <tim3_input_capture+0x90>)
 80003f2:	2201      	movs	r2, #1
 80003f4:	619a      	str	r2, [r3, #24]
    //set ch1 to capture at every edge
	//set ch1 to capture at rising edge
	TIM3->CCER |= CCER_CC1E;
 80003f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000420 <tim3_input_capture+0x90>)
 80003f8:	6a1b      	ldr	r3, [r3, #32]
 80003fa:	4a09      	ldr	r2, [pc, #36]	@ (8000420 <tim3_input_capture+0x90>)
 80003fc:	f043 0301 	orr.w	r3, r3, #1
 8000400:	6213      	str	r3, [r2, #32]

	//clear counter
	TIM2->CNT =0;
 8000402:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000406:	2200      	movs	r2, #0
 8000408:	625a      	str	r2, [r3, #36]	@ 0x24

	//enable timer
	TIM3->CR1 = CR1_CEN;
 800040a:	4b05      	ldr	r3, [pc, #20]	@ (8000420 <tim3_input_capture+0x90>)
 800040c:	2201      	movs	r2, #1
 800040e:	601a      	str	r2, [r3, #0]
}
 8000410:	bf00      	nop
 8000412:	46bd      	mov	sp, r7
 8000414:	bc80      	pop	{r7}
 8000416:	4770      	bx	lr
 8000418:	40021000 	.word	0x40021000
 800041c:	40010800 	.word	0x40010800
 8000420:	40000400 	.word	0x40000400

08000424 <compute_uart_bd>:
#define CR1_TE      (1U<<3)
#define CR1_UE      (1U<<13)
#define SR_TXE      (1U<<7)

static uint16_t compute_uart_bd(uint32_t periphclk, uint32_t baudrate)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]
    return (periphclk + (baudrate/2U)) / baudrate;
 800042e:	683b      	ldr	r3, [r7, #0]
 8000430:	085a      	lsrs	r2, r3, #1
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	441a      	add	r2, r3
 8000436:	683b      	ldr	r3, [r7, #0]
 8000438:	fbb2 f3f3 	udiv	r3, r2, r3
 800043c:	b29b      	uxth	r3, r3
}
 800043e:	4618      	mov	r0, r3
 8000440:	370c      	adds	r7, #12
 8000442:	46bd      	mov	sp, r7
 8000444:	bc80      	pop	{r7}
 8000446:	4770      	bx	lr

08000448 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t periphclk, uint32_t baudrate)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b084      	sub	sp, #16
 800044c:	af00      	add	r7, sp, #0
 800044e:	60f8      	str	r0, [r7, #12]
 8000450:	60b9      	str	r1, [r7, #8]
 8000452:	607a      	str	r2, [r7, #4]
    USARTx->BRR = compute_uart_bd(periphclk, baudrate);
 8000454:	6879      	ldr	r1, [r7, #4]
 8000456:	68b8      	ldr	r0, [r7, #8]
 8000458:	f7ff ffe4 	bl	8000424 <compute_uart_bd>
 800045c:	4603      	mov	r3, r0
 800045e:	461a      	mov	r2, r3
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	609a      	str	r2, [r3, #8]
}
 8000464:	bf00      	nop
 8000466:	3710      	adds	r7, #16
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}

0800046c <uart2_write>:

void uart2_write(int ch)
{
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
    // wait until transmit data register is empty
    while (!(USART2->SR & SR_TXE)) {}
 8000474:	bf00      	nop
 8000476:	4b07      	ldr	r3, [pc, #28]	@ (8000494 <uart2_write+0x28>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800047e:	2b00      	cmp	r3, #0
 8000480:	d0f9      	beq.n	8000476 <uart2_write+0xa>
    // write to data register
    USART2->DR = (ch & 0xFF);
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4a03      	ldr	r2, [pc, #12]	@ (8000494 <uart2_write+0x28>)
 8000486:	b2db      	uxtb	r3, r3
 8000488:	6053      	str	r3, [r2, #4]
}
 800048a:	bf00      	nop
 800048c:	370c      	adds	r7, #12
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr
 8000494:	40004400 	.word	0x40004400

08000498 <uart2_tx_init>:

void uart2_tx_init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
    /************* Configure UART GPIO pin ************/

    // Enable clock access to GPIOA & AFIO
    RCC->APB2ENR |= GPIOAEN;
 800049c:	4b1d      	ldr	r3, [pc, #116]	@ (8000514 <uart2_tx_init+0x7c>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	4a1c      	ldr	r2, [pc, #112]	@ (8000514 <uart2_tx_init+0x7c>)
 80004a2:	f043 0304 	orr.w	r3, r3, #4
 80004a6:	6193      	str	r3, [r2, #24]
    RCC->APB2ENR |= AFIOEN;
 80004a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000514 <uart2_tx_init+0x7c>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	4a19      	ldr	r2, [pc, #100]	@ (8000514 <uart2_tx_init+0x7c>)
 80004ae:	f043 0301 	orr.w	r3, r3, #1
 80004b2:	6193      	str	r3, [r2, #24]

    // Set PA2 to alternate function push-pull
    // PA2 is configured in CRL (bits [11:8])
    GPIOA->CRL |=  (1U << 8);   // MODE2_0 = 1
 80004b4:	4b18      	ldr	r3, [pc, #96]	@ (8000518 <uart2_tx_init+0x80>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a17      	ldr	r2, [pc, #92]	@ (8000518 <uart2_tx_init+0x80>)
 80004ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004be:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |=  (1U << 9);   // MODE2_1 = 1
 80004c0:	4b15      	ldr	r3, [pc, #84]	@ (8000518 <uart2_tx_init+0x80>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a14      	ldr	r2, [pc, #80]	@ (8000518 <uart2_tx_init+0x80>)
 80004c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80004ca:	6013      	str	r3, [r2, #0]
    // CNF2_0 = 0 → already cleared
    GPIOA->CRL |=  (1U << 11);
 80004cc:	4b12      	ldr	r3, [pc, #72]	@ (8000518 <uart2_tx_init+0x80>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a11      	ldr	r2, [pc, #68]	@ (8000518 <uart2_tx_init+0x80>)
 80004d2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80004d6:	6013      	str	r3, [r2, #0]
    GPIOA->CRL &=  ~(1U << 10);
 80004d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000518 <uart2_tx_init+0x80>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0e      	ldr	r2, [pc, #56]	@ (8000518 <uart2_tx_init+0x80>)
 80004de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80004e2:	6013      	str	r3, [r2, #0]
    // MODE2 = 11 (Output 50 MHz), CNF2 = 10 (AF push-pull)

    /************* Configure UART module ************/

    // Enable clock access to USART2
    RCC->APB1ENR |= UART2EN;
 80004e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000514 <uart2_tx_init+0x7c>)
 80004e6:	69db      	ldr	r3, [r3, #28]
 80004e8:	4a0a      	ldr	r2, [pc, #40]	@ (8000514 <uart2_tx_init+0x7c>)
 80004ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004ee:	61d3      	str	r3, [r2, #28]

    // Set baud rate
    uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 80004f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80004f4:	4909      	ldr	r1, [pc, #36]	@ (800051c <uart2_tx_init+0x84>)
 80004f6:	480a      	ldr	r0, [pc, #40]	@ (8000520 <uart2_tx_init+0x88>)
 80004f8:	f7ff ffa6 	bl	8000448 <uart_set_baudrate>

    // Configure transfer direction (transmitter only)
    USART2->CR1 = CR1_TE;
 80004fc:	4b08      	ldr	r3, [pc, #32]	@ (8000520 <uart2_tx_init+0x88>)
 80004fe:	2208      	movs	r2, #8
 8000500:	60da      	str	r2, [r3, #12]

    // Enable UART module
    USART2->CR1 |= CR1_UE;
 8000502:	4b07      	ldr	r3, [pc, #28]	@ (8000520 <uart2_tx_init+0x88>)
 8000504:	68db      	ldr	r3, [r3, #12]
 8000506:	4a06      	ldr	r2, [pc, #24]	@ (8000520 <uart2_tx_init+0x88>)
 8000508:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800050c:	60d3      	str	r3, [r2, #12]
}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	40021000 	.word	0x40021000
 8000518:	40010800 	.word	0x40010800
 800051c:	00f42400 	.word	0x00f42400
 8000520:	40004400 	.word	0x40004400

08000524 <__io_putchar>:

int __io_putchar(int ch)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
    uart2_write(ch);
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	f7ff ff9d 	bl	800046c <uart2_write>
    return ch;
 8000532:	687b      	ldr	r3, [r7, #4]
}
 8000534:	4618      	mov	r0, r3
 8000536:	3708      	adds	r7, #8
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}

0800053c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800053c:	480d      	ldr	r0, [pc, #52]	@ (8000574 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800053e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000540:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000544:	480c      	ldr	r0, [pc, #48]	@ (8000578 <LoopForever+0x6>)
  ldr r1, =_edata
 8000546:	490d      	ldr	r1, [pc, #52]	@ (800057c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000548:	4a0d      	ldr	r2, [pc, #52]	@ (8000580 <LoopForever+0xe>)
  movs r3, #0
 800054a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800054c:	e002      	b.n	8000554 <LoopCopyDataInit>

0800054e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800054e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000552:	3304      	adds	r3, #4

08000554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000558:	d3f9      	bcc.n	800054e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800055a:	4a0a      	ldr	r2, [pc, #40]	@ (8000584 <LoopForever+0x12>)
  ldr r4, =_ebss
 800055c:	4c0a      	ldr	r4, [pc, #40]	@ (8000588 <LoopForever+0x16>)
  movs r3, #0
 800055e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000560:	e001      	b.n	8000566 <LoopFillZerobss>

08000562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000564:	3204      	adds	r2, #4

08000566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000568:	d3fb      	bcc.n	8000562 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800056a:	f000 f97d 	bl	8000868 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800056e:	f7ff fdff 	bl	8000170 <main>

08000572 <LoopForever>:

LoopForever:
  b LoopForever
 8000572:	e7fe      	b.n	8000572 <LoopForever>
  ldr   r0, =_estack
 8000574:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000578:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800057c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000580:	08001460 	.word	0x08001460
  ldr r2, =_sbss
 8000584:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000588:	200001cc 	.word	0x200001cc

0800058c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800058c:	e7fe      	b.n	800058c <ADC1_2_IRQHandler>
	...

08000590 <std>:
 8000590:	2300      	movs	r3, #0
 8000592:	b510      	push	{r4, lr}
 8000594:	4604      	mov	r4, r0
 8000596:	e9c0 3300 	strd	r3, r3, [r0]
 800059a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800059e:	6083      	str	r3, [r0, #8]
 80005a0:	8181      	strh	r1, [r0, #12]
 80005a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80005a4:	81c2      	strh	r2, [r0, #14]
 80005a6:	6183      	str	r3, [r0, #24]
 80005a8:	4619      	mov	r1, r3
 80005aa:	2208      	movs	r2, #8
 80005ac:	305c      	adds	r0, #92	@ 0x5c
 80005ae:	f000 f906 	bl	80007be <memset>
 80005b2:	4b0d      	ldr	r3, [pc, #52]	@ (80005e8 <std+0x58>)
 80005b4:	6224      	str	r4, [r4, #32]
 80005b6:	6263      	str	r3, [r4, #36]	@ 0x24
 80005b8:	4b0c      	ldr	r3, [pc, #48]	@ (80005ec <std+0x5c>)
 80005ba:	62a3      	str	r3, [r4, #40]	@ 0x28
 80005bc:	4b0c      	ldr	r3, [pc, #48]	@ (80005f0 <std+0x60>)
 80005be:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80005c0:	4b0c      	ldr	r3, [pc, #48]	@ (80005f4 <std+0x64>)
 80005c2:	6323      	str	r3, [r4, #48]	@ 0x30
 80005c4:	4b0c      	ldr	r3, [pc, #48]	@ (80005f8 <std+0x68>)
 80005c6:	429c      	cmp	r4, r3
 80005c8:	d006      	beq.n	80005d8 <std+0x48>
 80005ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80005ce:	4294      	cmp	r4, r2
 80005d0:	d002      	beq.n	80005d8 <std+0x48>
 80005d2:	33d0      	adds	r3, #208	@ 0xd0
 80005d4:	429c      	cmp	r4, r3
 80005d6:	d105      	bne.n	80005e4 <std+0x54>
 80005d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80005dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005e0:	f000 b966 	b.w	80008b0 <__retarget_lock_init_recursive>
 80005e4:	bd10      	pop	{r4, pc}
 80005e6:	bf00      	nop
 80005e8:	08000739 	.word	0x08000739
 80005ec:	0800075b 	.word	0x0800075b
 80005f0:	08000793 	.word	0x08000793
 80005f4:	080007b7 	.word	0x080007b7
 80005f8:	20000080 	.word	0x20000080

080005fc <stdio_exit_handler>:
 80005fc:	4a02      	ldr	r2, [pc, #8]	@ (8000608 <stdio_exit_handler+0xc>)
 80005fe:	4903      	ldr	r1, [pc, #12]	@ (800060c <stdio_exit_handler+0x10>)
 8000600:	4803      	ldr	r0, [pc, #12]	@ (8000610 <stdio_exit_handler+0x14>)
 8000602:	f000 b869 	b.w	80006d8 <_fwalk_sglue>
 8000606:	bf00      	nop
 8000608:	20000000 	.word	0x20000000
 800060c:	08001145 	.word	0x08001145
 8000610:	20000010 	.word	0x20000010

08000614 <cleanup_stdio>:
 8000614:	6841      	ldr	r1, [r0, #4]
 8000616:	4b0c      	ldr	r3, [pc, #48]	@ (8000648 <cleanup_stdio+0x34>)
 8000618:	b510      	push	{r4, lr}
 800061a:	4299      	cmp	r1, r3
 800061c:	4604      	mov	r4, r0
 800061e:	d001      	beq.n	8000624 <cleanup_stdio+0x10>
 8000620:	f000 fd90 	bl	8001144 <_fflush_r>
 8000624:	68a1      	ldr	r1, [r4, #8]
 8000626:	4b09      	ldr	r3, [pc, #36]	@ (800064c <cleanup_stdio+0x38>)
 8000628:	4299      	cmp	r1, r3
 800062a:	d002      	beq.n	8000632 <cleanup_stdio+0x1e>
 800062c:	4620      	mov	r0, r4
 800062e:	f000 fd89 	bl	8001144 <_fflush_r>
 8000632:	68e1      	ldr	r1, [r4, #12]
 8000634:	4b06      	ldr	r3, [pc, #24]	@ (8000650 <cleanup_stdio+0x3c>)
 8000636:	4299      	cmp	r1, r3
 8000638:	d004      	beq.n	8000644 <cleanup_stdio+0x30>
 800063a:	4620      	mov	r0, r4
 800063c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000640:	f000 bd80 	b.w	8001144 <_fflush_r>
 8000644:	bd10      	pop	{r4, pc}
 8000646:	bf00      	nop
 8000648:	20000080 	.word	0x20000080
 800064c:	200000e8 	.word	0x200000e8
 8000650:	20000150 	.word	0x20000150

08000654 <global_stdio_init.part.0>:
 8000654:	b510      	push	{r4, lr}
 8000656:	4b0b      	ldr	r3, [pc, #44]	@ (8000684 <global_stdio_init.part.0+0x30>)
 8000658:	4c0b      	ldr	r4, [pc, #44]	@ (8000688 <global_stdio_init.part.0+0x34>)
 800065a:	4a0c      	ldr	r2, [pc, #48]	@ (800068c <global_stdio_init.part.0+0x38>)
 800065c:	4620      	mov	r0, r4
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	2104      	movs	r1, #4
 8000662:	2200      	movs	r2, #0
 8000664:	f7ff ff94 	bl	8000590 <std>
 8000668:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800066c:	2201      	movs	r2, #1
 800066e:	2109      	movs	r1, #9
 8000670:	f7ff ff8e 	bl	8000590 <std>
 8000674:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000678:	2202      	movs	r2, #2
 800067a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800067e:	2112      	movs	r1, #18
 8000680:	f7ff bf86 	b.w	8000590 <std>
 8000684:	200001b8 	.word	0x200001b8
 8000688:	20000080 	.word	0x20000080
 800068c:	080005fd 	.word	0x080005fd

08000690 <__sfp_lock_acquire>:
 8000690:	4801      	ldr	r0, [pc, #4]	@ (8000698 <__sfp_lock_acquire+0x8>)
 8000692:	f000 b90e 	b.w	80008b2 <__retarget_lock_acquire_recursive>
 8000696:	bf00      	nop
 8000698:	200001c1 	.word	0x200001c1

0800069c <__sfp_lock_release>:
 800069c:	4801      	ldr	r0, [pc, #4]	@ (80006a4 <__sfp_lock_release+0x8>)
 800069e:	f000 b909 	b.w	80008b4 <__retarget_lock_release_recursive>
 80006a2:	bf00      	nop
 80006a4:	200001c1 	.word	0x200001c1

080006a8 <__sinit>:
 80006a8:	b510      	push	{r4, lr}
 80006aa:	4604      	mov	r4, r0
 80006ac:	f7ff fff0 	bl	8000690 <__sfp_lock_acquire>
 80006b0:	6a23      	ldr	r3, [r4, #32]
 80006b2:	b11b      	cbz	r3, 80006bc <__sinit+0x14>
 80006b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006b8:	f7ff bff0 	b.w	800069c <__sfp_lock_release>
 80006bc:	4b04      	ldr	r3, [pc, #16]	@ (80006d0 <__sinit+0x28>)
 80006be:	6223      	str	r3, [r4, #32]
 80006c0:	4b04      	ldr	r3, [pc, #16]	@ (80006d4 <__sinit+0x2c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d1f5      	bne.n	80006b4 <__sinit+0xc>
 80006c8:	f7ff ffc4 	bl	8000654 <global_stdio_init.part.0>
 80006cc:	e7f2      	b.n	80006b4 <__sinit+0xc>
 80006ce:	bf00      	nop
 80006d0:	08000615 	.word	0x08000615
 80006d4:	200001b8 	.word	0x200001b8

080006d8 <_fwalk_sglue>:
 80006d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80006dc:	4607      	mov	r7, r0
 80006de:	4688      	mov	r8, r1
 80006e0:	4614      	mov	r4, r2
 80006e2:	2600      	movs	r6, #0
 80006e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80006e8:	f1b9 0901 	subs.w	r9, r9, #1
 80006ec:	d505      	bpl.n	80006fa <_fwalk_sglue+0x22>
 80006ee:	6824      	ldr	r4, [r4, #0]
 80006f0:	2c00      	cmp	r4, #0
 80006f2:	d1f7      	bne.n	80006e4 <_fwalk_sglue+0xc>
 80006f4:	4630      	mov	r0, r6
 80006f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80006fa:	89ab      	ldrh	r3, [r5, #12]
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d907      	bls.n	8000710 <_fwalk_sglue+0x38>
 8000700:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000704:	3301      	adds	r3, #1
 8000706:	d003      	beq.n	8000710 <_fwalk_sglue+0x38>
 8000708:	4629      	mov	r1, r5
 800070a:	4638      	mov	r0, r7
 800070c:	47c0      	blx	r8
 800070e:	4306      	orrs	r6, r0
 8000710:	3568      	adds	r5, #104	@ 0x68
 8000712:	e7e9      	b.n	80006e8 <_fwalk_sglue+0x10>

08000714 <iprintf>:
 8000714:	b40f      	push	{r0, r1, r2, r3}
 8000716:	b507      	push	{r0, r1, r2, lr}
 8000718:	4906      	ldr	r1, [pc, #24]	@ (8000734 <iprintf+0x20>)
 800071a:	ab04      	add	r3, sp, #16
 800071c:	6808      	ldr	r0, [r1, #0]
 800071e:	f853 2b04 	ldr.w	r2, [r3], #4
 8000722:	6881      	ldr	r1, [r0, #8]
 8000724:	9301      	str	r3, [sp, #4]
 8000726:	f000 f9e5 	bl	8000af4 <_vfiprintf_r>
 800072a:	b003      	add	sp, #12
 800072c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000730:	b004      	add	sp, #16
 8000732:	4770      	bx	lr
 8000734:	2000000c 	.word	0x2000000c

08000738 <__sread>:
 8000738:	b510      	push	{r4, lr}
 800073a:	460c      	mov	r4, r1
 800073c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000740:	f000 f868 	bl	8000814 <_read_r>
 8000744:	2800      	cmp	r0, #0
 8000746:	bfab      	itete	ge
 8000748:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800074a:	89a3      	ldrhlt	r3, [r4, #12]
 800074c:	181b      	addge	r3, r3, r0
 800074e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000752:	bfac      	ite	ge
 8000754:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000756:	81a3      	strhlt	r3, [r4, #12]
 8000758:	bd10      	pop	{r4, pc}

0800075a <__swrite>:
 800075a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800075e:	461f      	mov	r7, r3
 8000760:	898b      	ldrh	r3, [r1, #12]
 8000762:	4605      	mov	r5, r0
 8000764:	05db      	lsls	r3, r3, #23
 8000766:	460c      	mov	r4, r1
 8000768:	4616      	mov	r6, r2
 800076a:	d505      	bpl.n	8000778 <__swrite+0x1e>
 800076c:	2302      	movs	r3, #2
 800076e:	2200      	movs	r2, #0
 8000770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000774:	f000 f83c 	bl	80007f0 <_lseek_r>
 8000778:	89a3      	ldrh	r3, [r4, #12]
 800077a:	4632      	mov	r2, r6
 800077c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000780:	81a3      	strh	r3, [r4, #12]
 8000782:	4628      	mov	r0, r5
 8000784:	463b      	mov	r3, r7
 8000786:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800078a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800078e:	f000 b853 	b.w	8000838 <_write_r>

08000792 <__sseek>:
 8000792:	b510      	push	{r4, lr}
 8000794:	460c      	mov	r4, r1
 8000796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800079a:	f000 f829 	bl	80007f0 <_lseek_r>
 800079e:	1c43      	adds	r3, r0, #1
 80007a0:	89a3      	ldrh	r3, [r4, #12]
 80007a2:	bf15      	itete	ne
 80007a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80007a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80007aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80007ae:	81a3      	strheq	r3, [r4, #12]
 80007b0:	bf18      	it	ne
 80007b2:	81a3      	strhne	r3, [r4, #12]
 80007b4:	bd10      	pop	{r4, pc}

080007b6 <__sclose>:
 80007b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007ba:	f000 b809 	b.w	80007d0 <_close_r>

080007be <memset>:
 80007be:	4603      	mov	r3, r0
 80007c0:	4402      	add	r2, r0
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d100      	bne.n	80007c8 <memset+0xa>
 80007c6:	4770      	bx	lr
 80007c8:	f803 1b01 	strb.w	r1, [r3], #1
 80007cc:	e7f9      	b.n	80007c2 <memset+0x4>
	...

080007d0 <_close_r>:
 80007d0:	b538      	push	{r3, r4, r5, lr}
 80007d2:	2300      	movs	r3, #0
 80007d4:	4d05      	ldr	r5, [pc, #20]	@ (80007ec <_close_r+0x1c>)
 80007d6:	4604      	mov	r4, r0
 80007d8:	4608      	mov	r0, r1
 80007da:	602b      	str	r3, [r5, #0]
 80007dc:	f7ff fd23 	bl	8000226 <_close>
 80007e0:	1c43      	adds	r3, r0, #1
 80007e2:	d102      	bne.n	80007ea <_close_r+0x1a>
 80007e4:	682b      	ldr	r3, [r5, #0]
 80007e6:	b103      	cbz	r3, 80007ea <_close_r+0x1a>
 80007e8:	6023      	str	r3, [r4, #0]
 80007ea:	bd38      	pop	{r3, r4, r5, pc}
 80007ec:	200001bc 	.word	0x200001bc

080007f0 <_lseek_r>:
 80007f0:	b538      	push	{r3, r4, r5, lr}
 80007f2:	4604      	mov	r4, r0
 80007f4:	4608      	mov	r0, r1
 80007f6:	4611      	mov	r1, r2
 80007f8:	2200      	movs	r2, #0
 80007fa:	4d05      	ldr	r5, [pc, #20]	@ (8000810 <_lseek_r+0x20>)
 80007fc:	602a      	str	r2, [r5, #0]
 80007fe:	461a      	mov	r2, r3
 8000800:	f7ff fd35 	bl	800026e <_lseek>
 8000804:	1c43      	adds	r3, r0, #1
 8000806:	d102      	bne.n	800080e <_lseek_r+0x1e>
 8000808:	682b      	ldr	r3, [r5, #0]
 800080a:	b103      	cbz	r3, 800080e <_lseek_r+0x1e>
 800080c:	6023      	str	r3, [r4, #0]
 800080e:	bd38      	pop	{r3, r4, r5, pc}
 8000810:	200001bc 	.word	0x200001bc

08000814 <_read_r>:
 8000814:	b538      	push	{r3, r4, r5, lr}
 8000816:	4604      	mov	r4, r0
 8000818:	4608      	mov	r0, r1
 800081a:	4611      	mov	r1, r2
 800081c:	2200      	movs	r2, #0
 800081e:	4d05      	ldr	r5, [pc, #20]	@ (8000834 <_read_r+0x20>)
 8000820:	602a      	str	r2, [r5, #0]
 8000822:	461a      	mov	r2, r3
 8000824:	f7ff fcc6 	bl	80001b4 <_read>
 8000828:	1c43      	adds	r3, r0, #1
 800082a:	d102      	bne.n	8000832 <_read_r+0x1e>
 800082c:	682b      	ldr	r3, [r5, #0]
 800082e:	b103      	cbz	r3, 8000832 <_read_r+0x1e>
 8000830:	6023      	str	r3, [r4, #0]
 8000832:	bd38      	pop	{r3, r4, r5, pc}
 8000834:	200001bc 	.word	0x200001bc

08000838 <_write_r>:
 8000838:	b538      	push	{r3, r4, r5, lr}
 800083a:	4604      	mov	r4, r0
 800083c:	4608      	mov	r0, r1
 800083e:	4611      	mov	r1, r2
 8000840:	2200      	movs	r2, #0
 8000842:	4d05      	ldr	r5, [pc, #20]	@ (8000858 <_write_r+0x20>)
 8000844:	602a      	str	r2, [r5, #0]
 8000846:	461a      	mov	r2, r3
 8000848:	f7ff fcd1 	bl	80001ee <_write>
 800084c:	1c43      	adds	r3, r0, #1
 800084e:	d102      	bne.n	8000856 <_write_r+0x1e>
 8000850:	682b      	ldr	r3, [r5, #0]
 8000852:	b103      	cbz	r3, 8000856 <_write_r+0x1e>
 8000854:	6023      	str	r3, [r4, #0]
 8000856:	bd38      	pop	{r3, r4, r5, pc}
 8000858:	200001bc 	.word	0x200001bc

0800085c <__errno>:
 800085c:	4b01      	ldr	r3, [pc, #4]	@ (8000864 <__errno+0x8>)
 800085e:	6818      	ldr	r0, [r3, #0]
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	2000000c 	.word	0x2000000c

08000868 <__libc_init_array>:
 8000868:	b570      	push	{r4, r5, r6, lr}
 800086a:	2600      	movs	r6, #0
 800086c:	4d0c      	ldr	r5, [pc, #48]	@ (80008a0 <__libc_init_array+0x38>)
 800086e:	4c0d      	ldr	r4, [pc, #52]	@ (80008a4 <__libc_init_array+0x3c>)
 8000870:	1b64      	subs	r4, r4, r5
 8000872:	10a4      	asrs	r4, r4, #2
 8000874:	42a6      	cmp	r6, r4
 8000876:	d109      	bne.n	800088c <__libc_init_array+0x24>
 8000878:	f000 fdc2 	bl	8001400 <_init>
 800087c:	2600      	movs	r6, #0
 800087e:	4d0a      	ldr	r5, [pc, #40]	@ (80008a8 <__libc_init_array+0x40>)
 8000880:	4c0a      	ldr	r4, [pc, #40]	@ (80008ac <__libc_init_array+0x44>)
 8000882:	1b64      	subs	r4, r4, r5
 8000884:	10a4      	asrs	r4, r4, #2
 8000886:	42a6      	cmp	r6, r4
 8000888:	d105      	bne.n	8000896 <__libc_init_array+0x2e>
 800088a:	bd70      	pop	{r4, r5, r6, pc}
 800088c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000890:	4798      	blx	r3
 8000892:	3601      	adds	r6, #1
 8000894:	e7ee      	b.n	8000874 <__libc_init_array+0xc>
 8000896:	f855 3b04 	ldr.w	r3, [r5], #4
 800089a:	4798      	blx	r3
 800089c:	3601      	adds	r6, #1
 800089e:	e7f2      	b.n	8000886 <__libc_init_array+0x1e>
 80008a0:	08001458 	.word	0x08001458
 80008a4:	08001458 	.word	0x08001458
 80008a8:	08001458 	.word	0x08001458
 80008ac:	0800145c 	.word	0x0800145c

080008b0 <__retarget_lock_init_recursive>:
 80008b0:	4770      	bx	lr

080008b2 <__retarget_lock_acquire_recursive>:
 80008b2:	4770      	bx	lr

080008b4 <__retarget_lock_release_recursive>:
 80008b4:	4770      	bx	lr
	...

080008b8 <_free_r>:
 80008b8:	b538      	push	{r3, r4, r5, lr}
 80008ba:	4605      	mov	r5, r0
 80008bc:	2900      	cmp	r1, #0
 80008be:	d040      	beq.n	8000942 <_free_r+0x8a>
 80008c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80008c4:	1f0c      	subs	r4, r1, #4
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	bfb8      	it	lt
 80008ca:	18e4      	addlt	r4, r4, r3
 80008cc:	f000 f8de 	bl	8000a8c <__malloc_lock>
 80008d0:	4a1c      	ldr	r2, [pc, #112]	@ (8000944 <_free_r+0x8c>)
 80008d2:	6813      	ldr	r3, [r2, #0]
 80008d4:	b933      	cbnz	r3, 80008e4 <_free_r+0x2c>
 80008d6:	6063      	str	r3, [r4, #4]
 80008d8:	6014      	str	r4, [r2, #0]
 80008da:	4628      	mov	r0, r5
 80008dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80008e0:	f000 b8da 	b.w	8000a98 <__malloc_unlock>
 80008e4:	42a3      	cmp	r3, r4
 80008e6:	d908      	bls.n	80008fa <_free_r+0x42>
 80008e8:	6820      	ldr	r0, [r4, #0]
 80008ea:	1821      	adds	r1, r4, r0
 80008ec:	428b      	cmp	r3, r1
 80008ee:	bf01      	itttt	eq
 80008f0:	6819      	ldreq	r1, [r3, #0]
 80008f2:	685b      	ldreq	r3, [r3, #4]
 80008f4:	1809      	addeq	r1, r1, r0
 80008f6:	6021      	streq	r1, [r4, #0]
 80008f8:	e7ed      	b.n	80008d6 <_free_r+0x1e>
 80008fa:	461a      	mov	r2, r3
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	b10b      	cbz	r3, 8000904 <_free_r+0x4c>
 8000900:	42a3      	cmp	r3, r4
 8000902:	d9fa      	bls.n	80008fa <_free_r+0x42>
 8000904:	6811      	ldr	r1, [r2, #0]
 8000906:	1850      	adds	r0, r2, r1
 8000908:	42a0      	cmp	r0, r4
 800090a:	d10b      	bne.n	8000924 <_free_r+0x6c>
 800090c:	6820      	ldr	r0, [r4, #0]
 800090e:	4401      	add	r1, r0
 8000910:	1850      	adds	r0, r2, r1
 8000912:	4283      	cmp	r3, r0
 8000914:	6011      	str	r1, [r2, #0]
 8000916:	d1e0      	bne.n	80008da <_free_r+0x22>
 8000918:	6818      	ldr	r0, [r3, #0]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	4408      	add	r0, r1
 800091e:	6010      	str	r0, [r2, #0]
 8000920:	6053      	str	r3, [r2, #4]
 8000922:	e7da      	b.n	80008da <_free_r+0x22>
 8000924:	d902      	bls.n	800092c <_free_r+0x74>
 8000926:	230c      	movs	r3, #12
 8000928:	602b      	str	r3, [r5, #0]
 800092a:	e7d6      	b.n	80008da <_free_r+0x22>
 800092c:	6820      	ldr	r0, [r4, #0]
 800092e:	1821      	adds	r1, r4, r0
 8000930:	428b      	cmp	r3, r1
 8000932:	bf01      	itttt	eq
 8000934:	6819      	ldreq	r1, [r3, #0]
 8000936:	685b      	ldreq	r3, [r3, #4]
 8000938:	1809      	addeq	r1, r1, r0
 800093a:	6021      	streq	r1, [r4, #0]
 800093c:	6063      	str	r3, [r4, #4]
 800093e:	6054      	str	r4, [r2, #4]
 8000940:	e7cb      	b.n	80008da <_free_r+0x22>
 8000942:	bd38      	pop	{r3, r4, r5, pc}
 8000944:	200001c8 	.word	0x200001c8

08000948 <sbrk_aligned>:
 8000948:	b570      	push	{r4, r5, r6, lr}
 800094a:	4e0f      	ldr	r6, [pc, #60]	@ (8000988 <sbrk_aligned+0x40>)
 800094c:	460c      	mov	r4, r1
 800094e:	6831      	ldr	r1, [r6, #0]
 8000950:	4605      	mov	r5, r0
 8000952:	b911      	cbnz	r1, 800095a <sbrk_aligned+0x12>
 8000954:	f000 fcb2 	bl	80012bc <_sbrk_r>
 8000958:	6030      	str	r0, [r6, #0]
 800095a:	4621      	mov	r1, r4
 800095c:	4628      	mov	r0, r5
 800095e:	f000 fcad 	bl	80012bc <_sbrk_r>
 8000962:	1c43      	adds	r3, r0, #1
 8000964:	d103      	bne.n	800096e <sbrk_aligned+0x26>
 8000966:	f04f 34ff 	mov.w	r4, #4294967295
 800096a:	4620      	mov	r0, r4
 800096c:	bd70      	pop	{r4, r5, r6, pc}
 800096e:	1cc4      	adds	r4, r0, #3
 8000970:	f024 0403 	bic.w	r4, r4, #3
 8000974:	42a0      	cmp	r0, r4
 8000976:	d0f8      	beq.n	800096a <sbrk_aligned+0x22>
 8000978:	1a21      	subs	r1, r4, r0
 800097a:	4628      	mov	r0, r5
 800097c:	f000 fc9e 	bl	80012bc <_sbrk_r>
 8000980:	3001      	adds	r0, #1
 8000982:	d1f2      	bne.n	800096a <sbrk_aligned+0x22>
 8000984:	e7ef      	b.n	8000966 <sbrk_aligned+0x1e>
 8000986:	bf00      	nop
 8000988:	200001c4 	.word	0x200001c4

0800098c <_malloc_r>:
 800098c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000990:	1ccd      	adds	r5, r1, #3
 8000992:	f025 0503 	bic.w	r5, r5, #3
 8000996:	3508      	adds	r5, #8
 8000998:	2d0c      	cmp	r5, #12
 800099a:	bf38      	it	cc
 800099c:	250c      	movcc	r5, #12
 800099e:	2d00      	cmp	r5, #0
 80009a0:	4606      	mov	r6, r0
 80009a2:	db01      	blt.n	80009a8 <_malloc_r+0x1c>
 80009a4:	42a9      	cmp	r1, r5
 80009a6:	d904      	bls.n	80009b2 <_malloc_r+0x26>
 80009a8:	230c      	movs	r3, #12
 80009aa:	6033      	str	r3, [r6, #0]
 80009ac:	2000      	movs	r0, #0
 80009ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80009b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000a88 <_malloc_r+0xfc>
 80009b6:	f000 f869 	bl	8000a8c <__malloc_lock>
 80009ba:	f8d8 3000 	ldr.w	r3, [r8]
 80009be:	461c      	mov	r4, r3
 80009c0:	bb44      	cbnz	r4, 8000a14 <_malloc_r+0x88>
 80009c2:	4629      	mov	r1, r5
 80009c4:	4630      	mov	r0, r6
 80009c6:	f7ff ffbf 	bl	8000948 <sbrk_aligned>
 80009ca:	1c43      	adds	r3, r0, #1
 80009cc:	4604      	mov	r4, r0
 80009ce:	d158      	bne.n	8000a82 <_malloc_r+0xf6>
 80009d0:	f8d8 4000 	ldr.w	r4, [r8]
 80009d4:	4627      	mov	r7, r4
 80009d6:	2f00      	cmp	r7, #0
 80009d8:	d143      	bne.n	8000a62 <_malloc_r+0xd6>
 80009da:	2c00      	cmp	r4, #0
 80009dc:	d04b      	beq.n	8000a76 <_malloc_r+0xea>
 80009de:	6823      	ldr	r3, [r4, #0]
 80009e0:	4639      	mov	r1, r7
 80009e2:	4630      	mov	r0, r6
 80009e4:	eb04 0903 	add.w	r9, r4, r3
 80009e8:	f000 fc68 	bl	80012bc <_sbrk_r>
 80009ec:	4581      	cmp	r9, r0
 80009ee:	d142      	bne.n	8000a76 <_malloc_r+0xea>
 80009f0:	6821      	ldr	r1, [r4, #0]
 80009f2:	4630      	mov	r0, r6
 80009f4:	1a6d      	subs	r5, r5, r1
 80009f6:	4629      	mov	r1, r5
 80009f8:	f7ff ffa6 	bl	8000948 <sbrk_aligned>
 80009fc:	3001      	adds	r0, #1
 80009fe:	d03a      	beq.n	8000a76 <_malloc_r+0xea>
 8000a00:	6823      	ldr	r3, [r4, #0]
 8000a02:	442b      	add	r3, r5
 8000a04:	6023      	str	r3, [r4, #0]
 8000a06:	f8d8 3000 	ldr.w	r3, [r8]
 8000a0a:	685a      	ldr	r2, [r3, #4]
 8000a0c:	bb62      	cbnz	r2, 8000a68 <_malloc_r+0xdc>
 8000a0e:	f8c8 7000 	str.w	r7, [r8]
 8000a12:	e00f      	b.n	8000a34 <_malloc_r+0xa8>
 8000a14:	6822      	ldr	r2, [r4, #0]
 8000a16:	1b52      	subs	r2, r2, r5
 8000a18:	d420      	bmi.n	8000a5c <_malloc_r+0xd0>
 8000a1a:	2a0b      	cmp	r2, #11
 8000a1c:	d917      	bls.n	8000a4e <_malloc_r+0xc2>
 8000a1e:	1961      	adds	r1, r4, r5
 8000a20:	42a3      	cmp	r3, r4
 8000a22:	6025      	str	r5, [r4, #0]
 8000a24:	bf18      	it	ne
 8000a26:	6059      	strne	r1, [r3, #4]
 8000a28:	6863      	ldr	r3, [r4, #4]
 8000a2a:	bf08      	it	eq
 8000a2c:	f8c8 1000 	streq.w	r1, [r8]
 8000a30:	5162      	str	r2, [r4, r5]
 8000a32:	604b      	str	r3, [r1, #4]
 8000a34:	4630      	mov	r0, r6
 8000a36:	f000 f82f 	bl	8000a98 <__malloc_unlock>
 8000a3a:	f104 000b 	add.w	r0, r4, #11
 8000a3e:	1d23      	adds	r3, r4, #4
 8000a40:	f020 0007 	bic.w	r0, r0, #7
 8000a44:	1ac2      	subs	r2, r0, r3
 8000a46:	bf1c      	itt	ne
 8000a48:	1a1b      	subne	r3, r3, r0
 8000a4a:	50a3      	strne	r3, [r4, r2]
 8000a4c:	e7af      	b.n	80009ae <_malloc_r+0x22>
 8000a4e:	6862      	ldr	r2, [r4, #4]
 8000a50:	42a3      	cmp	r3, r4
 8000a52:	bf0c      	ite	eq
 8000a54:	f8c8 2000 	streq.w	r2, [r8]
 8000a58:	605a      	strne	r2, [r3, #4]
 8000a5a:	e7eb      	b.n	8000a34 <_malloc_r+0xa8>
 8000a5c:	4623      	mov	r3, r4
 8000a5e:	6864      	ldr	r4, [r4, #4]
 8000a60:	e7ae      	b.n	80009c0 <_malloc_r+0x34>
 8000a62:	463c      	mov	r4, r7
 8000a64:	687f      	ldr	r7, [r7, #4]
 8000a66:	e7b6      	b.n	80009d6 <_malloc_r+0x4a>
 8000a68:	461a      	mov	r2, r3
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	42a3      	cmp	r3, r4
 8000a6e:	d1fb      	bne.n	8000a68 <_malloc_r+0xdc>
 8000a70:	2300      	movs	r3, #0
 8000a72:	6053      	str	r3, [r2, #4]
 8000a74:	e7de      	b.n	8000a34 <_malloc_r+0xa8>
 8000a76:	230c      	movs	r3, #12
 8000a78:	4630      	mov	r0, r6
 8000a7a:	6033      	str	r3, [r6, #0]
 8000a7c:	f000 f80c 	bl	8000a98 <__malloc_unlock>
 8000a80:	e794      	b.n	80009ac <_malloc_r+0x20>
 8000a82:	6005      	str	r5, [r0, #0]
 8000a84:	e7d6      	b.n	8000a34 <_malloc_r+0xa8>
 8000a86:	bf00      	nop
 8000a88:	200001c8 	.word	0x200001c8

08000a8c <__malloc_lock>:
 8000a8c:	4801      	ldr	r0, [pc, #4]	@ (8000a94 <__malloc_lock+0x8>)
 8000a8e:	f7ff bf10 	b.w	80008b2 <__retarget_lock_acquire_recursive>
 8000a92:	bf00      	nop
 8000a94:	200001c0 	.word	0x200001c0

08000a98 <__malloc_unlock>:
 8000a98:	4801      	ldr	r0, [pc, #4]	@ (8000aa0 <__malloc_unlock+0x8>)
 8000a9a:	f7ff bf0b 	b.w	80008b4 <__retarget_lock_release_recursive>
 8000a9e:	bf00      	nop
 8000aa0:	200001c0 	.word	0x200001c0

08000aa4 <__sfputc_r>:
 8000aa4:	6893      	ldr	r3, [r2, #8]
 8000aa6:	b410      	push	{r4}
 8000aa8:	3b01      	subs	r3, #1
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	6093      	str	r3, [r2, #8]
 8000aae:	da07      	bge.n	8000ac0 <__sfputc_r+0x1c>
 8000ab0:	6994      	ldr	r4, [r2, #24]
 8000ab2:	42a3      	cmp	r3, r4
 8000ab4:	db01      	blt.n	8000aba <__sfputc_r+0x16>
 8000ab6:	290a      	cmp	r1, #10
 8000ab8:	d102      	bne.n	8000ac0 <__sfputc_r+0x1c>
 8000aba:	bc10      	pop	{r4}
 8000abc:	f000 bb6a 	b.w	8001194 <__swbuf_r>
 8000ac0:	6813      	ldr	r3, [r2, #0]
 8000ac2:	1c58      	adds	r0, r3, #1
 8000ac4:	6010      	str	r0, [r2, #0]
 8000ac6:	7019      	strb	r1, [r3, #0]
 8000ac8:	4608      	mov	r0, r1
 8000aca:	bc10      	pop	{r4}
 8000acc:	4770      	bx	lr

08000ace <__sfputs_r>:
 8000ace:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ad0:	4606      	mov	r6, r0
 8000ad2:	460f      	mov	r7, r1
 8000ad4:	4614      	mov	r4, r2
 8000ad6:	18d5      	adds	r5, r2, r3
 8000ad8:	42ac      	cmp	r4, r5
 8000ada:	d101      	bne.n	8000ae0 <__sfputs_r+0x12>
 8000adc:	2000      	movs	r0, #0
 8000ade:	e007      	b.n	8000af0 <__sfputs_r+0x22>
 8000ae0:	463a      	mov	r2, r7
 8000ae2:	4630      	mov	r0, r6
 8000ae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ae8:	f7ff ffdc 	bl	8000aa4 <__sfputc_r>
 8000aec:	1c43      	adds	r3, r0, #1
 8000aee:	d1f3      	bne.n	8000ad8 <__sfputs_r+0xa>
 8000af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000af4 <_vfiprintf_r>:
 8000af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000af8:	460d      	mov	r5, r1
 8000afa:	4614      	mov	r4, r2
 8000afc:	4698      	mov	r8, r3
 8000afe:	4606      	mov	r6, r0
 8000b00:	b09d      	sub	sp, #116	@ 0x74
 8000b02:	b118      	cbz	r0, 8000b0c <_vfiprintf_r+0x18>
 8000b04:	6a03      	ldr	r3, [r0, #32]
 8000b06:	b90b      	cbnz	r3, 8000b0c <_vfiprintf_r+0x18>
 8000b08:	f7ff fdce 	bl	80006a8 <__sinit>
 8000b0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000b0e:	07d9      	lsls	r1, r3, #31
 8000b10:	d405      	bmi.n	8000b1e <_vfiprintf_r+0x2a>
 8000b12:	89ab      	ldrh	r3, [r5, #12]
 8000b14:	059a      	lsls	r2, r3, #22
 8000b16:	d402      	bmi.n	8000b1e <_vfiprintf_r+0x2a>
 8000b18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000b1a:	f7ff feca 	bl	80008b2 <__retarget_lock_acquire_recursive>
 8000b1e:	89ab      	ldrh	r3, [r5, #12]
 8000b20:	071b      	lsls	r3, r3, #28
 8000b22:	d501      	bpl.n	8000b28 <_vfiprintf_r+0x34>
 8000b24:	692b      	ldr	r3, [r5, #16]
 8000b26:	b99b      	cbnz	r3, 8000b50 <_vfiprintf_r+0x5c>
 8000b28:	4629      	mov	r1, r5
 8000b2a:	4630      	mov	r0, r6
 8000b2c:	f000 fb70 	bl	8001210 <__swsetup_r>
 8000b30:	b170      	cbz	r0, 8000b50 <_vfiprintf_r+0x5c>
 8000b32:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000b34:	07dc      	lsls	r4, r3, #31
 8000b36:	d504      	bpl.n	8000b42 <_vfiprintf_r+0x4e>
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	b01d      	add	sp, #116	@ 0x74
 8000b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b42:	89ab      	ldrh	r3, [r5, #12]
 8000b44:	0598      	lsls	r0, r3, #22
 8000b46:	d4f7      	bmi.n	8000b38 <_vfiprintf_r+0x44>
 8000b48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000b4a:	f7ff feb3 	bl	80008b4 <__retarget_lock_release_recursive>
 8000b4e:	e7f3      	b.n	8000b38 <_vfiprintf_r+0x44>
 8000b50:	2300      	movs	r3, #0
 8000b52:	9309      	str	r3, [sp, #36]	@ 0x24
 8000b54:	2320      	movs	r3, #32
 8000b56:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000b5a:	2330      	movs	r3, #48	@ 0x30
 8000b5c:	f04f 0901 	mov.w	r9, #1
 8000b60:	f8cd 800c 	str.w	r8, [sp, #12]
 8000b64:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8000d10 <_vfiprintf_r+0x21c>
 8000b68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000b6c:	4623      	mov	r3, r4
 8000b6e:	469a      	mov	sl, r3
 8000b70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b74:	b10a      	cbz	r2, 8000b7a <_vfiprintf_r+0x86>
 8000b76:	2a25      	cmp	r2, #37	@ 0x25
 8000b78:	d1f9      	bne.n	8000b6e <_vfiprintf_r+0x7a>
 8000b7a:	ebba 0b04 	subs.w	fp, sl, r4
 8000b7e:	d00b      	beq.n	8000b98 <_vfiprintf_r+0xa4>
 8000b80:	465b      	mov	r3, fp
 8000b82:	4622      	mov	r2, r4
 8000b84:	4629      	mov	r1, r5
 8000b86:	4630      	mov	r0, r6
 8000b88:	f7ff ffa1 	bl	8000ace <__sfputs_r>
 8000b8c:	3001      	adds	r0, #1
 8000b8e:	f000 80a7 	beq.w	8000ce0 <_vfiprintf_r+0x1ec>
 8000b92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000b94:	445a      	add	r2, fp
 8000b96:	9209      	str	r2, [sp, #36]	@ 0x24
 8000b98:	f89a 3000 	ldrb.w	r3, [sl]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	f000 809f 	beq.w	8000ce0 <_vfiprintf_r+0x1ec>
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000bac:	f10a 0a01 	add.w	sl, sl, #1
 8000bb0:	9304      	str	r3, [sp, #16]
 8000bb2:	9307      	str	r3, [sp, #28]
 8000bb4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000bb8:	931a      	str	r3, [sp, #104]	@ 0x68
 8000bba:	4654      	mov	r4, sl
 8000bbc:	2205      	movs	r2, #5
 8000bbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000bc2:	4853      	ldr	r0, [pc, #332]	@ (8000d10 <_vfiprintf_r+0x21c>)
 8000bc4:	f000 fb8a 	bl	80012dc <memchr>
 8000bc8:	9a04      	ldr	r2, [sp, #16]
 8000bca:	b9d8      	cbnz	r0, 8000c04 <_vfiprintf_r+0x110>
 8000bcc:	06d1      	lsls	r1, r2, #27
 8000bce:	bf44      	itt	mi
 8000bd0:	2320      	movmi	r3, #32
 8000bd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000bd6:	0713      	lsls	r3, r2, #28
 8000bd8:	bf44      	itt	mi
 8000bda:	232b      	movmi	r3, #43	@ 0x2b
 8000bdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000be0:	f89a 3000 	ldrb.w	r3, [sl]
 8000be4:	2b2a      	cmp	r3, #42	@ 0x2a
 8000be6:	d015      	beq.n	8000c14 <_vfiprintf_r+0x120>
 8000be8:	4654      	mov	r4, sl
 8000bea:	2000      	movs	r0, #0
 8000bec:	f04f 0c0a 	mov.w	ip, #10
 8000bf0:	9a07      	ldr	r2, [sp, #28]
 8000bf2:	4621      	mov	r1, r4
 8000bf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000bf8:	3b30      	subs	r3, #48	@ 0x30
 8000bfa:	2b09      	cmp	r3, #9
 8000bfc:	d94b      	bls.n	8000c96 <_vfiprintf_r+0x1a2>
 8000bfe:	b1b0      	cbz	r0, 8000c2e <_vfiprintf_r+0x13a>
 8000c00:	9207      	str	r2, [sp, #28]
 8000c02:	e014      	b.n	8000c2e <_vfiprintf_r+0x13a>
 8000c04:	eba0 0308 	sub.w	r3, r0, r8
 8000c08:	fa09 f303 	lsl.w	r3, r9, r3
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	46a2      	mov	sl, r4
 8000c10:	9304      	str	r3, [sp, #16]
 8000c12:	e7d2      	b.n	8000bba <_vfiprintf_r+0xc6>
 8000c14:	9b03      	ldr	r3, [sp, #12]
 8000c16:	1d19      	adds	r1, r3, #4
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	9103      	str	r1, [sp, #12]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	bfbb      	ittet	lt
 8000c20:	425b      	neglt	r3, r3
 8000c22:	f042 0202 	orrlt.w	r2, r2, #2
 8000c26:	9307      	strge	r3, [sp, #28]
 8000c28:	9307      	strlt	r3, [sp, #28]
 8000c2a:	bfb8      	it	lt
 8000c2c:	9204      	strlt	r2, [sp, #16]
 8000c2e:	7823      	ldrb	r3, [r4, #0]
 8000c30:	2b2e      	cmp	r3, #46	@ 0x2e
 8000c32:	d10a      	bne.n	8000c4a <_vfiprintf_r+0x156>
 8000c34:	7863      	ldrb	r3, [r4, #1]
 8000c36:	2b2a      	cmp	r3, #42	@ 0x2a
 8000c38:	d132      	bne.n	8000ca0 <_vfiprintf_r+0x1ac>
 8000c3a:	9b03      	ldr	r3, [sp, #12]
 8000c3c:	3402      	adds	r4, #2
 8000c3e:	1d1a      	adds	r2, r3, #4
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	9203      	str	r2, [sp, #12]
 8000c44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000c48:	9305      	str	r3, [sp, #20]
 8000c4a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8000d14 <_vfiprintf_r+0x220>
 8000c4e:	2203      	movs	r2, #3
 8000c50:	4650      	mov	r0, sl
 8000c52:	7821      	ldrb	r1, [r4, #0]
 8000c54:	f000 fb42 	bl	80012dc <memchr>
 8000c58:	b138      	cbz	r0, 8000c6a <_vfiprintf_r+0x176>
 8000c5a:	2240      	movs	r2, #64	@ 0x40
 8000c5c:	9b04      	ldr	r3, [sp, #16]
 8000c5e:	eba0 000a 	sub.w	r0, r0, sl
 8000c62:	4082      	lsls	r2, r0
 8000c64:	4313      	orrs	r3, r2
 8000c66:	3401      	adds	r4, #1
 8000c68:	9304      	str	r3, [sp, #16]
 8000c6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c6e:	2206      	movs	r2, #6
 8000c70:	4829      	ldr	r0, [pc, #164]	@ (8000d18 <_vfiprintf_r+0x224>)
 8000c72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000c76:	f000 fb31 	bl	80012dc <memchr>
 8000c7a:	2800      	cmp	r0, #0
 8000c7c:	d03f      	beq.n	8000cfe <_vfiprintf_r+0x20a>
 8000c7e:	4b27      	ldr	r3, [pc, #156]	@ (8000d1c <_vfiprintf_r+0x228>)
 8000c80:	bb1b      	cbnz	r3, 8000cca <_vfiprintf_r+0x1d6>
 8000c82:	9b03      	ldr	r3, [sp, #12]
 8000c84:	3307      	adds	r3, #7
 8000c86:	f023 0307 	bic.w	r3, r3, #7
 8000c8a:	3308      	adds	r3, #8
 8000c8c:	9303      	str	r3, [sp, #12]
 8000c8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000c90:	443b      	add	r3, r7
 8000c92:	9309      	str	r3, [sp, #36]	@ 0x24
 8000c94:	e76a      	b.n	8000b6c <_vfiprintf_r+0x78>
 8000c96:	460c      	mov	r4, r1
 8000c98:	2001      	movs	r0, #1
 8000c9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8000c9e:	e7a8      	b.n	8000bf2 <_vfiprintf_r+0xfe>
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	f04f 0c0a 	mov.w	ip, #10
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	3401      	adds	r4, #1
 8000caa:	9305      	str	r3, [sp, #20]
 8000cac:	4620      	mov	r0, r4
 8000cae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000cb2:	3a30      	subs	r2, #48	@ 0x30
 8000cb4:	2a09      	cmp	r2, #9
 8000cb6:	d903      	bls.n	8000cc0 <_vfiprintf_r+0x1cc>
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d0c6      	beq.n	8000c4a <_vfiprintf_r+0x156>
 8000cbc:	9105      	str	r1, [sp, #20]
 8000cbe:	e7c4      	b.n	8000c4a <_vfiprintf_r+0x156>
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8000cc8:	e7f0      	b.n	8000cac <_vfiprintf_r+0x1b8>
 8000cca:	ab03      	add	r3, sp, #12
 8000ccc:	9300      	str	r3, [sp, #0]
 8000cce:	462a      	mov	r2, r5
 8000cd0:	4630      	mov	r0, r6
 8000cd2:	4b13      	ldr	r3, [pc, #76]	@ (8000d20 <_vfiprintf_r+0x22c>)
 8000cd4:	a904      	add	r1, sp, #16
 8000cd6:	f3af 8000 	nop.w
 8000cda:	4607      	mov	r7, r0
 8000cdc:	1c78      	adds	r0, r7, #1
 8000cde:	d1d6      	bne.n	8000c8e <_vfiprintf_r+0x19a>
 8000ce0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000ce2:	07d9      	lsls	r1, r3, #31
 8000ce4:	d405      	bmi.n	8000cf2 <_vfiprintf_r+0x1fe>
 8000ce6:	89ab      	ldrh	r3, [r5, #12]
 8000ce8:	059a      	lsls	r2, r3, #22
 8000cea:	d402      	bmi.n	8000cf2 <_vfiprintf_r+0x1fe>
 8000cec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000cee:	f7ff fde1 	bl	80008b4 <__retarget_lock_release_recursive>
 8000cf2:	89ab      	ldrh	r3, [r5, #12]
 8000cf4:	065b      	lsls	r3, r3, #25
 8000cf6:	f53f af1f 	bmi.w	8000b38 <_vfiprintf_r+0x44>
 8000cfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000cfc:	e71e      	b.n	8000b3c <_vfiprintf_r+0x48>
 8000cfe:	ab03      	add	r3, sp, #12
 8000d00:	9300      	str	r3, [sp, #0]
 8000d02:	462a      	mov	r2, r5
 8000d04:	4630      	mov	r0, r6
 8000d06:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <_vfiprintf_r+0x22c>)
 8000d08:	a904      	add	r1, sp, #16
 8000d0a:	f000 f87d 	bl	8000e08 <_printf_i>
 8000d0e:	e7e4      	b.n	8000cda <_vfiprintf_r+0x1e6>
 8000d10:	08001425 	.word	0x08001425
 8000d14:	0800142b 	.word	0x0800142b
 8000d18:	0800142f 	.word	0x0800142f
 8000d1c:	00000000 	.word	0x00000000
 8000d20:	08000acf 	.word	0x08000acf

08000d24 <_printf_common>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	4616      	mov	r6, r2
 8000d2a:	4698      	mov	r8, r3
 8000d2c:	688a      	ldr	r2, [r1, #8]
 8000d2e:	690b      	ldr	r3, [r1, #16]
 8000d30:	4607      	mov	r7, r0
 8000d32:	4293      	cmp	r3, r2
 8000d34:	bfb8      	it	lt
 8000d36:	4613      	movlt	r3, r2
 8000d38:	6033      	str	r3, [r6, #0]
 8000d3a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000d3e:	460c      	mov	r4, r1
 8000d40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000d44:	b10a      	cbz	r2, 8000d4a <_printf_common+0x26>
 8000d46:	3301      	adds	r3, #1
 8000d48:	6033      	str	r3, [r6, #0]
 8000d4a:	6823      	ldr	r3, [r4, #0]
 8000d4c:	0699      	lsls	r1, r3, #26
 8000d4e:	bf42      	ittt	mi
 8000d50:	6833      	ldrmi	r3, [r6, #0]
 8000d52:	3302      	addmi	r3, #2
 8000d54:	6033      	strmi	r3, [r6, #0]
 8000d56:	6825      	ldr	r5, [r4, #0]
 8000d58:	f015 0506 	ands.w	r5, r5, #6
 8000d5c:	d106      	bne.n	8000d6c <_printf_common+0x48>
 8000d5e:	f104 0a19 	add.w	sl, r4, #25
 8000d62:	68e3      	ldr	r3, [r4, #12]
 8000d64:	6832      	ldr	r2, [r6, #0]
 8000d66:	1a9b      	subs	r3, r3, r2
 8000d68:	42ab      	cmp	r3, r5
 8000d6a:	dc2b      	bgt.n	8000dc4 <_printf_common+0xa0>
 8000d6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000d70:	6822      	ldr	r2, [r4, #0]
 8000d72:	3b00      	subs	r3, #0
 8000d74:	bf18      	it	ne
 8000d76:	2301      	movne	r3, #1
 8000d78:	0692      	lsls	r2, r2, #26
 8000d7a:	d430      	bmi.n	8000dde <_printf_common+0xba>
 8000d7c:	4641      	mov	r1, r8
 8000d7e:	4638      	mov	r0, r7
 8000d80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000d84:	47c8      	blx	r9
 8000d86:	3001      	adds	r0, #1
 8000d88:	d023      	beq.n	8000dd2 <_printf_common+0xae>
 8000d8a:	6823      	ldr	r3, [r4, #0]
 8000d8c:	6922      	ldr	r2, [r4, #16]
 8000d8e:	f003 0306 	and.w	r3, r3, #6
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	bf14      	ite	ne
 8000d96:	2500      	movne	r5, #0
 8000d98:	6833      	ldreq	r3, [r6, #0]
 8000d9a:	f04f 0600 	mov.w	r6, #0
 8000d9e:	bf08      	it	eq
 8000da0:	68e5      	ldreq	r5, [r4, #12]
 8000da2:	f104 041a 	add.w	r4, r4, #26
 8000da6:	bf08      	it	eq
 8000da8:	1aed      	subeq	r5, r5, r3
 8000daa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8000dae:	bf08      	it	eq
 8000db0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000db4:	4293      	cmp	r3, r2
 8000db6:	bfc4      	itt	gt
 8000db8:	1a9b      	subgt	r3, r3, r2
 8000dba:	18ed      	addgt	r5, r5, r3
 8000dbc:	42b5      	cmp	r5, r6
 8000dbe:	d11a      	bne.n	8000df6 <_printf_common+0xd2>
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	e008      	b.n	8000dd6 <_printf_common+0xb2>
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	4652      	mov	r2, sl
 8000dc8:	4641      	mov	r1, r8
 8000dca:	4638      	mov	r0, r7
 8000dcc:	47c8      	blx	r9
 8000dce:	3001      	adds	r0, #1
 8000dd0:	d103      	bne.n	8000dda <_printf_common+0xb6>
 8000dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	3501      	adds	r5, #1
 8000ddc:	e7c1      	b.n	8000d62 <_printf_common+0x3e>
 8000dde:	2030      	movs	r0, #48	@ 0x30
 8000de0:	18e1      	adds	r1, r4, r3
 8000de2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000de6:	1c5a      	adds	r2, r3, #1
 8000de8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000dec:	4422      	add	r2, r4
 8000dee:	3302      	adds	r3, #2
 8000df0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000df4:	e7c2      	b.n	8000d7c <_printf_common+0x58>
 8000df6:	2301      	movs	r3, #1
 8000df8:	4622      	mov	r2, r4
 8000dfa:	4641      	mov	r1, r8
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	47c8      	blx	r9
 8000e00:	3001      	adds	r0, #1
 8000e02:	d0e6      	beq.n	8000dd2 <_printf_common+0xae>
 8000e04:	3601      	adds	r6, #1
 8000e06:	e7d9      	b.n	8000dbc <_printf_common+0x98>

08000e08 <_printf_i>:
 8000e08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000e0c:	7e0f      	ldrb	r7, [r1, #24]
 8000e0e:	4691      	mov	r9, r2
 8000e10:	2f78      	cmp	r7, #120	@ 0x78
 8000e12:	4680      	mov	r8, r0
 8000e14:	460c      	mov	r4, r1
 8000e16:	469a      	mov	sl, r3
 8000e18:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000e1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000e1e:	d807      	bhi.n	8000e30 <_printf_i+0x28>
 8000e20:	2f62      	cmp	r7, #98	@ 0x62
 8000e22:	d80a      	bhi.n	8000e3a <_printf_i+0x32>
 8000e24:	2f00      	cmp	r7, #0
 8000e26:	f000 80d1 	beq.w	8000fcc <_printf_i+0x1c4>
 8000e2a:	2f58      	cmp	r7, #88	@ 0x58
 8000e2c:	f000 80b8 	beq.w	8000fa0 <_printf_i+0x198>
 8000e30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000e34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000e38:	e03a      	b.n	8000eb0 <_printf_i+0xa8>
 8000e3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000e3e:	2b15      	cmp	r3, #21
 8000e40:	d8f6      	bhi.n	8000e30 <_printf_i+0x28>
 8000e42:	a101      	add	r1, pc, #4	@ (adr r1, 8000e48 <_printf_i+0x40>)
 8000e44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000e48:	08000ea1 	.word	0x08000ea1
 8000e4c:	08000eb5 	.word	0x08000eb5
 8000e50:	08000e31 	.word	0x08000e31
 8000e54:	08000e31 	.word	0x08000e31
 8000e58:	08000e31 	.word	0x08000e31
 8000e5c:	08000e31 	.word	0x08000e31
 8000e60:	08000eb5 	.word	0x08000eb5
 8000e64:	08000e31 	.word	0x08000e31
 8000e68:	08000e31 	.word	0x08000e31
 8000e6c:	08000e31 	.word	0x08000e31
 8000e70:	08000e31 	.word	0x08000e31
 8000e74:	08000fb3 	.word	0x08000fb3
 8000e78:	08000edf 	.word	0x08000edf
 8000e7c:	08000f6d 	.word	0x08000f6d
 8000e80:	08000e31 	.word	0x08000e31
 8000e84:	08000e31 	.word	0x08000e31
 8000e88:	08000fd5 	.word	0x08000fd5
 8000e8c:	08000e31 	.word	0x08000e31
 8000e90:	08000edf 	.word	0x08000edf
 8000e94:	08000e31 	.word	0x08000e31
 8000e98:	08000e31 	.word	0x08000e31
 8000e9c:	08000f75 	.word	0x08000f75
 8000ea0:	6833      	ldr	r3, [r6, #0]
 8000ea2:	1d1a      	adds	r2, r3, #4
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	6032      	str	r2, [r6, #0]
 8000ea8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000eac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e09c      	b.n	8000fee <_printf_i+0x1e6>
 8000eb4:	6833      	ldr	r3, [r6, #0]
 8000eb6:	6820      	ldr	r0, [r4, #0]
 8000eb8:	1d19      	adds	r1, r3, #4
 8000eba:	6031      	str	r1, [r6, #0]
 8000ebc:	0606      	lsls	r6, r0, #24
 8000ebe:	d501      	bpl.n	8000ec4 <_printf_i+0xbc>
 8000ec0:	681d      	ldr	r5, [r3, #0]
 8000ec2:	e003      	b.n	8000ecc <_printf_i+0xc4>
 8000ec4:	0645      	lsls	r5, r0, #25
 8000ec6:	d5fb      	bpl.n	8000ec0 <_printf_i+0xb8>
 8000ec8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000ecc:	2d00      	cmp	r5, #0
 8000ece:	da03      	bge.n	8000ed8 <_printf_i+0xd0>
 8000ed0:	232d      	movs	r3, #45	@ 0x2d
 8000ed2:	426d      	negs	r5, r5
 8000ed4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000ed8:	230a      	movs	r3, #10
 8000eda:	4858      	ldr	r0, [pc, #352]	@ (800103c <_printf_i+0x234>)
 8000edc:	e011      	b.n	8000f02 <_printf_i+0xfa>
 8000ede:	6821      	ldr	r1, [r4, #0]
 8000ee0:	6833      	ldr	r3, [r6, #0]
 8000ee2:	0608      	lsls	r0, r1, #24
 8000ee4:	f853 5b04 	ldr.w	r5, [r3], #4
 8000ee8:	d402      	bmi.n	8000ef0 <_printf_i+0xe8>
 8000eea:	0649      	lsls	r1, r1, #25
 8000eec:	bf48      	it	mi
 8000eee:	b2ad      	uxthmi	r5, r5
 8000ef0:	2f6f      	cmp	r7, #111	@ 0x6f
 8000ef2:	6033      	str	r3, [r6, #0]
 8000ef4:	bf14      	ite	ne
 8000ef6:	230a      	movne	r3, #10
 8000ef8:	2308      	moveq	r3, #8
 8000efa:	4850      	ldr	r0, [pc, #320]	@ (800103c <_printf_i+0x234>)
 8000efc:	2100      	movs	r1, #0
 8000efe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000f02:	6866      	ldr	r6, [r4, #4]
 8000f04:	2e00      	cmp	r6, #0
 8000f06:	60a6      	str	r6, [r4, #8]
 8000f08:	db05      	blt.n	8000f16 <_printf_i+0x10e>
 8000f0a:	6821      	ldr	r1, [r4, #0]
 8000f0c:	432e      	orrs	r6, r5
 8000f0e:	f021 0104 	bic.w	r1, r1, #4
 8000f12:	6021      	str	r1, [r4, #0]
 8000f14:	d04b      	beq.n	8000fae <_printf_i+0x1a6>
 8000f16:	4616      	mov	r6, r2
 8000f18:	fbb5 f1f3 	udiv	r1, r5, r3
 8000f1c:	fb03 5711 	mls	r7, r3, r1, r5
 8000f20:	5dc7      	ldrb	r7, [r0, r7]
 8000f22:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000f26:	462f      	mov	r7, r5
 8000f28:	42bb      	cmp	r3, r7
 8000f2a:	460d      	mov	r5, r1
 8000f2c:	d9f4      	bls.n	8000f18 <_printf_i+0x110>
 8000f2e:	2b08      	cmp	r3, #8
 8000f30:	d10b      	bne.n	8000f4a <_printf_i+0x142>
 8000f32:	6823      	ldr	r3, [r4, #0]
 8000f34:	07df      	lsls	r7, r3, #31
 8000f36:	d508      	bpl.n	8000f4a <_printf_i+0x142>
 8000f38:	6923      	ldr	r3, [r4, #16]
 8000f3a:	6861      	ldr	r1, [r4, #4]
 8000f3c:	4299      	cmp	r1, r3
 8000f3e:	bfde      	ittt	le
 8000f40:	2330      	movle	r3, #48	@ 0x30
 8000f42:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000f46:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000f4a:	1b92      	subs	r2, r2, r6
 8000f4c:	6122      	str	r2, [r4, #16]
 8000f4e:	464b      	mov	r3, r9
 8000f50:	4621      	mov	r1, r4
 8000f52:	4640      	mov	r0, r8
 8000f54:	f8cd a000 	str.w	sl, [sp]
 8000f58:	aa03      	add	r2, sp, #12
 8000f5a:	f7ff fee3 	bl	8000d24 <_printf_common>
 8000f5e:	3001      	adds	r0, #1
 8000f60:	d14a      	bne.n	8000ff8 <_printf_i+0x1f0>
 8000f62:	f04f 30ff 	mov.w	r0, #4294967295
 8000f66:	b004      	add	sp, #16
 8000f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6c:	6823      	ldr	r3, [r4, #0]
 8000f6e:	f043 0320 	orr.w	r3, r3, #32
 8000f72:	6023      	str	r3, [r4, #0]
 8000f74:	2778      	movs	r7, #120	@ 0x78
 8000f76:	4832      	ldr	r0, [pc, #200]	@ (8001040 <_printf_i+0x238>)
 8000f78:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000f7c:	6823      	ldr	r3, [r4, #0]
 8000f7e:	6831      	ldr	r1, [r6, #0]
 8000f80:	061f      	lsls	r7, r3, #24
 8000f82:	f851 5b04 	ldr.w	r5, [r1], #4
 8000f86:	d402      	bmi.n	8000f8e <_printf_i+0x186>
 8000f88:	065f      	lsls	r7, r3, #25
 8000f8a:	bf48      	it	mi
 8000f8c:	b2ad      	uxthmi	r5, r5
 8000f8e:	6031      	str	r1, [r6, #0]
 8000f90:	07d9      	lsls	r1, r3, #31
 8000f92:	bf44      	itt	mi
 8000f94:	f043 0320 	orrmi.w	r3, r3, #32
 8000f98:	6023      	strmi	r3, [r4, #0]
 8000f9a:	b11d      	cbz	r5, 8000fa4 <_printf_i+0x19c>
 8000f9c:	2310      	movs	r3, #16
 8000f9e:	e7ad      	b.n	8000efc <_printf_i+0xf4>
 8000fa0:	4826      	ldr	r0, [pc, #152]	@ (800103c <_printf_i+0x234>)
 8000fa2:	e7e9      	b.n	8000f78 <_printf_i+0x170>
 8000fa4:	6823      	ldr	r3, [r4, #0]
 8000fa6:	f023 0320 	bic.w	r3, r3, #32
 8000faa:	6023      	str	r3, [r4, #0]
 8000fac:	e7f6      	b.n	8000f9c <_printf_i+0x194>
 8000fae:	4616      	mov	r6, r2
 8000fb0:	e7bd      	b.n	8000f2e <_printf_i+0x126>
 8000fb2:	6833      	ldr	r3, [r6, #0]
 8000fb4:	6825      	ldr	r5, [r4, #0]
 8000fb6:	1d18      	adds	r0, r3, #4
 8000fb8:	6961      	ldr	r1, [r4, #20]
 8000fba:	6030      	str	r0, [r6, #0]
 8000fbc:	062e      	lsls	r6, r5, #24
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	d501      	bpl.n	8000fc6 <_printf_i+0x1be>
 8000fc2:	6019      	str	r1, [r3, #0]
 8000fc4:	e002      	b.n	8000fcc <_printf_i+0x1c4>
 8000fc6:	0668      	lsls	r0, r5, #25
 8000fc8:	d5fb      	bpl.n	8000fc2 <_printf_i+0x1ba>
 8000fca:	8019      	strh	r1, [r3, #0]
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4616      	mov	r6, r2
 8000fd0:	6123      	str	r3, [r4, #16]
 8000fd2:	e7bc      	b.n	8000f4e <_printf_i+0x146>
 8000fd4:	6833      	ldr	r3, [r6, #0]
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	1d1a      	adds	r2, r3, #4
 8000fda:	6032      	str	r2, [r6, #0]
 8000fdc:	681e      	ldr	r6, [r3, #0]
 8000fde:	6862      	ldr	r2, [r4, #4]
 8000fe0:	4630      	mov	r0, r6
 8000fe2:	f000 f97b 	bl	80012dc <memchr>
 8000fe6:	b108      	cbz	r0, 8000fec <_printf_i+0x1e4>
 8000fe8:	1b80      	subs	r0, r0, r6
 8000fea:	6060      	str	r0, [r4, #4]
 8000fec:	6863      	ldr	r3, [r4, #4]
 8000fee:	6123      	str	r3, [r4, #16]
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000ff6:	e7aa      	b.n	8000f4e <_printf_i+0x146>
 8000ff8:	4632      	mov	r2, r6
 8000ffa:	4649      	mov	r1, r9
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	6923      	ldr	r3, [r4, #16]
 8001000:	47d0      	blx	sl
 8001002:	3001      	adds	r0, #1
 8001004:	d0ad      	beq.n	8000f62 <_printf_i+0x15a>
 8001006:	6823      	ldr	r3, [r4, #0]
 8001008:	079b      	lsls	r3, r3, #30
 800100a:	d413      	bmi.n	8001034 <_printf_i+0x22c>
 800100c:	68e0      	ldr	r0, [r4, #12]
 800100e:	9b03      	ldr	r3, [sp, #12]
 8001010:	4298      	cmp	r0, r3
 8001012:	bfb8      	it	lt
 8001014:	4618      	movlt	r0, r3
 8001016:	e7a6      	b.n	8000f66 <_printf_i+0x15e>
 8001018:	2301      	movs	r3, #1
 800101a:	4632      	mov	r2, r6
 800101c:	4649      	mov	r1, r9
 800101e:	4640      	mov	r0, r8
 8001020:	47d0      	blx	sl
 8001022:	3001      	adds	r0, #1
 8001024:	d09d      	beq.n	8000f62 <_printf_i+0x15a>
 8001026:	3501      	adds	r5, #1
 8001028:	68e3      	ldr	r3, [r4, #12]
 800102a:	9903      	ldr	r1, [sp, #12]
 800102c:	1a5b      	subs	r3, r3, r1
 800102e:	42ab      	cmp	r3, r5
 8001030:	dcf2      	bgt.n	8001018 <_printf_i+0x210>
 8001032:	e7eb      	b.n	800100c <_printf_i+0x204>
 8001034:	2500      	movs	r5, #0
 8001036:	f104 0619 	add.w	r6, r4, #25
 800103a:	e7f5      	b.n	8001028 <_printf_i+0x220>
 800103c:	08001436 	.word	0x08001436
 8001040:	08001447 	.word	0x08001447

08001044 <__sflush_r>:
 8001044:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800104a:	0716      	lsls	r6, r2, #28
 800104c:	4605      	mov	r5, r0
 800104e:	460c      	mov	r4, r1
 8001050:	d454      	bmi.n	80010fc <__sflush_r+0xb8>
 8001052:	684b      	ldr	r3, [r1, #4]
 8001054:	2b00      	cmp	r3, #0
 8001056:	dc02      	bgt.n	800105e <__sflush_r+0x1a>
 8001058:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800105a:	2b00      	cmp	r3, #0
 800105c:	dd48      	ble.n	80010f0 <__sflush_r+0xac>
 800105e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001060:	2e00      	cmp	r6, #0
 8001062:	d045      	beq.n	80010f0 <__sflush_r+0xac>
 8001064:	2300      	movs	r3, #0
 8001066:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800106a:	682f      	ldr	r7, [r5, #0]
 800106c:	6a21      	ldr	r1, [r4, #32]
 800106e:	602b      	str	r3, [r5, #0]
 8001070:	d030      	beq.n	80010d4 <__sflush_r+0x90>
 8001072:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001074:	89a3      	ldrh	r3, [r4, #12]
 8001076:	0759      	lsls	r1, r3, #29
 8001078:	d505      	bpl.n	8001086 <__sflush_r+0x42>
 800107a:	6863      	ldr	r3, [r4, #4]
 800107c:	1ad2      	subs	r2, r2, r3
 800107e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001080:	b10b      	cbz	r3, 8001086 <__sflush_r+0x42>
 8001082:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001084:	1ad2      	subs	r2, r2, r3
 8001086:	2300      	movs	r3, #0
 8001088:	4628      	mov	r0, r5
 800108a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800108c:	6a21      	ldr	r1, [r4, #32]
 800108e:	47b0      	blx	r6
 8001090:	1c43      	adds	r3, r0, #1
 8001092:	89a3      	ldrh	r3, [r4, #12]
 8001094:	d106      	bne.n	80010a4 <__sflush_r+0x60>
 8001096:	6829      	ldr	r1, [r5, #0]
 8001098:	291d      	cmp	r1, #29
 800109a:	d82b      	bhi.n	80010f4 <__sflush_r+0xb0>
 800109c:	4a28      	ldr	r2, [pc, #160]	@ (8001140 <__sflush_r+0xfc>)
 800109e:	40ca      	lsrs	r2, r1
 80010a0:	07d6      	lsls	r6, r2, #31
 80010a2:	d527      	bpl.n	80010f4 <__sflush_r+0xb0>
 80010a4:	2200      	movs	r2, #0
 80010a6:	6062      	str	r2, [r4, #4]
 80010a8:	6922      	ldr	r2, [r4, #16]
 80010aa:	04d9      	lsls	r1, r3, #19
 80010ac:	6022      	str	r2, [r4, #0]
 80010ae:	d504      	bpl.n	80010ba <__sflush_r+0x76>
 80010b0:	1c42      	adds	r2, r0, #1
 80010b2:	d101      	bne.n	80010b8 <__sflush_r+0x74>
 80010b4:	682b      	ldr	r3, [r5, #0]
 80010b6:	b903      	cbnz	r3, 80010ba <__sflush_r+0x76>
 80010b8:	6560      	str	r0, [r4, #84]	@ 0x54
 80010ba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80010bc:	602f      	str	r7, [r5, #0]
 80010be:	b1b9      	cbz	r1, 80010f0 <__sflush_r+0xac>
 80010c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80010c4:	4299      	cmp	r1, r3
 80010c6:	d002      	beq.n	80010ce <__sflush_r+0x8a>
 80010c8:	4628      	mov	r0, r5
 80010ca:	f7ff fbf5 	bl	80008b8 <_free_r>
 80010ce:	2300      	movs	r3, #0
 80010d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80010d2:	e00d      	b.n	80010f0 <__sflush_r+0xac>
 80010d4:	2301      	movs	r3, #1
 80010d6:	4628      	mov	r0, r5
 80010d8:	47b0      	blx	r6
 80010da:	4602      	mov	r2, r0
 80010dc:	1c50      	adds	r0, r2, #1
 80010de:	d1c9      	bne.n	8001074 <__sflush_r+0x30>
 80010e0:	682b      	ldr	r3, [r5, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d0c6      	beq.n	8001074 <__sflush_r+0x30>
 80010e6:	2b1d      	cmp	r3, #29
 80010e8:	d001      	beq.n	80010ee <__sflush_r+0xaa>
 80010ea:	2b16      	cmp	r3, #22
 80010ec:	d11d      	bne.n	800112a <__sflush_r+0xe6>
 80010ee:	602f      	str	r7, [r5, #0]
 80010f0:	2000      	movs	r0, #0
 80010f2:	e021      	b.n	8001138 <__sflush_r+0xf4>
 80010f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010f8:	b21b      	sxth	r3, r3
 80010fa:	e01a      	b.n	8001132 <__sflush_r+0xee>
 80010fc:	690f      	ldr	r7, [r1, #16]
 80010fe:	2f00      	cmp	r7, #0
 8001100:	d0f6      	beq.n	80010f0 <__sflush_r+0xac>
 8001102:	0793      	lsls	r3, r2, #30
 8001104:	bf18      	it	ne
 8001106:	2300      	movne	r3, #0
 8001108:	680e      	ldr	r6, [r1, #0]
 800110a:	bf08      	it	eq
 800110c:	694b      	ldreq	r3, [r1, #20]
 800110e:	1bf6      	subs	r6, r6, r7
 8001110:	600f      	str	r7, [r1, #0]
 8001112:	608b      	str	r3, [r1, #8]
 8001114:	2e00      	cmp	r6, #0
 8001116:	ddeb      	ble.n	80010f0 <__sflush_r+0xac>
 8001118:	4633      	mov	r3, r6
 800111a:	463a      	mov	r2, r7
 800111c:	4628      	mov	r0, r5
 800111e:	6a21      	ldr	r1, [r4, #32]
 8001120:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001124:	47e0      	blx	ip
 8001126:	2800      	cmp	r0, #0
 8001128:	dc07      	bgt.n	800113a <__sflush_r+0xf6>
 800112a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800112e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001132:	f04f 30ff 	mov.w	r0, #4294967295
 8001136:	81a3      	strh	r3, [r4, #12]
 8001138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800113a:	4407      	add	r7, r0
 800113c:	1a36      	subs	r6, r6, r0
 800113e:	e7e9      	b.n	8001114 <__sflush_r+0xd0>
 8001140:	20400001 	.word	0x20400001

08001144 <_fflush_r>:
 8001144:	b538      	push	{r3, r4, r5, lr}
 8001146:	690b      	ldr	r3, [r1, #16]
 8001148:	4605      	mov	r5, r0
 800114a:	460c      	mov	r4, r1
 800114c:	b913      	cbnz	r3, 8001154 <_fflush_r+0x10>
 800114e:	2500      	movs	r5, #0
 8001150:	4628      	mov	r0, r5
 8001152:	bd38      	pop	{r3, r4, r5, pc}
 8001154:	b118      	cbz	r0, 800115e <_fflush_r+0x1a>
 8001156:	6a03      	ldr	r3, [r0, #32]
 8001158:	b90b      	cbnz	r3, 800115e <_fflush_r+0x1a>
 800115a:	f7ff faa5 	bl	80006a8 <__sinit>
 800115e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d0f3      	beq.n	800114e <_fflush_r+0xa>
 8001166:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001168:	07d0      	lsls	r0, r2, #31
 800116a:	d404      	bmi.n	8001176 <_fflush_r+0x32>
 800116c:	0599      	lsls	r1, r3, #22
 800116e:	d402      	bmi.n	8001176 <_fflush_r+0x32>
 8001170:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001172:	f7ff fb9e 	bl	80008b2 <__retarget_lock_acquire_recursive>
 8001176:	4628      	mov	r0, r5
 8001178:	4621      	mov	r1, r4
 800117a:	f7ff ff63 	bl	8001044 <__sflush_r>
 800117e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001180:	4605      	mov	r5, r0
 8001182:	07da      	lsls	r2, r3, #31
 8001184:	d4e4      	bmi.n	8001150 <_fflush_r+0xc>
 8001186:	89a3      	ldrh	r3, [r4, #12]
 8001188:	059b      	lsls	r3, r3, #22
 800118a:	d4e1      	bmi.n	8001150 <_fflush_r+0xc>
 800118c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800118e:	f7ff fb91 	bl	80008b4 <__retarget_lock_release_recursive>
 8001192:	e7dd      	b.n	8001150 <_fflush_r+0xc>

08001194 <__swbuf_r>:
 8001194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001196:	460e      	mov	r6, r1
 8001198:	4614      	mov	r4, r2
 800119a:	4605      	mov	r5, r0
 800119c:	b118      	cbz	r0, 80011a6 <__swbuf_r+0x12>
 800119e:	6a03      	ldr	r3, [r0, #32]
 80011a0:	b90b      	cbnz	r3, 80011a6 <__swbuf_r+0x12>
 80011a2:	f7ff fa81 	bl	80006a8 <__sinit>
 80011a6:	69a3      	ldr	r3, [r4, #24]
 80011a8:	60a3      	str	r3, [r4, #8]
 80011aa:	89a3      	ldrh	r3, [r4, #12]
 80011ac:	071a      	lsls	r2, r3, #28
 80011ae:	d501      	bpl.n	80011b4 <__swbuf_r+0x20>
 80011b0:	6923      	ldr	r3, [r4, #16]
 80011b2:	b943      	cbnz	r3, 80011c6 <__swbuf_r+0x32>
 80011b4:	4621      	mov	r1, r4
 80011b6:	4628      	mov	r0, r5
 80011b8:	f000 f82a 	bl	8001210 <__swsetup_r>
 80011bc:	b118      	cbz	r0, 80011c6 <__swbuf_r+0x32>
 80011be:	f04f 37ff 	mov.w	r7, #4294967295
 80011c2:	4638      	mov	r0, r7
 80011c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011c6:	6823      	ldr	r3, [r4, #0]
 80011c8:	6922      	ldr	r2, [r4, #16]
 80011ca:	b2f6      	uxtb	r6, r6
 80011cc:	1a98      	subs	r0, r3, r2
 80011ce:	6963      	ldr	r3, [r4, #20]
 80011d0:	4637      	mov	r7, r6
 80011d2:	4283      	cmp	r3, r0
 80011d4:	dc05      	bgt.n	80011e2 <__swbuf_r+0x4e>
 80011d6:	4621      	mov	r1, r4
 80011d8:	4628      	mov	r0, r5
 80011da:	f7ff ffb3 	bl	8001144 <_fflush_r>
 80011de:	2800      	cmp	r0, #0
 80011e0:	d1ed      	bne.n	80011be <__swbuf_r+0x2a>
 80011e2:	68a3      	ldr	r3, [r4, #8]
 80011e4:	3b01      	subs	r3, #1
 80011e6:	60a3      	str	r3, [r4, #8]
 80011e8:	6823      	ldr	r3, [r4, #0]
 80011ea:	1c5a      	adds	r2, r3, #1
 80011ec:	6022      	str	r2, [r4, #0]
 80011ee:	701e      	strb	r6, [r3, #0]
 80011f0:	6962      	ldr	r2, [r4, #20]
 80011f2:	1c43      	adds	r3, r0, #1
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d004      	beq.n	8001202 <__swbuf_r+0x6e>
 80011f8:	89a3      	ldrh	r3, [r4, #12]
 80011fa:	07db      	lsls	r3, r3, #31
 80011fc:	d5e1      	bpl.n	80011c2 <__swbuf_r+0x2e>
 80011fe:	2e0a      	cmp	r6, #10
 8001200:	d1df      	bne.n	80011c2 <__swbuf_r+0x2e>
 8001202:	4621      	mov	r1, r4
 8001204:	4628      	mov	r0, r5
 8001206:	f7ff ff9d 	bl	8001144 <_fflush_r>
 800120a:	2800      	cmp	r0, #0
 800120c:	d0d9      	beq.n	80011c2 <__swbuf_r+0x2e>
 800120e:	e7d6      	b.n	80011be <__swbuf_r+0x2a>

08001210 <__swsetup_r>:
 8001210:	b538      	push	{r3, r4, r5, lr}
 8001212:	4b29      	ldr	r3, [pc, #164]	@ (80012b8 <__swsetup_r+0xa8>)
 8001214:	4605      	mov	r5, r0
 8001216:	6818      	ldr	r0, [r3, #0]
 8001218:	460c      	mov	r4, r1
 800121a:	b118      	cbz	r0, 8001224 <__swsetup_r+0x14>
 800121c:	6a03      	ldr	r3, [r0, #32]
 800121e:	b90b      	cbnz	r3, 8001224 <__swsetup_r+0x14>
 8001220:	f7ff fa42 	bl	80006a8 <__sinit>
 8001224:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001228:	0719      	lsls	r1, r3, #28
 800122a:	d422      	bmi.n	8001272 <__swsetup_r+0x62>
 800122c:	06da      	lsls	r2, r3, #27
 800122e:	d407      	bmi.n	8001240 <__swsetup_r+0x30>
 8001230:	2209      	movs	r2, #9
 8001232:	602a      	str	r2, [r5, #0]
 8001234:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001238:	f04f 30ff 	mov.w	r0, #4294967295
 800123c:	81a3      	strh	r3, [r4, #12]
 800123e:	e033      	b.n	80012a8 <__swsetup_r+0x98>
 8001240:	0758      	lsls	r0, r3, #29
 8001242:	d512      	bpl.n	800126a <__swsetup_r+0x5a>
 8001244:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001246:	b141      	cbz	r1, 800125a <__swsetup_r+0x4a>
 8001248:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800124c:	4299      	cmp	r1, r3
 800124e:	d002      	beq.n	8001256 <__swsetup_r+0x46>
 8001250:	4628      	mov	r0, r5
 8001252:	f7ff fb31 	bl	80008b8 <_free_r>
 8001256:	2300      	movs	r3, #0
 8001258:	6363      	str	r3, [r4, #52]	@ 0x34
 800125a:	89a3      	ldrh	r3, [r4, #12]
 800125c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001260:	81a3      	strh	r3, [r4, #12]
 8001262:	2300      	movs	r3, #0
 8001264:	6063      	str	r3, [r4, #4]
 8001266:	6923      	ldr	r3, [r4, #16]
 8001268:	6023      	str	r3, [r4, #0]
 800126a:	89a3      	ldrh	r3, [r4, #12]
 800126c:	f043 0308 	orr.w	r3, r3, #8
 8001270:	81a3      	strh	r3, [r4, #12]
 8001272:	6923      	ldr	r3, [r4, #16]
 8001274:	b94b      	cbnz	r3, 800128a <__swsetup_r+0x7a>
 8001276:	89a3      	ldrh	r3, [r4, #12]
 8001278:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800127c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001280:	d003      	beq.n	800128a <__swsetup_r+0x7a>
 8001282:	4621      	mov	r1, r4
 8001284:	4628      	mov	r0, r5
 8001286:	f000 f85c 	bl	8001342 <__smakebuf_r>
 800128a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800128e:	f013 0201 	ands.w	r2, r3, #1
 8001292:	d00a      	beq.n	80012aa <__swsetup_r+0x9a>
 8001294:	2200      	movs	r2, #0
 8001296:	60a2      	str	r2, [r4, #8]
 8001298:	6962      	ldr	r2, [r4, #20]
 800129a:	4252      	negs	r2, r2
 800129c:	61a2      	str	r2, [r4, #24]
 800129e:	6922      	ldr	r2, [r4, #16]
 80012a0:	b942      	cbnz	r2, 80012b4 <__swsetup_r+0xa4>
 80012a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80012a6:	d1c5      	bne.n	8001234 <__swsetup_r+0x24>
 80012a8:	bd38      	pop	{r3, r4, r5, pc}
 80012aa:	0799      	lsls	r1, r3, #30
 80012ac:	bf58      	it	pl
 80012ae:	6962      	ldrpl	r2, [r4, #20]
 80012b0:	60a2      	str	r2, [r4, #8]
 80012b2:	e7f4      	b.n	800129e <__swsetup_r+0x8e>
 80012b4:	2000      	movs	r0, #0
 80012b6:	e7f7      	b.n	80012a8 <__swsetup_r+0x98>
 80012b8:	2000000c 	.word	0x2000000c

080012bc <_sbrk_r>:
 80012bc:	b538      	push	{r3, r4, r5, lr}
 80012be:	2300      	movs	r3, #0
 80012c0:	4d05      	ldr	r5, [pc, #20]	@ (80012d8 <_sbrk_r+0x1c>)
 80012c2:	4604      	mov	r4, r0
 80012c4:	4608      	mov	r0, r1
 80012c6:	602b      	str	r3, [r5, #0]
 80012c8:	f7fe ffde 	bl	8000288 <_sbrk>
 80012cc:	1c43      	adds	r3, r0, #1
 80012ce:	d102      	bne.n	80012d6 <_sbrk_r+0x1a>
 80012d0:	682b      	ldr	r3, [r5, #0]
 80012d2:	b103      	cbz	r3, 80012d6 <_sbrk_r+0x1a>
 80012d4:	6023      	str	r3, [r4, #0]
 80012d6:	bd38      	pop	{r3, r4, r5, pc}
 80012d8:	200001bc 	.word	0x200001bc

080012dc <memchr>:
 80012dc:	4603      	mov	r3, r0
 80012de:	b510      	push	{r4, lr}
 80012e0:	b2c9      	uxtb	r1, r1
 80012e2:	4402      	add	r2, r0
 80012e4:	4293      	cmp	r3, r2
 80012e6:	4618      	mov	r0, r3
 80012e8:	d101      	bne.n	80012ee <memchr+0x12>
 80012ea:	2000      	movs	r0, #0
 80012ec:	e003      	b.n	80012f6 <memchr+0x1a>
 80012ee:	7804      	ldrb	r4, [r0, #0]
 80012f0:	3301      	adds	r3, #1
 80012f2:	428c      	cmp	r4, r1
 80012f4:	d1f6      	bne.n	80012e4 <memchr+0x8>
 80012f6:	bd10      	pop	{r4, pc}

080012f8 <__swhatbuf_r>:
 80012f8:	b570      	push	{r4, r5, r6, lr}
 80012fa:	460c      	mov	r4, r1
 80012fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001300:	4615      	mov	r5, r2
 8001302:	2900      	cmp	r1, #0
 8001304:	461e      	mov	r6, r3
 8001306:	b096      	sub	sp, #88	@ 0x58
 8001308:	da0c      	bge.n	8001324 <__swhatbuf_r+0x2c>
 800130a:	89a3      	ldrh	r3, [r4, #12]
 800130c:	2100      	movs	r1, #0
 800130e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001312:	bf14      	ite	ne
 8001314:	2340      	movne	r3, #64	@ 0x40
 8001316:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800131a:	2000      	movs	r0, #0
 800131c:	6031      	str	r1, [r6, #0]
 800131e:	602b      	str	r3, [r5, #0]
 8001320:	b016      	add	sp, #88	@ 0x58
 8001322:	bd70      	pop	{r4, r5, r6, pc}
 8001324:	466a      	mov	r2, sp
 8001326:	f000 f849 	bl	80013bc <_fstat_r>
 800132a:	2800      	cmp	r0, #0
 800132c:	dbed      	blt.n	800130a <__swhatbuf_r+0x12>
 800132e:	9901      	ldr	r1, [sp, #4]
 8001330:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001334:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001338:	4259      	negs	r1, r3
 800133a:	4159      	adcs	r1, r3
 800133c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001340:	e7eb      	b.n	800131a <__swhatbuf_r+0x22>

08001342 <__smakebuf_r>:
 8001342:	898b      	ldrh	r3, [r1, #12]
 8001344:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001346:	079d      	lsls	r5, r3, #30
 8001348:	4606      	mov	r6, r0
 800134a:	460c      	mov	r4, r1
 800134c:	d507      	bpl.n	800135e <__smakebuf_r+0x1c>
 800134e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001352:	6023      	str	r3, [r4, #0]
 8001354:	6123      	str	r3, [r4, #16]
 8001356:	2301      	movs	r3, #1
 8001358:	6163      	str	r3, [r4, #20]
 800135a:	b003      	add	sp, #12
 800135c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800135e:	466a      	mov	r2, sp
 8001360:	ab01      	add	r3, sp, #4
 8001362:	f7ff ffc9 	bl	80012f8 <__swhatbuf_r>
 8001366:	9f00      	ldr	r7, [sp, #0]
 8001368:	4605      	mov	r5, r0
 800136a:	4639      	mov	r1, r7
 800136c:	4630      	mov	r0, r6
 800136e:	f7ff fb0d 	bl	800098c <_malloc_r>
 8001372:	b948      	cbnz	r0, 8001388 <__smakebuf_r+0x46>
 8001374:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001378:	059a      	lsls	r2, r3, #22
 800137a:	d4ee      	bmi.n	800135a <__smakebuf_r+0x18>
 800137c:	f023 0303 	bic.w	r3, r3, #3
 8001380:	f043 0302 	orr.w	r3, r3, #2
 8001384:	81a3      	strh	r3, [r4, #12]
 8001386:	e7e2      	b.n	800134e <__smakebuf_r+0xc>
 8001388:	89a3      	ldrh	r3, [r4, #12]
 800138a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800138e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001392:	81a3      	strh	r3, [r4, #12]
 8001394:	9b01      	ldr	r3, [sp, #4]
 8001396:	6020      	str	r0, [r4, #0]
 8001398:	b15b      	cbz	r3, 80013b2 <__smakebuf_r+0x70>
 800139a:	4630      	mov	r0, r6
 800139c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80013a0:	f000 f81e 	bl	80013e0 <_isatty_r>
 80013a4:	b128      	cbz	r0, 80013b2 <__smakebuf_r+0x70>
 80013a6:	89a3      	ldrh	r3, [r4, #12]
 80013a8:	f023 0303 	bic.w	r3, r3, #3
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	81a3      	strh	r3, [r4, #12]
 80013b2:	89a3      	ldrh	r3, [r4, #12]
 80013b4:	431d      	orrs	r5, r3
 80013b6:	81a5      	strh	r5, [r4, #12]
 80013b8:	e7cf      	b.n	800135a <__smakebuf_r+0x18>
	...

080013bc <_fstat_r>:
 80013bc:	b538      	push	{r3, r4, r5, lr}
 80013be:	2300      	movs	r3, #0
 80013c0:	4d06      	ldr	r5, [pc, #24]	@ (80013dc <_fstat_r+0x20>)
 80013c2:	4604      	mov	r4, r0
 80013c4:	4608      	mov	r0, r1
 80013c6:	4611      	mov	r1, r2
 80013c8:	602b      	str	r3, [r5, #0]
 80013ca:	f7fe ff37 	bl	800023c <_fstat>
 80013ce:	1c43      	adds	r3, r0, #1
 80013d0:	d102      	bne.n	80013d8 <_fstat_r+0x1c>
 80013d2:	682b      	ldr	r3, [r5, #0]
 80013d4:	b103      	cbz	r3, 80013d8 <_fstat_r+0x1c>
 80013d6:	6023      	str	r3, [r4, #0]
 80013d8:	bd38      	pop	{r3, r4, r5, pc}
 80013da:	bf00      	nop
 80013dc:	200001bc 	.word	0x200001bc

080013e0 <_isatty_r>:
 80013e0:	b538      	push	{r3, r4, r5, lr}
 80013e2:	2300      	movs	r3, #0
 80013e4:	4d05      	ldr	r5, [pc, #20]	@ (80013fc <_isatty_r+0x1c>)
 80013e6:	4604      	mov	r4, r0
 80013e8:	4608      	mov	r0, r1
 80013ea:	602b      	str	r3, [r5, #0]
 80013ec:	f7fe ff35 	bl	800025a <_isatty>
 80013f0:	1c43      	adds	r3, r0, #1
 80013f2:	d102      	bne.n	80013fa <_isatty_r+0x1a>
 80013f4:	682b      	ldr	r3, [r5, #0]
 80013f6:	b103      	cbz	r3, 80013fa <_isatty_r+0x1a>
 80013f8:	6023      	str	r3, [r4, #0]
 80013fa:	bd38      	pop	{r3, r4, r5, pc}
 80013fc:	200001bc 	.word	0x200001bc

08001400 <_init>:
 8001400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001402:	bf00      	nop
 8001404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001406:	bc08      	pop	{r3}
 8001408:	469e      	mov	lr, r3
 800140a:	4770      	bx	lr

0800140c <_fini>:
 800140c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800140e:	bf00      	nop
 8001410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001412:	bc08      	pop	{r3}
 8001414:	469e      	mov	lr, r3
 8001416:	4770      	bx	lr
