
I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fcc  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080010fc  080010fc  000020fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800116c  0800116c  00003050  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800116c  0800116c  00003050  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800116c  0800116c  00003050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800116c  0800116c  0000216c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001170  08001170  00002170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08001174  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000050  080011c4  00003050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  080011c4  00003208  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00003050  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b87  00000000  00000000  00003079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004d3  00000000  00000000  00003c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000108  00000000  00000000  000040d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000ad  00000000  00000000  000041e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011128  00000000  00000000  0000428d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001ffd  00000000  00000000  000153b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00058323  00000000  00000000  000173b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006f6d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000007d0  00000000  00000000  0006f718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  0006fee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000050 	.word	0x20000050
 800014c:	00000000 	.word	0x00000000
 8000150:	080010e4 	.word	0x080010e4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000054 	.word	0x20000054
 800016c:	080010e4 	.word	0x080010e4

08000170 <mpu6050_init>:
#define ACCEL_XOUT_H        0x3B
#define GYRO_XOUT_H         0x43

// ---------------- MPU6050 DRIVER ---------------- //
void mpu6050_init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
    char data;

    // Wake up MPU6050 (clear sleep bit)
    data = 0x00;
 8000176:	2300      	movs	r3, #0
 8000178:	71fb      	strb	r3, [r7, #7]
    i2c1_burstwrite(MPU6050_ADDR, PWR_MGMT_1, 1, &data);
 800017a:	1dfb      	adds	r3, r7, #7
 800017c:	2201      	movs	r2, #1
 800017e:	216b      	movs	r1, #107	@ 0x6b
 8000180:	2068      	movs	r0, #104	@ 0x68
 8000182:	f000 f96f 	bl	8000464 <i2c1_burstwrite>
}
 8000186:	bf00      	nop
 8000188:	3708      	adds	r7, #8
 800018a:	46bd      	mov	sp, r7
 800018c:	bd80      	pop	{r7, pc}

0800018e <mpu6050_read_accel>:

void mpu6050_read_accel(int16_t* ax, int16_t* ay, int16_t* az)
{
 800018e:	b580      	push	{r7, lr}
 8000190:	b086      	sub	sp, #24
 8000192:	af00      	add	r7, sp, #0
 8000194:	60f8      	str	r0, [r7, #12]
 8000196:	60b9      	str	r1, [r7, #8]
 8000198:	607a      	str	r2, [r7, #4]
    char rawData[6];

    // Burst read 6 bytes starting at ACCEL_XOUT_H
    i2c1_burstread(MPU6050_ADDR, ACCEL_XOUT_H, 6, rawData);
 800019a:	f107 0310 	add.w	r3, r7, #16
 800019e:	2206      	movs	r2, #6
 80001a0:	213b      	movs	r1, #59	@ 0x3b
 80001a2:	2068      	movs	r0, #104	@ 0x68
 80001a4:	f000 f8c4 	bl	8000330 <i2c1_burstread>

    *ax = (int16_t)( (rawData[0] << 8) | rawData[1] );
 80001a8:	7c3b      	ldrb	r3, [r7, #16]
 80001aa:	b21b      	sxth	r3, r3
 80001ac:	021b      	lsls	r3, r3, #8
 80001ae:	b21a      	sxth	r2, r3
 80001b0:	7c7b      	ldrb	r3, [r7, #17]
 80001b2:	b21b      	sxth	r3, r3
 80001b4:	4313      	orrs	r3, r2
 80001b6:	b21a      	sxth	r2, r3
 80001b8:	68fb      	ldr	r3, [r7, #12]
 80001ba:	801a      	strh	r2, [r3, #0]
    *ay = (int16_t)( (rawData[2] << 8) | rawData[3] );
 80001bc:	7cbb      	ldrb	r3, [r7, #18]
 80001be:	b21b      	sxth	r3, r3
 80001c0:	021b      	lsls	r3, r3, #8
 80001c2:	b21a      	sxth	r2, r3
 80001c4:	7cfb      	ldrb	r3, [r7, #19]
 80001c6:	b21b      	sxth	r3, r3
 80001c8:	4313      	orrs	r3, r2
 80001ca:	b21a      	sxth	r2, r3
 80001cc:	68bb      	ldr	r3, [r7, #8]
 80001ce:	801a      	strh	r2, [r3, #0]
    *az = (int16_t)( (rawData[4] << 8) | rawData[5] );
 80001d0:	7d3b      	ldrb	r3, [r7, #20]
 80001d2:	b21b      	sxth	r3, r3
 80001d4:	021b      	lsls	r3, r3, #8
 80001d6:	b21a      	sxth	r2, r3
 80001d8:	7d7b      	ldrb	r3, [r7, #21]
 80001da:	b21b      	sxth	r3, r3
 80001dc:	4313      	orrs	r3, r2
 80001de:	b21a      	sxth	r2, r3
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	801a      	strh	r2, [r3, #0]
}
 80001e4:	bf00      	nop
 80001e6:	3718      	adds	r7, #24
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bd80      	pop	{r7, pc}

080001ec <mpu6050_read_gyro>:

void mpu6050_read_gyro(int16_t* gx, int16_t* gy, int16_t* gz)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b086      	sub	sp, #24
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	60f8      	str	r0, [r7, #12]
 80001f4:	60b9      	str	r1, [r7, #8]
 80001f6:	607a      	str	r2, [r7, #4]
    char rawData[6];

    // Burst read 6 bytes starting at GYRO_XOUT_H
    i2c1_burstread(MPU6050_ADDR, GYRO_XOUT_H, 6, rawData);
 80001f8:	f107 0310 	add.w	r3, r7, #16
 80001fc:	2206      	movs	r2, #6
 80001fe:	2143      	movs	r1, #67	@ 0x43
 8000200:	2068      	movs	r0, #104	@ 0x68
 8000202:	f000 f895 	bl	8000330 <i2c1_burstread>

    *gx = (int16_t)( (rawData[0] << 8) | rawData[1] );
 8000206:	7c3b      	ldrb	r3, [r7, #16]
 8000208:	b21b      	sxth	r3, r3
 800020a:	021b      	lsls	r3, r3, #8
 800020c:	b21a      	sxth	r2, r3
 800020e:	7c7b      	ldrb	r3, [r7, #17]
 8000210:	b21b      	sxth	r3, r3
 8000212:	4313      	orrs	r3, r2
 8000214:	b21a      	sxth	r2, r3
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	801a      	strh	r2, [r3, #0]
    *gy = (int16_t)( (rawData[2] << 8) | rawData[3] );
 800021a:	7cbb      	ldrb	r3, [r7, #18]
 800021c:	b21b      	sxth	r3, r3
 800021e:	021b      	lsls	r3, r3, #8
 8000220:	b21a      	sxth	r2, r3
 8000222:	7cfb      	ldrb	r3, [r7, #19]
 8000224:	b21b      	sxth	r3, r3
 8000226:	4313      	orrs	r3, r2
 8000228:	b21a      	sxth	r2, r3
 800022a:	68bb      	ldr	r3, [r7, #8]
 800022c:	801a      	strh	r2, [r3, #0]
    *gz = (int16_t)( (rawData[4] << 8) | rawData[5] );
 800022e:	7d3b      	ldrb	r3, [r7, #20]
 8000230:	b21b      	sxth	r3, r3
 8000232:	021b      	lsls	r3, r3, #8
 8000234:	b21a      	sxth	r2, r3
 8000236:	7d7b      	ldrb	r3, [r7, #21]
 8000238:	b21b      	sxth	r3, r3
 800023a:	4313      	orrs	r3, r2
 800023c:	b21a      	sxth	r2, r3
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	801a      	strh	r2, [r3, #0]
}
 8000242:	bf00      	nop
 8000244:	3718      	adds	r7, #24
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
	...

0800024c <i2c1_init>:
#define STOP         (1U<<9)
#define RXNE         (1U<<6)
#define BTF          (1U<<2)

void i2c1_init(void)
{
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0
	  //enable clock acess to GPIOB
	RCC->APB2ENR |= GPIOBEN;
 8000250:	4b33      	ldr	r3, [pc, #204]	@ (8000320 <i2c1_init+0xd4>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	4a32      	ldr	r2, [pc, #200]	@ (8000320 <i2c1_init+0xd4>)
 8000256:	f043 0308 	orr.w	r3, r3, #8
 800025a:	6193      	str	r3, [r2, #24]
    RCC->APB2ENR |= AFIOEN;
 800025c:	4b30      	ldr	r3, [pc, #192]	@ (8000320 <i2c1_init+0xd4>)
 800025e:	699b      	ldr	r3, [r3, #24]
 8000260:	4a2f      	ldr	r2, [pc, #188]	@ (8000320 <i2c1_init+0xd4>)
 8000262:	f043 0301 	orr.w	r3, r3, #1
 8000266:	6193      	str	r3, [r2, #24]
	 //set pb8 and pb9 mode to alt function
	AFIO->MAPR |= I2CMAP;
 8000268:	4b2e      	ldr	r3, [pc, #184]	@ (8000324 <i2c1_init+0xd8>)
 800026a:	685b      	ldr	r3, [r3, #4]
 800026c:	4a2d      	ldr	r2, [pc, #180]	@ (8000324 <i2c1_init+0xd8>)
 800026e:	f043 0302 	orr.w	r3, r3, #2
 8000272:	6053      	str	r3, [r2, #4]
	//set pb8 and pb9 to output as open drain
	GPIOB->CRH |= (1U<<3);
 8000274:	4b2c      	ldr	r3, [pc, #176]	@ (8000328 <i2c1_init+0xdc>)
 8000276:	685b      	ldr	r3, [r3, #4]
 8000278:	4a2b      	ldr	r2, [pc, #172]	@ (8000328 <i2c1_init+0xdc>)
 800027a:	f043 0308 	orr.w	r3, r3, #8
 800027e:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= (1U<<2);
 8000280:	4b29      	ldr	r3, [pc, #164]	@ (8000328 <i2c1_init+0xdc>)
 8000282:	685b      	ldr	r3, [r3, #4]
 8000284:	4a28      	ldr	r2, [pc, #160]	@ (8000328 <i2c1_init+0xdc>)
 8000286:	f043 0304 	orr.w	r3, r3, #4
 800028a:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= (1U<<1);
 800028c:	4b26      	ldr	r3, [pc, #152]	@ (8000328 <i2c1_init+0xdc>)
 800028e:	685b      	ldr	r3, [r3, #4]
 8000290:	4a25      	ldr	r2, [pc, #148]	@ (8000328 <i2c1_init+0xdc>)
 8000292:	f043 0302 	orr.w	r3, r3, #2
 8000296:	6053      	str	r3, [r2, #4]
	GPIOB->CRH &=~(1U<<0);
 8000298:	4b23      	ldr	r3, [pc, #140]	@ (8000328 <i2c1_init+0xdc>)
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	4a22      	ldr	r2, [pc, #136]	@ (8000328 <i2c1_init+0xdc>)
 800029e:	f023 0301 	bic.w	r3, r3, #1
 80002a2:	6053      	str	r3, [r2, #4]

	    GPIOB->CRH |= (1U<<7);
 80002a4:	4b20      	ldr	r3, [pc, #128]	@ (8000328 <i2c1_init+0xdc>)
 80002a6:	685b      	ldr	r3, [r3, #4]
 80002a8:	4a1f      	ldr	r2, [pc, #124]	@ (8000328 <i2c1_init+0xdc>)
 80002aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80002ae:	6053      	str	r3, [r2, #4]
		GPIOB->CRH |= (1U<<6);
 80002b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000328 <i2c1_init+0xdc>)
 80002b2:	685b      	ldr	r3, [r3, #4]
 80002b4:	4a1c      	ldr	r2, [pc, #112]	@ (8000328 <i2c1_init+0xdc>)
 80002b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80002ba:	6053      	str	r3, [r2, #4]
		GPIOB->CRH |= (1U<<5);
 80002bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000328 <i2c1_init+0xdc>)
 80002be:	685b      	ldr	r3, [r3, #4]
 80002c0:	4a19      	ldr	r2, [pc, #100]	@ (8000328 <i2c1_init+0xdc>)
 80002c2:	f043 0320 	orr.w	r3, r3, #32
 80002c6:	6053      	str	r3, [r2, #4]
		GPIOB->CRH &= ~(1U<<4);
 80002c8:	4b17      	ldr	r3, [pc, #92]	@ (8000328 <i2c1_init+0xdc>)
 80002ca:	685b      	ldr	r3, [r3, #4]
 80002cc:	4a16      	ldr	r2, [pc, #88]	@ (8000328 <i2c1_init+0xdc>)
 80002ce:	f023 0310 	bic.w	r3, r3, #16
 80002d2:	6053      	str	r3, [r2, #4]
	//enablE CLK FOR I2C
		RCC->APB1ENR |= I2CENR;
 80002d4:	4b12      	ldr	r3, [pc, #72]	@ (8000320 <i2c1_init+0xd4>)
 80002d6:	69db      	ldr	r3, [r3, #28]
 80002d8:	4a11      	ldr	r2, [pc, #68]	@ (8000320 <i2c1_init+0xd4>)
 80002da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80002de:	61d3      	str	r3, [r2, #28]
		//ENTER RESET MODE
		I2C1->CR1 |= (1U<<15);
 80002e0:	4b12      	ldr	r3, [pc, #72]	@ (800032c <i2c1_init+0xe0>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a11      	ldr	r2, [pc, #68]	@ (800032c <i2c1_init+0xe0>)
 80002e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80002ea:	6013      	str	r3, [r2, #0]
		//COME OUT OF RESET MODE
		I2C1->CR1 &=~(1U<<15);
 80002ec:	4b0f      	ldr	r3, [pc, #60]	@ (800032c <i2c1_init+0xe0>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a0e      	ldr	r2, [pc, #56]	@ (800032c <i2c1_init+0xe0>)
 80002f2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80002f6:	6013      	str	r3, [r2, #0]
	    //SET 16MHZ FREQ
		I2C1->CR2 = 16;
 80002f8:	4b0c      	ldr	r3, [pc, #48]	@ (800032c <i2c1_init+0xe0>)
 80002fa:	2210      	movs	r2, #16
 80002fc:	605a      	str	r2, [r3, #4]
		//SET I2C TO STD MODE 100KHZ CLK
		I2C1->CCR = I2C_100KHZ;
 80002fe:	4b0b      	ldr	r3, [pc, #44]	@ (800032c <i2c1_init+0xe0>)
 8000300:	2250      	movs	r2, #80	@ 0x50
 8000302:	61da      	str	r2, [r3, #28]
		//SET RISE TIME
		I2C1->TRISE = SD_MODE_MAX_RISE_TIME;
 8000304:	4b09      	ldr	r3, [pc, #36]	@ (800032c <i2c1_init+0xe0>)
 8000306:	2211      	movs	r2, #17
 8000308:	621a      	str	r2, [r3, #32]
		//SET PERIPHERAL ENABLE
		I2C1->CR1 |= CR1_PE;
 800030a:	4b08      	ldr	r3, [pc, #32]	@ (800032c <i2c1_init+0xe0>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4a07      	ldr	r2, [pc, #28]	@ (800032c <i2c1_init+0xe0>)
 8000310:	f043 0301 	orr.w	r3, r3, #1
 8000314:	6013      	str	r3, [r2, #0]
}
 8000316:	bf00      	nop
 8000318:	46bd      	mov	sp, r7
 800031a:	bc80      	pop	{r7}
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	40021000 	.word	0x40021000
 8000324:	40010000 	.word	0x40010000
 8000328:	40010c00 	.word	0x40010c00
 800032c:	40005400 	.word	0x40005400

08000330 <i2c1_burstread>:
    *data++ = I2C1->DR;

}

void i2c1_burstread(char saddr,char maddr,int n,char* data)
{
 8000330:	b480      	push	{r7}
 8000332:	b087      	sub	sp, #28
 8000334:	af00      	add	r7, sp, #0
 8000336:	60ba      	str	r2, [r7, #8]
 8000338:	607b      	str	r3, [r7, #4]
 800033a:	4603      	mov	r3, r0
 800033c:	73fb      	strb	r3, [r7, #15]
 800033e:	460b      	mov	r3, r1
 8000340:	73bb      	strb	r3, [r7, #14]
volatile int tmp;
//WAIT UNTIL BUS NOT BUSY
	while(I2C1->SR2 & BUSY){}
 8000342:	bf00      	nop
 8000344:	4b46      	ldr	r3, [pc, #280]	@ (8000460 <i2c1_burstread+0x130>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	f003 0302 	and.w	r3, r3, #2
 800034c:	2b00      	cmp	r3, #0
 800034e:	d1f9      	bne.n	8000344 <i2c1_burstread+0x14>
	//GENERATE START
	    I2C1->CR1 |= CR1_START;
 8000350:	4b43      	ldr	r3, [pc, #268]	@ (8000460 <i2c1_burstread+0x130>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a42      	ldr	r2, [pc, #264]	@ (8000460 <i2c1_burstread+0x130>)
 8000356:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800035a:	6013      	str	r3, [r2, #0]
	    while (!(I2C1->SR1 & SB)){}
 800035c:	bf00      	nop
 800035e:	4b40      	ldr	r3, [pc, #256]	@ (8000460 <i2c1_burstread+0x130>)
 8000360:	695b      	ldr	r3, [r3, #20]
 8000362:	f003 0301 	and.w	r3, r3, #1
 8000366:	2b00      	cmp	r3, #0
 8000368:	d0f9      	beq.n	800035e <i2c1_burstread+0x2e>

	        //transmit slave address+write
	    I2C1->DR = saddr<<1;
 800036a:	7bfb      	ldrb	r3, [r7, #15]
 800036c:	4a3c      	ldr	r2, [pc, #240]	@ (8000460 <i2c1_burstread+0x130>)
 800036e:	005b      	lsls	r3, r3, #1
 8000370:	6113      	str	r3, [r2, #16]
	        //WAIT UNTIL ADD FLAG IS SET
       while (!(I2C1->SR1 & ADDR)){}
 8000372:	bf00      	nop
 8000374:	4b3a      	ldr	r3, [pc, #232]	@ (8000460 <i2c1_burstread+0x130>)
 8000376:	695b      	ldr	r3, [r3, #20]
 8000378:	f003 0302 	and.w	r3, r3, #2
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0f9      	beq.n	8000374 <i2c1_burstread+0x44>
	       //CLEAR ADDRESS FLAG
       tmp=I2C1->SR2;
 8000380:	4b37      	ldr	r3, [pc, #220]	@ (8000460 <i2c1_burstread+0x130>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	617b      	str	r3, [r7, #20]
	           //WAIT UNTIL TRANSMIT IS EMPTY
       while (!(I2C1->SR1 & SR1_TXE)){}
 8000386:	bf00      	nop
 8000388:	4b35      	ldr	r3, [pc, #212]	@ (8000460 <i2c1_burstread+0x130>)
 800038a:	695b      	ldr	r3, [r3, #20]
 800038c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000390:	2b00      	cmp	r3, #0
 8000392:	d0f9      	beq.n	8000388 <i2c1_burstread+0x58>
	              //SEND MEMORY ADDRESS
	   I2C1->DR =maddr;
 8000394:	4a32      	ldr	r2, [pc, #200]	@ (8000460 <i2c1_burstread+0x130>)
 8000396:	7bbb      	ldrb	r3, [r7, #14]
 8000398:	6113      	str	r3, [r2, #16]
	                  //WAIT UNTIL TRANSMIT IS EMPTY
	   while (!(I2C1->SR1 & SR1_TXE)){}
 800039a:	bf00      	nop
 800039c:	4b30      	ldr	r3, [pc, #192]	@ (8000460 <i2c1_burstread+0x130>)
 800039e:	695b      	ldr	r3, [r3, #20]
 80003a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d0f9      	beq.n	800039c <i2c1_burstread+0x6c>
	                  //generate restart
	    I2C1->CR1 |= CR1_START;
 80003a8:	4b2d      	ldr	r3, [pc, #180]	@ (8000460 <i2c1_burstread+0x130>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a2c      	ldr	r2, [pc, #176]	@ (8000460 <i2c1_burstread+0x130>)
 80003ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003b2:	6013      	str	r3, [r2, #0]
	                     //WAIT UNTIL START FLAG IS SET
	     while (!(I2C1->SR1 & SB)){}
 80003b4:	bf00      	nop
 80003b6:	4b2a      	ldr	r3, [pc, #168]	@ (8000460 <i2c1_burstread+0x130>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	f003 0301 	and.w	r3, r3, #1
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d0f9      	beq.n	80003b6 <i2c1_burstread+0x86>
	     //transmit slave add+read
	     I2C1->DR = saddr<<1|1;
 80003c2:	7bfb      	ldrb	r3, [r7, #15]
 80003c4:	005b      	lsls	r3, r3, #1
 80003c6:	f043 0201 	orr.w	r2, r3, #1
 80003ca:	4b25      	ldr	r3, [pc, #148]	@ (8000460 <i2c1_burstread+0x130>)
 80003cc:	611a      	str	r2, [r3, #16]
	     //WAIT UNTIL ADDR FLAG IS SET
	       while (!(I2C1->SR1 & ADDR)){}
 80003ce:	bf00      	nop
 80003d0:	4b23      	ldr	r3, [pc, #140]	@ (8000460 <i2c1_burstread+0x130>)
 80003d2:	695b      	ldr	r3, [r3, #20]
 80003d4:	f003 0302 	and.w	r3, r3, #2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d0f9      	beq.n	80003d0 <i2c1_burstread+0xa0>
	       //CLEAR ADDRESS FLAG
	       tmp=I2C1->SR2;
 80003dc:	4b20      	ldr	r3, [pc, #128]	@ (8000460 <i2c1_burstread+0x130>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	617b      	str	r3, [r7, #20]
	       //ENABLE ACK
	           I2C1->CR1 |=ACK;
 80003e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000460 <i2c1_burstread+0x130>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4a1e      	ldr	r2, [pc, #120]	@ (8000460 <i2c1_burstread+0x130>)
 80003e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80003ec:	6013      	str	r3, [r2, #0]
	       while(n>0U)
 80003ee:	e02e      	b.n	800044e <i2c1_burstread+0x11e>
	       {
	    	   //if one byte
	    	   if (n==1U)
 80003f0:	68bb      	ldr	r3, [r7, #8]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d11a      	bne.n	800042c <i2c1_burstread+0xfc>
	   {//disable ack
	    		   I2C1->CR1 &=~ACK;
 80003f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000460 <i2c1_burstread+0x130>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4a19      	ldr	r2, [pc, #100]	@ (8000460 <i2c1_burstread+0x130>)
 80003fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000400:	6013      	str	r3, [r2, #0]
	    //generate stop
	    		   I2C1->CR1 |= STOP;
 8000402:	4b17      	ldr	r3, [pc, #92]	@ (8000460 <i2c1_burstread+0x130>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	4a16      	ldr	r2, [pc, #88]	@ (8000460 <i2c1_burstread+0x130>)
 8000408:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800040c:	6013      	str	r3, [r2, #0]
	   //wait for rxne flag set
	    while (!(I2C1->SR1 & RXNE)){}
 800040e:	bf00      	nop
 8000410:	4b13      	ldr	r3, [pc, #76]	@ (8000460 <i2c1_burstread+0x130>)
 8000412:	695b      	ldr	r3, [r3, #20]
 8000414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000418:	2b00      	cmp	r3, #0
 800041a:	d0f9      	beq.n	8000410 <i2c1_burstread+0xe0>
	    //READ DATA FROM DR
	    *data++ =I2C1->DR;
 800041c:	4b10      	ldr	r3, [pc, #64]	@ (8000460 <i2c1_burstread+0x130>)
 800041e:	6919      	ldr	r1, [r3, #16]
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	1c5a      	adds	r2, r3, #1
 8000424:	607a      	str	r2, [r7, #4]
 8000426:	b2ca      	uxtb	r2, r1
 8000428:	701a      	strb	r2, [r3, #0]
	    break;
 800042a:	e014      	b.n	8000456 <i2c1_burstread+0x126>
	    }
	    	   else
	    		   {
	    		   //wait until rxne flag is set
	    		   while (!(I2C1->SR1 & RXNE)){}
 800042c:	bf00      	nop
 800042e:	4b0c      	ldr	r3, [pc, #48]	@ (8000460 <i2c1_burstread+0x130>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000436:	2b00      	cmp	r3, #0
 8000438:	d0f9      	beq.n	800042e <i2c1_burstread+0xfe>
	    		   (*data++)=I2C1->DR;
 800043a:	4b09      	ldr	r3, [pc, #36]	@ (8000460 <i2c1_burstread+0x130>)
 800043c:	6919      	ldr	r1, [r3, #16]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	1c5a      	adds	r2, r3, #1
 8000442:	607a      	str	r2, [r7, #4]
 8000444:	b2ca      	uxtb	r2, r1
 8000446:	701a      	strb	r2, [r3, #0]
	    		   n--;
 8000448:	68bb      	ldr	r3, [r7, #8]
 800044a:	3b01      	subs	r3, #1
 800044c:	60bb      	str	r3, [r7, #8]
	       while(n>0U)
 800044e:	68bb      	ldr	r3, [r7, #8]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d1cd      	bne.n	80003f0 <i2c1_burstread+0xc0>
	    		   }


	       }
}
 8000454:	bf00      	nop
 8000456:	bf00      	nop
 8000458:	371c      	adds	r7, #28
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr
 8000460:	40005400 	.word	0x40005400

08000464 <i2c1_burstwrite>:
void i2c1_burstwrite(char saddr,char maddr,int n,char* data)
{
 8000464:	b480      	push	{r7}
 8000466:	b087      	sub	sp, #28
 8000468:	af00      	add	r7, sp, #0
 800046a:	60ba      	str	r2, [r7, #8]
 800046c:	607b      	str	r3, [r7, #4]
 800046e:	4603      	mov	r3, r0
 8000470:	73fb      	strb	r3, [r7, #15]
 8000472:	460b      	mov	r3, r1
 8000474:	73bb      	strb	r3, [r7, #14]
	volatile int tmp;
	while(I2C1->SR2 & BUSY){}
 8000476:	bf00      	nop
 8000478:	4b29      	ldr	r3, [pc, #164]	@ (8000520 <i2c1_burstwrite+0xbc>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f003 0302 	and.w	r3, r3, #2
 8000480:	2b00      	cmp	r3, #0
 8000482:	d1f9      	bne.n	8000478 <i2c1_burstwrite+0x14>
		//GENERATE START
     I2C1->CR1 |= CR1_START;
 8000484:	4b26      	ldr	r3, [pc, #152]	@ (8000520 <i2c1_burstwrite+0xbc>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a25      	ldr	r2, [pc, #148]	@ (8000520 <i2c1_burstwrite+0xbc>)
 800048a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800048e:	6013      	str	r3, [r2, #0]
     while (!(I2C1->SR1 & SB)){}
 8000490:	bf00      	nop
 8000492:	4b23      	ldr	r3, [pc, #140]	@ (8000520 <i2c1_burstwrite+0xbc>)
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	f003 0301 	and.w	r3, r3, #1
 800049a:	2b00      	cmp	r3, #0
 800049c:	d0f9      	beq.n	8000492 <i2c1_burstwrite+0x2e>
     //transmit slave address+write
     I2C1->DR = saddr<<1;
 800049e:	7bfb      	ldrb	r3, [r7, #15]
 80004a0:	4a1f      	ldr	r2, [pc, #124]	@ (8000520 <i2c1_burstwrite+0xbc>)
 80004a2:	005b      	lsls	r3, r3, #1
 80004a4:	6113      	str	r3, [r2, #16]
     //WAIT UNTIL ADD FLAG IS SET
while (!(I2C1->SR1 & ADDR)){}
 80004a6:	bf00      	nop
 80004a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000520 <i2c1_burstwrite+0xbc>)
 80004aa:	695b      	ldr	r3, [r3, #20]
 80004ac:	f003 0302 	and.w	r3, r3, #2
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d0f9      	beq.n	80004a8 <i2c1_burstwrite+0x44>
//CLEAR ADDRESS FLAG
tmp=I2C1->SR2;
 80004b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000520 <i2c1_burstwrite+0xbc>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	613b      	str	r3, [r7, #16]
//WAIT UNTIL TRANSMIT IS EMPTY
    while (!(I2C1->SR1 & SR1_TXE)){}
 80004ba:	bf00      	nop
 80004bc:	4b18      	ldr	r3, [pc, #96]	@ (8000520 <i2c1_burstwrite+0xbc>)
 80004be:	695b      	ldr	r3, [r3, #20]
 80004c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d0f9      	beq.n	80004bc <i2c1_burstwrite+0x58>
    //SEND MEMORY ADDRESS
I2C1->DR =maddr;
 80004c8:	4a15      	ldr	r2, [pc, #84]	@ (8000520 <i2c1_burstwrite+0xbc>)
 80004ca:	7bbb      	ldrb	r3, [r7, #14]
 80004cc:	6113      	str	r3, [r2, #16]
     for (int i=0;i<n;i++)
 80004ce:	2300      	movs	r3, #0
 80004d0:	617b      	str	r3, [r7, #20]
 80004d2:	e00f      	b.n	80004f4 <i2c1_burstwrite+0x90>
     {
    	 //wait until data register empty
  	   while (!(I2C1->SR1 & SR1_TXE)){}
 80004d4:	bf00      	nop
 80004d6:	4b12      	ldr	r3, [pc, #72]	@ (8000520 <i2c1_burstwrite+0xbc>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d0f9      	beq.n	80004d6 <i2c1_burstwrite+0x72>
    	 //TRANSMIT MEMORY ADDRESS
  	 I2C1->DR = *data++;
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	1c5a      	adds	r2, r3, #1
 80004e6:	607a      	str	r2, [r7, #4]
 80004e8:	781a      	ldrb	r2, [r3, #0]
 80004ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000520 <i2c1_burstwrite+0xbc>)
 80004ec:	611a      	str	r2, [r3, #16]
     for (int i=0;i<n;i++)
 80004ee:	697b      	ldr	r3, [r7, #20]
 80004f0:	3301      	adds	r3, #1
 80004f2:	617b      	str	r3, [r7, #20]
 80004f4:	697a      	ldr	r2, [r7, #20]
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	429a      	cmp	r2, r3
 80004fa:	dbeb      	blt.n	80004d4 <i2c1_burstwrite+0x70>
     }
     //WAIT UNTIL TRANSMIT FINISHED
     while (!(I2C1->SR1 & BTF)){}
 80004fc:	bf00      	nop
 80004fe:	4b08      	ldr	r3, [pc, #32]	@ (8000520 <i2c1_burstwrite+0xbc>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	f003 0304 	and.w	r3, r3, #4
 8000506:	2b00      	cmp	r3, #0
 8000508:	d0f9      	beq.n	80004fe <i2c1_burstwrite+0x9a>
     //generate stop
      I2C1->CR1 |= STOP;
 800050a:	4b05      	ldr	r3, [pc, #20]	@ (8000520 <i2c1_burstwrite+0xbc>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a04      	ldr	r2, [pc, #16]	@ (8000520 <i2c1_burstwrite+0xbc>)
 8000510:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000514:	6013      	str	r3, [r2, #0]

}
 8000516:	bf00      	nop
 8000518:	371c      	adds	r7, #28
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr
 8000520:	40005400 	.word	0x40005400

08000524 <main>:
#include <stdio.h>

char buffer[80];

int main(void)
{
 8000524:	b5b0      	push	{r4, r5, r7, lr}
 8000526:	b08a      	sub	sp, #40	@ 0x28
 8000528:	af06      	add	r7, sp, #24
    int16_t ax, ay, az;
    int16_t gx, gy, gz;

    // Init peripherals
    uart1_init(9600);     // UART for debugging
 800052a:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 800052e:	f000 f88d 	bl	800064c <uart1_init>
    i2c1_init();          // I2C1 on PB8/PB9
 8000532:	f7ff fe8b 	bl	800024c <i2c1_init>
    mpu6050_init();       // Wake up MPU6050
 8000536:	f7ff fe1b 	bl	8000170 <mpu6050_init>

    uart1_print("MPU6050 Ready...\r\n");
 800053a:	481c      	ldr	r0, [pc, #112]	@ (80005ac <main+0x88>)
 800053c:	f000 f8d6 	bl	80006ec <uart1_print>

    while (1)
    {
        // Read sensors
        mpu6050_read_accel(&ax, &ay, &az);
 8000540:	f107 020a 	add.w	r2, r7, #10
 8000544:	f107 010c 	add.w	r1, r7, #12
 8000548:	f107 030e 	add.w	r3, r7, #14
 800054c:	4618      	mov	r0, r3
 800054e:	f7ff fe1e 	bl	800018e <mpu6050_read_accel>
        mpu6050_read_gyro(&gx, &gy, &gz);
 8000552:	1d3a      	adds	r2, r7, #4
 8000554:	1db9      	adds	r1, r7, #6
 8000556:	f107 0308 	add.w	r3, r7, #8
 800055a:	4618      	mov	r0, r3
 800055c:	f7ff fe46 	bl	80001ec <mpu6050_read_gyro>

        // Format data into buffer
        snprintf(buffer, sizeof(buffer),
 8000560:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000564:	461d      	mov	r5, r3
 8000566:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800056a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800056e:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8000572:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000576:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800057a:	9404      	str	r4, [sp, #16]
 800057c:	9003      	str	r0, [sp, #12]
 800057e:	9102      	str	r1, [sp, #8]
 8000580:	9201      	str	r2, [sp, #4]
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	462b      	mov	r3, r5
 8000586:	4a0a      	ldr	r2, [pc, #40]	@ (80005b0 <main+0x8c>)
 8000588:	2150      	movs	r1, #80	@ 0x50
 800058a:	480a      	ldr	r0, [pc, #40]	@ (80005b4 <main+0x90>)
 800058c:	f000 f8ee 	bl	800076c <sniprintf>
                 "AX=%d AY=%d AZ=%d | GX=%d GY=%d GZ=%d\r\n",
                 ax, ay, az, gx, gy, gz);

        // Send via UART
        uart1_print(buffer);
 8000590:	4808      	ldr	r0, [pc, #32]	@ (80005b4 <main+0x90>)
 8000592:	f000 f8ab 	bl	80006ec <uart1_print>

        // crude delay ~100ms
        for (volatile int i = 0; i < 800000; i++);
 8000596:	2300      	movs	r3, #0
 8000598:	603b      	str	r3, [r7, #0]
 800059a:	e002      	b.n	80005a2 <main+0x7e>
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	3301      	adds	r3, #1
 80005a0:	603b      	str	r3, [r7, #0]
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	4a04      	ldr	r2, [pc, #16]	@ (80005b8 <main+0x94>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	ddf8      	ble.n	800059c <main+0x78>
        mpu6050_read_accel(&ax, &ay, &az);
 80005aa:	e7c9      	b.n	8000540 <main+0x1c>
 80005ac:	080010fc 	.word	0x080010fc
 80005b0:	08001110 	.word	0x08001110
 80005b4:	2000006c 	.word	0x2000006c
 80005b8:	000c34ff 	.word	0x000c34ff

080005bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005c4:	4a14      	ldr	r2, [pc, #80]	@ (8000618 <_sbrk+0x5c>)
 80005c6:	4b15      	ldr	r3, [pc, #84]	@ (800061c <_sbrk+0x60>)
 80005c8:	1ad3      	subs	r3, r2, r3
 80005ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005d0:	4b13      	ldr	r3, [pc, #76]	@ (8000620 <_sbrk+0x64>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d102      	bne.n	80005de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005d8:	4b11      	ldr	r3, [pc, #68]	@ (8000620 <_sbrk+0x64>)
 80005da:	4a12      	ldr	r2, [pc, #72]	@ (8000624 <_sbrk+0x68>)
 80005dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005de:	4b10      	ldr	r3, [pc, #64]	@ (8000620 <_sbrk+0x64>)
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4413      	add	r3, r2
 80005e6:	693a      	ldr	r2, [r7, #16]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d207      	bcs.n	80005fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005ec:	f000 f8f4 	bl	80007d8 <__errno>
 80005f0:	4603      	mov	r3, r0
 80005f2:	220c      	movs	r2, #12
 80005f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295
 80005fa:	e009      	b.n	8000610 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005fc:	4b08      	ldr	r3, [pc, #32]	@ (8000620 <_sbrk+0x64>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000602:	4b07      	ldr	r3, [pc, #28]	@ (8000620 <_sbrk+0x64>)
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4413      	add	r3, r2
 800060a:	4a05      	ldr	r2, [pc, #20]	@ (8000620 <_sbrk+0x64>)
 800060c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800060e:	68fb      	ldr	r3, [r7, #12]
}
 8000610:	4618      	mov	r0, r3
 8000612:	3718      	adds	r7, #24
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20005000 	.word	0x20005000
 800061c:	00000400 	.word	0x00000400
 8000620:	200000bc 	.word	0x200000bc
 8000624:	20000208 	.word	0x20000208

08000628 <compute_uart_bd>:

#define UART_BAUDRATE 9600
#define FREQ_APB2     8000000U   // 8 MHz APB2 clock

static uint16_t compute_uart_bd(uint32_t periphClk, uint32_t baudrate)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	6039      	str	r1, [r7, #0]
    return (periphClk + (baudrate/2U)) / baudrate;
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	085a      	lsrs	r2, r3, #1
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	441a      	add	r2, r3
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000640:	b29b      	uxth	r3, r3
}
 8000642:	4618      	mov	r0, r3
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr

0800064c <uart1_init>:

void uart1_init(uint32_t baud)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
    // Enable clock for GPIOA and USART1
    RCC->APB2ENR |= (1U<<2);   // IOPAEN
 8000654:	4b16      	ldr	r3, [pc, #88]	@ (80006b0 <uart1_init+0x64>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	4a15      	ldr	r2, [pc, #84]	@ (80006b0 <uart1_init+0x64>)
 800065a:	f043 0304 	orr.w	r3, r3, #4
 800065e:	6193      	str	r3, [r2, #24]
    RCC->APB2ENR |= (1U<<14);  // USART1EN
 8000660:	4b13      	ldr	r3, [pc, #76]	@ (80006b0 <uart1_init+0x64>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	4a12      	ldr	r2, [pc, #72]	@ (80006b0 <uart1_init+0x64>)
 8000666:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800066a:	6193      	str	r3, [r2, #24]

    // Configure PA9 as AF push-pull (TX), PA10 as input floating (RX)
    GPIOA->CRH &= ~((0xF << (4*1)) | (0xF << (4*2))); // clear CNF/MODE for PA9/PA10
 800066c:	4b11      	ldr	r3, [pc, #68]	@ (80006b4 <uart1_init+0x68>)
 800066e:	685b      	ldr	r3, [r3, #4]
 8000670:	4a10      	ldr	r2, [pc, #64]	@ (80006b4 <uart1_init+0x68>)
 8000672:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8000676:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= (0x0B << 4);  // PA9: MODE=11 (50MHz), CNF=10 (AF PP)
 8000678:	4b0e      	ldr	r3, [pc, #56]	@ (80006b4 <uart1_init+0x68>)
 800067a:	685b      	ldr	r3, [r3, #4]
 800067c:	4a0d      	ldr	r2, [pc, #52]	@ (80006b4 <uart1_init+0x68>)
 800067e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8000682:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= (0x04 << 8);  // PA10: MODE=00, CNF=01 (input floating)
 8000684:	4b0b      	ldr	r3, [pc, #44]	@ (80006b4 <uart1_init+0x68>)
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	4a0a      	ldr	r2, [pc, #40]	@ (80006b4 <uart1_init+0x68>)
 800068a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800068e:	6053      	str	r3, [r2, #4]

    // Baudrate
    USART1->BRR = compute_uart_bd(FREQ_APB2, baud);
 8000690:	6879      	ldr	r1, [r7, #4]
 8000692:	4809      	ldr	r0, [pc, #36]	@ (80006b8 <uart1_init+0x6c>)
 8000694:	f7ff ffc8 	bl	8000628 <compute_uart_bd>
 8000698:	4603      	mov	r3, r0
 800069a:	461a      	mov	r2, r3
 800069c:	4b07      	ldr	r3, [pc, #28]	@ (80006bc <uart1_init+0x70>)
 800069e:	609a      	str	r2, [r3, #8]

    // Enable TX, RX and USART
    USART1->CR1 = (1U<<3) | (1U<<2) | (1U<<13);
 80006a0:	4b06      	ldr	r3, [pc, #24]	@ (80006bc <uart1_init+0x70>)
 80006a2:	f242 020c 	movw	r2, #8204	@ 0x200c
 80006a6:	60da      	str	r2, [r3, #12]
}
 80006a8:	bf00      	nop
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40021000 	.word	0x40021000
 80006b4:	40010800 	.word	0x40010800
 80006b8:	007a1200 	.word	0x007a1200
 80006bc:	40013800 	.word	0x40013800

080006c0 <uart1_write>:

void uart1_write(char c)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	71fb      	strb	r3, [r7, #7]
    while(!(USART1->SR & (1U<<7))); // wait until TXE=1
 80006ca:	bf00      	nop
 80006cc:	4b06      	ldr	r3, [pc, #24]	@ (80006e8 <uart1_write+0x28>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d0f9      	beq.n	80006cc <uart1_write+0xc>
    USART1->DR = (c & 0xFF);
 80006d8:	4a03      	ldr	r2, [pc, #12]	@ (80006e8 <uart1_write+0x28>)
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	6053      	str	r3, [r2, #4]
}
 80006de:	bf00      	nop
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr
 80006e8:	40013800 	.word	0x40013800

080006ec <uart1_print>:

void uart1_print(const char *str)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
    while(*str)
 80006f4:	e006      	b.n	8000704 <uart1_print+0x18>
    {
        uart1_write(*str++);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	1c5a      	adds	r2, r3, #1
 80006fa:	607a      	str	r2, [r7, #4]
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ffde 	bl	80006c0 <uart1_write>
    while(*str)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d1f4      	bne.n	80006f6 <uart1_print+0xa>
    }
}
 800070c:	bf00      	nop
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000718:	480d      	ldr	r0, [pc, #52]	@ (8000750 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800071a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800071c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000720:	480c      	ldr	r0, [pc, #48]	@ (8000754 <LoopForever+0x6>)
  ldr r1, =_edata
 8000722:	490d      	ldr	r1, [pc, #52]	@ (8000758 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000724:	4a0d      	ldr	r2, [pc, #52]	@ (800075c <LoopForever+0xe>)
  movs r3, #0
 8000726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000728:	e002      	b.n	8000730 <LoopCopyDataInit>

0800072a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800072a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800072c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800072e:	3304      	adds	r3, #4

08000730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000734:	d3f9      	bcc.n	800072a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000736:	4a0a      	ldr	r2, [pc, #40]	@ (8000760 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000738:	4c0a      	ldr	r4, [pc, #40]	@ (8000764 <LoopForever+0x16>)
  movs r3, #0
 800073a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800073c:	e001      	b.n	8000742 <LoopFillZerobss>

0800073e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800073e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000740:	3204      	adds	r2, #4

08000742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000744:	d3fb      	bcc.n	800073e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000746:	f000 f84d 	bl	80007e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800074a:	f7ff feeb 	bl	8000524 <main>

0800074e <LoopForever>:

LoopForever:
  b LoopForever
 800074e:	e7fe      	b.n	800074e <LoopForever>
  ldr   r0, =_estack
 8000750:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000758:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 800075c:	08001174 	.word	0x08001174
  ldr r2, =_sbss
 8000760:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8000764:	20000208 	.word	0x20000208

08000768 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000768:	e7fe      	b.n	8000768 <ADC1_2_IRQHandler>
	...

0800076c <sniprintf>:
 800076c:	b40c      	push	{r2, r3}
 800076e:	b530      	push	{r4, r5, lr}
 8000770:	4b18      	ldr	r3, [pc, #96]	@ (80007d4 <sniprintf+0x68>)
 8000772:	1e0c      	subs	r4, r1, #0
 8000774:	681d      	ldr	r5, [r3, #0]
 8000776:	b09d      	sub	sp, #116	@ 0x74
 8000778:	da08      	bge.n	800078c <sniprintf+0x20>
 800077a:	238b      	movs	r3, #139	@ 0x8b
 800077c:	f04f 30ff 	mov.w	r0, #4294967295
 8000780:	602b      	str	r3, [r5, #0]
 8000782:	b01d      	add	sp, #116	@ 0x74
 8000784:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000788:	b002      	add	sp, #8
 800078a:	4770      	bx	lr
 800078c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8000790:	f8ad 3014 	strh.w	r3, [sp, #20]
 8000794:	f04f 0300 	mov.w	r3, #0
 8000798:	931b      	str	r3, [sp, #108]	@ 0x6c
 800079a:	bf0c      	ite	eq
 800079c:	4623      	moveq	r3, r4
 800079e:	f104 33ff 	addne.w	r3, r4, #4294967295
 80007a2:	9304      	str	r3, [sp, #16]
 80007a4:	9307      	str	r3, [sp, #28]
 80007a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007aa:	9002      	str	r0, [sp, #8]
 80007ac:	9006      	str	r0, [sp, #24]
 80007ae:	f8ad 3016 	strh.w	r3, [sp, #22]
 80007b2:	4628      	mov	r0, r5
 80007b4:	ab21      	add	r3, sp, #132	@ 0x84
 80007b6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80007b8:	a902      	add	r1, sp, #8
 80007ba:	9301      	str	r3, [sp, #4]
 80007bc:	f000 f98a 	bl	8000ad4 <_svfiprintf_r>
 80007c0:	1c43      	adds	r3, r0, #1
 80007c2:	bfbc      	itt	lt
 80007c4:	238b      	movlt	r3, #139	@ 0x8b
 80007c6:	602b      	strlt	r3, [r5, #0]
 80007c8:	2c00      	cmp	r4, #0
 80007ca:	d0da      	beq.n	8000782 <sniprintf+0x16>
 80007cc:	2200      	movs	r2, #0
 80007ce:	9b02      	ldr	r3, [sp, #8]
 80007d0:	701a      	strb	r2, [r3, #0]
 80007d2:	e7d6      	b.n	8000782 <sniprintf+0x16>
 80007d4:	20000000 	.word	0x20000000

080007d8 <__errno>:
 80007d8:	4b01      	ldr	r3, [pc, #4]	@ (80007e0 <__errno+0x8>)
 80007da:	6818      	ldr	r0, [r3, #0]
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	20000000 	.word	0x20000000

080007e4 <__libc_init_array>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	2600      	movs	r6, #0
 80007e8:	4d0c      	ldr	r5, [pc, #48]	@ (800081c <__libc_init_array+0x38>)
 80007ea:	4c0d      	ldr	r4, [pc, #52]	@ (8000820 <__libc_init_array+0x3c>)
 80007ec:	1b64      	subs	r4, r4, r5
 80007ee:	10a4      	asrs	r4, r4, #2
 80007f0:	42a6      	cmp	r6, r4
 80007f2:	d109      	bne.n	8000808 <__libc_init_array+0x24>
 80007f4:	f000 fc76 	bl	80010e4 <_init>
 80007f8:	2600      	movs	r6, #0
 80007fa:	4d0a      	ldr	r5, [pc, #40]	@ (8000824 <__libc_init_array+0x40>)
 80007fc:	4c0a      	ldr	r4, [pc, #40]	@ (8000828 <__libc_init_array+0x44>)
 80007fe:	1b64      	subs	r4, r4, r5
 8000800:	10a4      	asrs	r4, r4, #2
 8000802:	42a6      	cmp	r6, r4
 8000804:	d105      	bne.n	8000812 <__libc_init_array+0x2e>
 8000806:	bd70      	pop	{r4, r5, r6, pc}
 8000808:	f855 3b04 	ldr.w	r3, [r5], #4
 800080c:	4798      	blx	r3
 800080e:	3601      	adds	r6, #1
 8000810:	e7ee      	b.n	80007f0 <__libc_init_array+0xc>
 8000812:	f855 3b04 	ldr.w	r3, [r5], #4
 8000816:	4798      	blx	r3
 8000818:	3601      	adds	r6, #1
 800081a:	e7f2      	b.n	8000802 <__libc_init_array+0x1e>
 800081c:	0800116c 	.word	0x0800116c
 8000820:	0800116c 	.word	0x0800116c
 8000824:	0800116c 	.word	0x0800116c
 8000828:	08001170 	.word	0x08001170

0800082c <__retarget_lock_acquire_recursive>:
 800082c:	4770      	bx	lr

0800082e <__retarget_lock_release_recursive>:
 800082e:	4770      	bx	lr

08000830 <_free_r>:
 8000830:	b538      	push	{r3, r4, r5, lr}
 8000832:	4605      	mov	r5, r0
 8000834:	2900      	cmp	r1, #0
 8000836:	d040      	beq.n	80008ba <_free_r+0x8a>
 8000838:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800083c:	1f0c      	subs	r4, r1, #4
 800083e:	2b00      	cmp	r3, #0
 8000840:	bfb8      	it	lt
 8000842:	18e4      	addlt	r4, r4, r3
 8000844:	f000 f8de 	bl	8000a04 <__malloc_lock>
 8000848:	4a1c      	ldr	r2, [pc, #112]	@ (80008bc <_free_r+0x8c>)
 800084a:	6813      	ldr	r3, [r2, #0]
 800084c:	b933      	cbnz	r3, 800085c <_free_r+0x2c>
 800084e:	6063      	str	r3, [r4, #4]
 8000850:	6014      	str	r4, [r2, #0]
 8000852:	4628      	mov	r0, r5
 8000854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000858:	f000 b8da 	b.w	8000a10 <__malloc_unlock>
 800085c:	42a3      	cmp	r3, r4
 800085e:	d908      	bls.n	8000872 <_free_r+0x42>
 8000860:	6820      	ldr	r0, [r4, #0]
 8000862:	1821      	adds	r1, r4, r0
 8000864:	428b      	cmp	r3, r1
 8000866:	bf01      	itttt	eq
 8000868:	6819      	ldreq	r1, [r3, #0]
 800086a:	685b      	ldreq	r3, [r3, #4]
 800086c:	1809      	addeq	r1, r1, r0
 800086e:	6021      	streq	r1, [r4, #0]
 8000870:	e7ed      	b.n	800084e <_free_r+0x1e>
 8000872:	461a      	mov	r2, r3
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	b10b      	cbz	r3, 800087c <_free_r+0x4c>
 8000878:	42a3      	cmp	r3, r4
 800087a:	d9fa      	bls.n	8000872 <_free_r+0x42>
 800087c:	6811      	ldr	r1, [r2, #0]
 800087e:	1850      	adds	r0, r2, r1
 8000880:	42a0      	cmp	r0, r4
 8000882:	d10b      	bne.n	800089c <_free_r+0x6c>
 8000884:	6820      	ldr	r0, [r4, #0]
 8000886:	4401      	add	r1, r0
 8000888:	1850      	adds	r0, r2, r1
 800088a:	4283      	cmp	r3, r0
 800088c:	6011      	str	r1, [r2, #0]
 800088e:	d1e0      	bne.n	8000852 <_free_r+0x22>
 8000890:	6818      	ldr	r0, [r3, #0]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	4408      	add	r0, r1
 8000896:	6010      	str	r0, [r2, #0]
 8000898:	6053      	str	r3, [r2, #4]
 800089a:	e7da      	b.n	8000852 <_free_r+0x22>
 800089c:	d902      	bls.n	80008a4 <_free_r+0x74>
 800089e:	230c      	movs	r3, #12
 80008a0:	602b      	str	r3, [r5, #0]
 80008a2:	e7d6      	b.n	8000852 <_free_r+0x22>
 80008a4:	6820      	ldr	r0, [r4, #0]
 80008a6:	1821      	adds	r1, r4, r0
 80008a8:	428b      	cmp	r3, r1
 80008aa:	bf01      	itttt	eq
 80008ac:	6819      	ldreq	r1, [r3, #0]
 80008ae:	685b      	ldreq	r3, [r3, #4]
 80008b0:	1809      	addeq	r1, r1, r0
 80008b2:	6021      	streq	r1, [r4, #0]
 80008b4:	6063      	str	r3, [r4, #4]
 80008b6:	6054      	str	r4, [r2, #4]
 80008b8:	e7cb      	b.n	8000852 <_free_r+0x22>
 80008ba:	bd38      	pop	{r3, r4, r5, pc}
 80008bc:	20000204 	.word	0x20000204

080008c0 <sbrk_aligned>:
 80008c0:	b570      	push	{r4, r5, r6, lr}
 80008c2:	4e0f      	ldr	r6, [pc, #60]	@ (8000900 <sbrk_aligned+0x40>)
 80008c4:	460c      	mov	r4, r1
 80008c6:	6831      	ldr	r1, [r6, #0]
 80008c8:	4605      	mov	r5, r0
 80008ca:	b911      	cbnz	r1, 80008d2 <sbrk_aligned+0x12>
 80008cc:	f000 fba8 	bl	8001020 <_sbrk_r>
 80008d0:	6030      	str	r0, [r6, #0]
 80008d2:	4621      	mov	r1, r4
 80008d4:	4628      	mov	r0, r5
 80008d6:	f000 fba3 	bl	8001020 <_sbrk_r>
 80008da:	1c43      	adds	r3, r0, #1
 80008dc:	d103      	bne.n	80008e6 <sbrk_aligned+0x26>
 80008de:	f04f 34ff 	mov.w	r4, #4294967295
 80008e2:	4620      	mov	r0, r4
 80008e4:	bd70      	pop	{r4, r5, r6, pc}
 80008e6:	1cc4      	adds	r4, r0, #3
 80008e8:	f024 0403 	bic.w	r4, r4, #3
 80008ec:	42a0      	cmp	r0, r4
 80008ee:	d0f8      	beq.n	80008e2 <sbrk_aligned+0x22>
 80008f0:	1a21      	subs	r1, r4, r0
 80008f2:	4628      	mov	r0, r5
 80008f4:	f000 fb94 	bl	8001020 <_sbrk_r>
 80008f8:	3001      	adds	r0, #1
 80008fa:	d1f2      	bne.n	80008e2 <sbrk_aligned+0x22>
 80008fc:	e7ef      	b.n	80008de <sbrk_aligned+0x1e>
 80008fe:	bf00      	nop
 8000900:	20000200 	.word	0x20000200

08000904 <_malloc_r>:
 8000904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000908:	1ccd      	adds	r5, r1, #3
 800090a:	f025 0503 	bic.w	r5, r5, #3
 800090e:	3508      	adds	r5, #8
 8000910:	2d0c      	cmp	r5, #12
 8000912:	bf38      	it	cc
 8000914:	250c      	movcc	r5, #12
 8000916:	2d00      	cmp	r5, #0
 8000918:	4606      	mov	r6, r0
 800091a:	db01      	blt.n	8000920 <_malloc_r+0x1c>
 800091c:	42a9      	cmp	r1, r5
 800091e:	d904      	bls.n	800092a <_malloc_r+0x26>
 8000920:	230c      	movs	r3, #12
 8000922:	6033      	str	r3, [r6, #0]
 8000924:	2000      	movs	r0, #0
 8000926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800092a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000a00 <_malloc_r+0xfc>
 800092e:	f000 f869 	bl	8000a04 <__malloc_lock>
 8000932:	f8d8 3000 	ldr.w	r3, [r8]
 8000936:	461c      	mov	r4, r3
 8000938:	bb44      	cbnz	r4, 800098c <_malloc_r+0x88>
 800093a:	4629      	mov	r1, r5
 800093c:	4630      	mov	r0, r6
 800093e:	f7ff ffbf 	bl	80008c0 <sbrk_aligned>
 8000942:	1c43      	adds	r3, r0, #1
 8000944:	4604      	mov	r4, r0
 8000946:	d158      	bne.n	80009fa <_malloc_r+0xf6>
 8000948:	f8d8 4000 	ldr.w	r4, [r8]
 800094c:	4627      	mov	r7, r4
 800094e:	2f00      	cmp	r7, #0
 8000950:	d143      	bne.n	80009da <_malloc_r+0xd6>
 8000952:	2c00      	cmp	r4, #0
 8000954:	d04b      	beq.n	80009ee <_malloc_r+0xea>
 8000956:	6823      	ldr	r3, [r4, #0]
 8000958:	4639      	mov	r1, r7
 800095a:	4630      	mov	r0, r6
 800095c:	eb04 0903 	add.w	r9, r4, r3
 8000960:	f000 fb5e 	bl	8001020 <_sbrk_r>
 8000964:	4581      	cmp	r9, r0
 8000966:	d142      	bne.n	80009ee <_malloc_r+0xea>
 8000968:	6821      	ldr	r1, [r4, #0]
 800096a:	4630      	mov	r0, r6
 800096c:	1a6d      	subs	r5, r5, r1
 800096e:	4629      	mov	r1, r5
 8000970:	f7ff ffa6 	bl	80008c0 <sbrk_aligned>
 8000974:	3001      	adds	r0, #1
 8000976:	d03a      	beq.n	80009ee <_malloc_r+0xea>
 8000978:	6823      	ldr	r3, [r4, #0]
 800097a:	442b      	add	r3, r5
 800097c:	6023      	str	r3, [r4, #0]
 800097e:	f8d8 3000 	ldr.w	r3, [r8]
 8000982:	685a      	ldr	r2, [r3, #4]
 8000984:	bb62      	cbnz	r2, 80009e0 <_malloc_r+0xdc>
 8000986:	f8c8 7000 	str.w	r7, [r8]
 800098a:	e00f      	b.n	80009ac <_malloc_r+0xa8>
 800098c:	6822      	ldr	r2, [r4, #0]
 800098e:	1b52      	subs	r2, r2, r5
 8000990:	d420      	bmi.n	80009d4 <_malloc_r+0xd0>
 8000992:	2a0b      	cmp	r2, #11
 8000994:	d917      	bls.n	80009c6 <_malloc_r+0xc2>
 8000996:	1961      	adds	r1, r4, r5
 8000998:	42a3      	cmp	r3, r4
 800099a:	6025      	str	r5, [r4, #0]
 800099c:	bf18      	it	ne
 800099e:	6059      	strne	r1, [r3, #4]
 80009a0:	6863      	ldr	r3, [r4, #4]
 80009a2:	bf08      	it	eq
 80009a4:	f8c8 1000 	streq.w	r1, [r8]
 80009a8:	5162      	str	r2, [r4, r5]
 80009aa:	604b      	str	r3, [r1, #4]
 80009ac:	4630      	mov	r0, r6
 80009ae:	f000 f82f 	bl	8000a10 <__malloc_unlock>
 80009b2:	f104 000b 	add.w	r0, r4, #11
 80009b6:	1d23      	adds	r3, r4, #4
 80009b8:	f020 0007 	bic.w	r0, r0, #7
 80009bc:	1ac2      	subs	r2, r0, r3
 80009be:	bf1c      	itt	ne
 80009c0:	1a1b      	subne	r3, r3, r0
 80009c2:	50a3      	strne	r3, [r4, r2]
 80009c4:	e7af      	b.n	8000926 <_malloc_r+0x22>
 80009c6:	6862      	ldr	r2, [r4, #4]
 80009c8:	42a3      	cmp	r3, r4
 80009ca:	bf0c      	ite	eq
 80009cc:	f8c8 2000 	streq.w	r2, [r8]
 80009d0:	605a      	strne	r2, [r3, #4]
 80009d2:	e7eb      	b.n	80009ac <_malloc_r+0xa8>
 80009d4:	4623      	mov	r3, r4
 80009d6:	6864      	ldr	r4, [r4, #4]
 80009d8:	e7ae      	b.n	8000938 <_malloc_r+0x34>
 80009da:	463c      	mov	r4, r7
 80009dc:	687f      	ldr	r7, [r7, #4]
 80009de:	e7b6      	b.n	800094e <_malloc_r+0x4a>
 80009e0:	461a      	mov	r2, r3
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	42a3      	cmp	r3, r4
 80009e6:	d1fb      	bne.n	80009e0 <_malloc_r+0xdc>
 80009e8:	2300      	movs	r3, #0
 80009ea:	6053      	str	r3, [r2, #4]
 80009ec:	e7de      	b.n	80009ac <_malloc_r+0xa8>
 80009ee:	230c      	movs	r3, #12
 80009f0:	4630      	mov	r0, r6
 80009f2:	6033      	str	r3, [r6, #0]
 80009f4:	f000 f80c 	bl	8000a10 <__malloc_unlock>
 80009f8:	e794      	b.n	8000924 <_malloc_r+0x20>
 80009fa:	6005      	str	r5, [r0, #0]
 80009fc:	e7d6      	b.n	80009ac <_malloc_r+0xa8>
 80009fe:	bf00      	nop
 8000a00:	20000204 	.word	0x20000204

08000a04 <__malloc_lock>:
 8000a04:	4801      	ldr	r0, [pc, #4]	@ (8000a0c <__malloc_lock+0x8>)
 8000a06:	f7ff bf11 	b.w	800082c <__retarget_lock_acquire_recursive>
 8000a0a:	bf00      	nop
 8000a0c:	200001fc 	.word	0x200001fc

08000a10 <__malloc_unlock>:
 8000a10:	4801      	ldr	r0, [pc, #4]	@ (8000a18 <__malloc_unlock+0x8>)
 8000a12:	f7ff bf0c 	b.w	800082e <__retarget_lock_release_recursive>
 8000a16:	bf00      	nop
 8000a18:	200001fc 	.word	0x200001fc

08000a1c <__ssputs_r>:
 8000a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a20:	461f      	mov	r7, r3
 8000a22:	688e      	ldr	r6, [r1, #8]
 8000a24:	4682      	mov	sl, r0
 8000a26:	42be      	cmp	r6, r7
 8000a28:	460c      	mov	r4, r1
 8000a2a:	4690      	mov	r8, r2
 8000a2c:	680b      	ldr	r3, [r1, #0]
 8000a2e:	d82d      	bhi.n	8000a8c <__ssputs_r+0x70>
 8000a30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000a34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000a38:	d026      	beq.n	8000a88 <__ssputs_r+0x6c>
 8000a3a:	6965      	ldr	r5, [r4, #20]
 8000a3c:	6909      	ldr	r1, [r1, #16]
 8000a3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000a42:	eba3 0901 	sub.w	r9, r3, r1
 8000a46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000a4a:	1c7b      	adds	r3, r7, #1
 8000a4c:	444b      	add	r3, r9
 8000a4e:	106d      	asrs	r5, r5, #1
 8000a50:	429d      	cmp	r5, r3
 8000a52:	bf38      	it	cc
 8000a54:	461d      	movcc	r5, r3
 8000a56:	0553      	lsls	r3, r2, #21
 8000a58:	d527      	bpl.n	8000aaa <__ssputs_r+0x8e>
 8000a5a:	4629      	mov	r1, r5
 8000a5c:	f7ff ff52 	bl	8000904 <_malloc_r>
 8000a60:	4606      	mov	r6, r0
 8000a62:	b360      	cbz	r0, 8000abe <__ssputs_r+0xa2>
 8000a64:	464a      	mov	r2, r9
 8000a66:	6921      	ldr	r1, [r4, #16]
 8000a68:	f000 faf8 	bl	800105c <memcpy>
 8000a6c:	89a3      	ldrh	r3, [r4, #12]
 8000a6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000a72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a76:	81a3      	strh	r3, [r4, #12]
 8000a78:	6126      	str	r6, [r4, #16]
 8000a7a:	444e      	add	r6, r9
 8000a7c:	6026      	str	r6, [r4, #0]
 8000a7e:	463e      	mov	r6, r7
 8000a80:	6165      	str	r5, [r4, #20]
 8000a82:	eba5 0509 	sub.w	r5, r5, r9
 8000a86:	60a5      	str	r5, [r4, #8]
 8000a88:	42be      	cmp	r6, r7
 8000a8a:	d900      	bls.n	8000a8e <__ssputs_r+0x72>
 8000a8c:	463e      	mov	r6, r7
 8000a8e:	4632      	mov	r2, r6
 8000a90:	4641      	mov	r1, r8
 8000a92:	6820      	ldr	r0, [r4, #0]
 8000a94:	f000 faaa 	bl	8000fec <memmove>
 8000a98:	2000      	movs	r0, #0
 8000a9a:	68a3      	ldr	r3, [r4, #8]
 8000a9c:	1b9b      	subs	r3, r3, r6
 8000a9e:	60a3      	str	r3, [r4, #8]
 8000aa0:	6823      	ldr	r3, [r4, #0]
 8000aa2:	4433      	add	r3, r6
 8000aa4:	6023      	str	r3, [r4, #0]
 8000aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aaa:	462a      	mov	r2, r5
 8000aac:	f000 fae4 	bl	8001078 <_realloc_r>
 8000ab0:	4606      	mov	r6, r0
 8000ab2:	2800      	cmp	r0, #0
 8000ab4:	d1e0      	bne.n	8000a78 <__ssputs_r+0x5c>
 8000ab6:	4650      	mov	r0, sl
 8000ab8:	6921      	ldr	r1, [r4, #16]
 8000aba:	f7ff feb9 	bl	8000830 <_free_r>
 8000abe:	230c      	movs	r3, #12
 8000ac0:	f8ca 3000 	str.w	r3, [sl]
 8000ac4:	89a3      	ldrh	r3, [r4, #12]
 8000ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8000aca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ace:	81a3      	strh	r3, [r4, #12]
 8000ad0:	e7e9      	b.n	8000aa6 <__ssputs_r+0x8a>
	...

08000ad4 <_svfiprintf_r>:
 8000ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ad8:	4698      	mov	r8, r3
 8000ada:	898b      	ldrh	r3, [r1, #12]
 8000adc:	4607      	mov	r7, r0
 8000ade:	061b      	lsls	r3, r3, #24
 8000ae0:	460d      	mov	r5, r1
 8000ae2:	4614      	mov	r4, r2
 8000ae4:	b09d      	sub	sp, #116	@ 0x74
 8000ae6:	d510      	bpl.n	8000b0a <_svfiprintf_r+0x36>
 8000ae8:	690b      	ldr	r3, [r1, #16]
 8000aea:	b973      	cbnz	r3, 8000b0a <_svfiprintf_r+0x36>
 8000aec:	2140      	movs	r1, #64	@ 0x40
 8000aee:	f7ff ff09 	bl	8000904 <_malloc_r>
 8000af2:	6028      	str	r0, [r5, #0]
 8000af4:	6128      	str	r0, [r5, #16]
 8000af6:	b930      	cbnz	r0, 8000b06 <_svfiprintf_r+0x32>
 8000af8:	230c      	movs	r3, #12
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	f04f 30ff 	mov.w	r0, #4294967295
 8000b00:	b01d      	add	sp, #116	@ 0x74
 8000b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b06:	2340      	movs	r3, #64	@ 0x40
 8000b08:	616b      	str	r3, [r5, #20]
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8000b0e:	2320      	movs	r3, #32
 8000b10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000b14:	2330      	movs	r3, #48	@ 0x30
 8000b16:	f04f 0901 	mov.w	r9, #1
 8000b1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8000b1e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8000cb8 <_svfiprintf_r+0x1e4>
 8000b22:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000b26:	4623      	mov	r3, r4
 8000b28:	469a      	mov	sl, r3
 8000b2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b2e:	b10a      	cbz	r2, 8000b34 <_svfiprintf_r+0x60>
 8000b30:	2a25      	cmp	r2, #37	@ 0x25
 8000b32:	d1f9      	bne.n	8000b28 <_svfiprintf_r+0x54>
 8000b34:	ebba 0b04 	subs.w	fp, sl, r4
 8000b38:	d00b      	beq.n	8000b52 <_svfiprintf_r+0x7e>
 8000b3a:	465b      	mov	r3, fp
 8000b3c:	4622      	mov	r2, r4
 8000b3e:	4629      	mov	r1, r5
 8000b40:	4638      	mov	r0, r7
 8000b42:	f7ff ff6b 	bl	8000a1c <__ssputs_r>
 8000b46:	3001      	adds	r0, #1
 8000b48:	f000 80a7 	beq.w	8000c9a <_svfiprintf_r+0x1c6>
 8000b4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000b4e:	445a      	add	r2, fp
 8000b50:	9209      	str	r2, [sp, #36]	@ 0x24
 8000b52:	f89a 3000 	ldrb.w	r3, [sl]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	f000 809f 	beq.w	8000c9a <_svfiprintf_r+0x1c6>
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8000b62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000b66:	f10a 0a01 	add.w	sl, sl, #1
 8000b6a:	9304      	str	r3, [sp, #16]
 8000b6c:	9307      	str	r3, [sp, #28]
 8000b6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000b72:	931a      	str	r3, [sp, #104]	@ 0x68
 8000b74:	4654      	mov	r4, sl
 8000b76:	2205      	movs	r2, #5
 8000b78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b7c:	484e      	ldr	r0, [pc, #312]	@ (8000cb8 <_svfiprintf_r+0x1e4>)
 8000b7e:	f000 fa5f 	bl	8001040 <memchr>
 8000b82:	9a04      	ldr	r2, [sp, #16]
 8000b84:	b9d8      	cbnz	r0, 8000bbe <_svfiprintf_r+0xea>
 8000b86:	06d0      	lsls	r0, r2, #27
 8000b88:	bf44      	itt	mi
 8000b8a:	2320      	movmi	r3, #32
 8000b8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000b90:	0711      	lsls	r1, r2, #28
 8000b92:	bf44      	itt	mi
 8000b94:	232b      	movmi	r3, #43	@ 0x2b
 8000b96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000b9a:	f89a 3000 	ldrb.w	r3, [sl]
 8000b9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8000ba0:	d015      	beq.n	8000bce <_svfiprintf_r+0xfa>
 8000ba2:	4654      	mov	r4, sl
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f04f 0c0a 	mov.w	ip, #10
 8000baa:	9a07      	ldr	r2, [sp, #28]
 8000bac:	4621      	mov	r1, r4
 8000bae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000bb2:	3b30      	subs	r3, #48	@ 0x30
 8000bb4:	2b09      	cmp	r3, #9
 8000bb6:	d94b      	bls.n	8000c50 <_svfiprintf_r+0x17c>
 8000bb8:	b1b0      	cbz	r0, 8000be8 <_svfiprintf_r+0x114>
 8000bba:	9207      	str	r2, [sp, #28]
 8000bbc:	e014      	b.n	8000be8 <_svfiprintf_r+0x114>
 8000bbe:	eba0 0308 	sub.w	r3, r0, r8
 8000bc2:	fa09 f303 	lsl.w	r3, r9, r3
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	46a2      	mov	sl, r4
 8000bca:	9304      	str	r3, [sp, #16]
 8000bcc:	e7d2      	b.n	8000b74 <_svfiprintf_r+0xa0>
 8000bce:	9b03      	ldr	r3, [sp, #12]
 8000bd0:	1d19      	adds	r1, r3, #4
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	9103      	str	r1, [sp, #12]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	bfbb      	ittet	lt
 8000bda:	425b      	neglt	r3, r3
 8000bdc:	f042 0202 	orrlt.w	r2, r2, #2
 8000be0:	9307      	strge	r3, [sp, #28]
 8000be2:	9307      	strlt	r3, [sp, #28]
 8000be4:	bfb8      	it	lt
 8000be6:	9204      	strlt	r2, [sp, #16]
 8000be8:	7823      	ldrb	r3, [r4, #0]
 8000bea:	2b2e      	cmp	r3, #46	@ 0x2e
 8000bec:	d10a      	bne.n	8000c04 <_svfiprintf_r+0x130>
 8000bee:	7863      	ldrb	r3, [r4, #1]
 8000bf0:	2b2a      	cmp	r3, #42	@ 0x2a
 8000bf2:	d132      	bne.n	8000c5a <_svfiprintf_r+0x186>
 8000bf4:	9b03      	ldr	r3, [sp, #12]
 8000bf6:	3402      	adds	r4, #2
 8000bf8:	1d1a      	adds	r2, r3, #4
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	9203      	str	r2, [sp, #12]
 8000bfe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000c02:	9305      	str	r3, [sp, #20]
 8000c04:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8000cbc <_svfiprintf_r+0x1e8>
 8000c08:	2203      	movs	r2, #3
 8000c0a:	4650      	mov	r0, sl
 8000c0c:	7821      	ldrb	r1, [r4, #0]
 8000c0e:	f000 fa17 	bl	8001040 <memchr>
 8000c12:	b138      	cbz	r0, 8000c24 <_svfiprintf_r+0x150>
 8000c14:	2240      	movs	r2, #64	@ 0x40
 8000c16:	9b04      	ldr	r3, [sp, #16]
 8000c18:	eba0 000a 	sub.w	r0, r0, sl
 8000c1c:	4082      	lsls	r2, r0
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	3401      	adds	r4, #1
 8000c22:	9304      	str	r3, [sp, #16]
 8000c24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c28:	2206      	movs	r2, #6
 8000c2a:	4825      	ldr	r0, [pc, #148]	@ (8000cc0 <_svfiprintf_r+0x1ec>)
 8000c2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000c30:	f000 fa06 	bl	8001040 <memchr>
 8000c34:	2800      	cmp	r0, #0
 8000c36:	d036      	beq.n	8000ca6 <_svfiprintf_r+0x1d2>
 8000c38:	4b22      	ldr	r3, [pc, #136]	@ (8000cc4 <_svfiprintf_r+0x1f0>)
 8000c3a:	bb1b      	cbnz	r3, 8000c84 <_svfiprintf_r+0x1b0>
 8000c3c:	9b03      	ldr	r3, [sp, #12]
 8000c3e:	3307      	adds	r3, #7
 8000c40:	f023 0307 	bic.w	r3, r3, #7
 8000c44:	3308      	adds	r3, #8
 8000c46:	9303      	str	r3, [sp, #12]
 8000c48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000c4a:	4433      	add	r3, r6
 8000c4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8000c4e:	e76a      	b.n	8000b26 <_svfiprintf_r+0x52>
 8000c50:	460c      	mov	r4, r1
 8000c52:	2001      	movs	r0, #1
 8000c54:	fb0c 3202 	mla	r2, ip, r2, r3
 8000c58:	e7a8      	b.n	8000bac <_svfiprintf_r+0xd8>
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	f04f 0c0a 	mov.w	ip, #10
 8000c60:	4619      	mov	r1, r3
 8000c62:	3401      	adds	r4, #1
 8000c64:	9305      	str	r3, [sp, #20]
 8000c66:	4620      	mov	r0, r4
 8000c68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000c6c:	3a30      	subs	r2, #48	@ 0x30
 8000c6e:	2a09      	cmp	r2, #9
 8000c70:	d903      	bls.n	8000c7a <_svfiprintf_r+0x1a6>
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d0c6      	beq.n	8000c04 <_svfiprintf_r+0x130>
 8000c76:	9105      	str	r1, [sp, #20]
 8000c78:	e7c4      	b.n	8000c04 <_svfiprintf_r+0x130>
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8000c82:	e7f0      	b.n	8000c66 <_svfiprintf_r+0x192>
 8000c84:	ab03      	add	r3, sp, #12
 8000c86:	9300      	str	r3, [sp, #0]
 8000c88:	462a      	mov	r2, r5
 8000c8a:	4638      	mov	r0, r7
 8000c8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc8 <_svfiprintf_r+0x1f4>)
 8000c8e:	a904      	add	r1, sp, #16
 8000c90:	f3af 8000 	nop.w
 8000c94:	1c42      	adds	r2, r0, #1
 8000c96:	4606      	mov	r6, r0
 8000c98:	d1d6      	bne.n	8000c48 <_svfiprintf_r+0x174>
 8000c9a:	89ab      	ldrh	r3, [r5, #12]
 8000c9c:	065b      	lsls	r3, r3, #25
 8000c9e:	f53f af2d 	bmi.w	8000afc <_svfiprintf_r+0x28>
 8000ca2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000ca4:	e72c      	b.n	8000b00 <_svfiprintf_r+0x2c>
 8000ca6:	ab03      	add	r3, sp, #12
 8000ca8:	9300      	str	r3, [sp, #0]
 8000caa:	462a      	mov	r2, r5
 8000cac:	4638      	mov	r0, r7
 8000cae:	4b06      	ldr	r3, [pc, #24]	@ (8000cc8 <_svfiprintf_r+0x1f4>)
 8000cb0:	a904      	add	r1, sp, #16
 8000cb2:	f000 f87d 	bl	8000db0 <_printf_i>
 8000cb6:	e7ed      	b.n	8000c94 <_svfiprintf_r+0x1c0>
 8000cb8:	08001138 	.word	0x08001138
 8000cbc:	0800113e 	.word	0x0800113e
 8000cc0:	08001142 	.word	0x08001142
 8000cc4:	00000000 	.word	0x00000000
 8000cc8:	08000a1d 	.word	0x08000a1d

08000ccc <_printf_common>:
 8000ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd0:	4616      	mov	r6, r2
 8000cd2:	4698      	mov	r8, r3
 8000cd4:	688a      	ldr	r2, [r1, #8]
 8000cd6:	690b      	ldr	r3, [r1, #16]
 8000cd8:	4607      	mov	r7, r0
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	bfb8      	it	lt
 8000cde:	4613      	movlt	r3, r2
 8000ce0:	6033      	str	r3, [r6, #0]
 8000ce2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000ce6:	460c      	mov	r4, r1
 8000ce8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000cec:	b10a      	cbz	r2, 8000cf2 <_printf_common+0x26>
 8000cee:	3301      	adds	r3, #1
 8000cf0:	6033      	str	r3, [r6, #0]
 8000cf2:	6823      	ldr	r3, [r4, #0]
 8000cf4:	0699      	lsls	r1, r3, #26
 8000cf6:	bf42      	ittt	mi
 8000cf8:	6833      	ldrmi	r3, [r6, #0]
 8000cfa:	3302      	addmi	r3, #2
 8000cfc:	6033      	strmi	r3, [r6, #0]
 8000cfe:	6825      	ldr	r5, [r4, #0]
 8000d00:	f015 0506 	ands.w	r5, r5, #6
 8000d04:	d106      	bne.n	8000d14 <_printf_common+0x48>
 8000d06:	f104 0a19 	add.w	sl, r4, #25
 8000d0a:	68e3      	ldr	r3, [r4, #12]
 8000d0c:	6832      	ldr	r2, [r6, #0]
 8000d0e:	1a9b      	subs	r3, r3, r2
 8000d10:	42ab      	cmp	r3, r5
 8000d12:	dc2b      	bgt.n	8000d6c <_printf_common+0xa0>
 8000d14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000d18:	6822      	ldr	r2, [r4, #0]
 8000d1a:	3b00      	subs	r3, #0
 8000d1c:	bf18      	it	ne
 8000d1e:	2301      	movne	r3, #1
 8000d20:	0692      	lsls	r2, r2, #26
 8000d22:	d430      	bmi.n	8000d86 <_printf_common+0xba>
 8000d24:	4641      	mov	r1, r8
 8000d26:	4638      	mov	r0, r7
 8000d28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000d2c:	47c8      	blx	r9
 8000d2e:	3001      	adds	r0, #1
 8000d30:	d023      	beq.n	8000d7a <_printf_common+0xae>
 8000d32:	6823      	ldr	r3, [r4, #0]
 8000d34:	6922      	ldr	r2, [r4, #16]
 8000d36:	f003 0306 	and.w	r3, r3, #6
 8000d3a:	2b04      	cmp	r3, #4
 8000d3c:	bf14      	ite	ne
 8000d3e:	2500      	movne	r5, #0
 8000d40:	6833      	ldreq	r3, [r6, #0]
 8000d42:	f04f 0600 	mov.w	r6, #0
 8000d46:	bf08      	it	eq
 8000d48:	68e5      	ldreq	r5, [r4, #12]
 8000d4a:	f104 041a 	add.w	r4, r4, #26
 8000d4e:	bf08      	it	eq
 8000d50:	1aed      	subeq	r5, r5, r3
 8000d52:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8000d56:	bf08      	it	eq
 8000d58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	bfc4      	itt	gt
 8000d60:	1a9b      	subgt	r3, r3, r2
 8000d62:	18ed      	addgt	r5, r5, r3
 8000d64:	42b5      	cmp	r5, r6
 8000d66:	d11a      	bne.n	8000d9e <_printf_common+0xd2>
 8000d68:	2000      	movs	r0, #0
 8000d6a:	e008      	b.n	8000d7e <_printf_common+0xb2>
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	4652      	mov	r2, sl
 8000d70:	4641      	mov	r1, r8
 8000d72:	4638      	mov	r0, r7
 8000d74:	47c8      	blx	r9
 8000d76:	3001      	adds	r0, #1
 8000d78:	d103      	bne.n	8000d82 <_printf_common+0xb6>
 8000d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	3501      	adds	r5, #1
 8000d84:	e7c1      	b.n	8000d0a <_printf_common+0x3e>
 8000d86:	2030      	movs	r0, #48	@ 0x30
 8000d88:	18e1      	adds	r1, r4, r3
 8000d8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000d8e:	1c5a      	adds	r2, r3, #1
 8000d90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000d94:	4422      	add	r2, r4
 8000d96:	3302      	adds	r3, #2
 8000d98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000d9c:	e7c2      	b.n	8000d24 <_printf_common+0x58>
 8000d9e:	2301      	movs	r3, #1
 8000da0:	4622      	mov	r2, r4
 8000da2:	4641      	mov	r1, r8
 8000da4:	4638      	mov	r0, r7
 8000da6:	47c8      	blx	r9
 8000da8:	3001      	adds	r0, #1
 8000daa:	d0e6      	beq.n	8000d7a <_printf_common+0xae>
 8000dac:	3601      	adds	r6, #1
 8000dae:	e7d9      	b.n	8000d64 <_printf_common+0x98>

08000db0 <_printf_i>:
 8000db0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000db4:	7e0f      	ldrb	r7, [r1, #24]
 8000db6:	4691      	mov	r9, r2
 8000db8:	2f78      	cmp	r7, #120	@ 0x78
 8000dba:	4680      	mov	r8, r0
 8000dbc:	460c      	mov	r4, r1
 8000dbe:	469a      	mov	sl, r3
 8000dc0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000dc2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000dc6:	d807      	bhi.n	8000dd8 <_printf_i+0x28>
 8000dc8:	2f62      	cmp	r7, #98	@ 0x62
 8000dca:	d80a      	bhi.n	8000de2 <_printf_i+0x32>
 8000dcc:	2f00      	cmp	r7, #0
 8000dce:	f000 80d1 	beq.w	8000f74 <_printf_i+0x1c4>
 8000dd2:	2f58      	cmp	r7, #88	@ 0x58
 8000dd4:	f000 80b8 	beq.w	8000f48 <_printf_i+0x198>
 8000dd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000ddc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000de0:	e03a      	b.n	8000e58 <_printf_i+0xa8>
 8000de2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000de6:	2b15      	cmp	r3, #21
 8000de8:	d8f6      	bhi.n	8000dd8 <_printf_i+0x28>
 8000dea:	a101      	add	r1, pc, #4	@ (adr r1, 8000df0 <_printf_i+0x40>)
 8000dec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000df0:	08000e49 	.word	0x08000e49
 8000df4:	08000e5d 	.word	0x08000e5d
 8000df8:	08000dd9 	.word	0x08000dd9
 8000dfc:	08000dd9 	.word	0x08000dd9
 8000e00:	08000dd9 	.word	0x08000dd9
 8000e04:	08000dd9 	.word	0x08000dd9
 8000e08:	08000e5d 	.word	0x08000e5d
 8000e0c:	08000dd9 	.word	0x08000dd9
 8000e10:	08000dd9 	.word	0x08000dd9
 8000e14:	08000dd9 	.word	0x08000dd9
 8000e18:	08000dd9 	.word	0x08000dd9
 8000e1c:	08000f5b 	.word	0x08000f5b
 8000e20:	08000e87 	.word	0x08000e87
 8000e24:	08000f15 	.word	0x08000f15
 8000e28:	08000dd9 	.word	0x08000dd9
 8000e2c:	08000dd9 	.word	0x08000dd9
 8000e30:	08000f7d 	.word	0x08000f7d
 8000e34:	08000dd9 	.word	0x08000dd9
 8000e38:	08000e87 	.word	0x08000e87
 8000e3c:	08000dd9 	.word	0x08000dd9
 8000e40:	08000dd9 	.word	0x08000dd9
 8000e44:	08000f1d 	.word	0x08000f1d
 8000e48:	6833      	ldr	r3, [r6, #0]
 8000e4a:	1d1a      	adds	r2, r3, #4
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	6032      	str	r2, [r6, #0]
 8000e50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000e54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e09c      	b.n	8000f96 <_printf_i+0x1e6>
 8000e5c:	6833      	ldr	r3, [r6, #0]
 8000e5e:	6820      	ldr	r0, [r4, #0]
 8000e60:	1d19      	adds	r1, r3, #4
 8000e62:	6031      	str	r1, [r6, #0]
 8000e64:	0606      	lsls	r6, r0, #24
 8000e66:	d501      	bpl.n	8000e6c <_printf_i+0xbc>
 8000e68:	681d      	ldr	r5, [r3, #0]
 8000e6a:	e003      	b.n	8000e74 <_printf_i+0xc4>
 8000e6c:	0645      	lsls	r5, r0, #25
 8000e6e:	d5fb      	bpl.n	8000e68 <_printf_i+0xb8>
 8000e70:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000e74:	2d00      	cmp	r5, #0
 8000e76:	da03      	bge.n	8000e80 <_printf_i+0xd0>
 8000e78:	232d      	movs	r3, #45	@ 0x2d
 8000e7a:	426d      	negs	r5, r5
 8000e7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000e80:	230a      	movs	r3, #10
 8000e82:	4858      	ldr	r0, [pc, #352]	@ (8000fe4 <_printf_i+0x234>)
 8000e84:	e011      	b.n	8000eaa <_printf_i+0xfa>
 8000e86:	6821      	ldr	r1, [r4, #0]
 8000e88:	6833      	ldr	r3, [r6, #0]
 8000e8a:	0608      	lsls	r0, r1, #24
 8000e8c:	f853 5b04 	ldr.w	r5, [r3], #4
 8000e90:	d402      	bmi.n	8000e98 <_printf_i+0xe8>
 8000e92:	0649      	lsls	r1, r1, #25
 8000e94:	bf48      	it	mi
 8000e96:	b2ad      	uxthmi	r5, r5
 8000e98:	2f6f      	cmp	r7, #111	@ 0x6f
 8000e9a:	6033      	str	r3, [r6, #0]
 8000e9c:	bf14      	ite	ne
 8000e9e:	230a      	movne	r3, #10
 8000ea0:	2308      	moveq	r3, #8
 8000ea2:	4850      	ldr	r0, [pc, #320]	@ (8000fe4 <_printf_i+0x234>)
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000eaa:	6866      	ldr	r6, [r4, #4]
 8000eac:	2e00      	cmp	r6, #0
 8000eae:	60a6      	str	r6, [r4, #8]
 8000eb0:	db05      	blt.n	8000ebe <_printf_i+0x10e>
 8000eb2:	6821      	ldr	r1, [r4, #0]
 8000eb4:	432e      	orrs	r6, r5
 8000eb6:	f021 0104 	bic.w	r1, r1, #4
 8000eba:	6021      	str	r1, [r4, #0]
 8000ebc:	d04b      	beq.n	8000f56 <_printf_i+0x1a6>
 8000ebe:	4616      	mov	r6, r2
 8000ec0:	fbb5 f1f3 	udiv	r1, r5, r3
 8000ec4:	fb03 5711 	mls	r7, r3, r1, r5
 8000ec8:	5dc7      	ldrb	r7, [r0, r7]
 8000eca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000ece:	462f      	mov	r7, r5
 8000ed0:	42bb      	cmp	r3, r7
 8000ed2:	460d      	mov	r5, r1
 8000ed4:	d9f4      	bls.n	8000ec0 <_printf_i+0x110>
 8000ed6:	2b08      	cmp	r3, #8
 8000ed8:	d10b      	bne.n	8000ef2 <_printf_i+0x142>
 8000eda:	6823      	ldr	r3, [r4, #0]
 8000edc:	07df      	lsls	r7, r3, #31
 8000ede:	d508      	bpl.n	8000ef2 <_printf_i+0x142>
 8000ee0:	6923      	ldr	r3, [r4, #16]
 8000ee2:	6861      	ldr	r1, [r4, #4]
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	bfde      	ittt	le
 8000ee8:	2330      	movle	r3, #48	@ 0x30
 8000eea:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000eee:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000ef2:	1b92      	subs	r2, r2, r6
 8000ef4:	6122      	str	r2, [r4, #16]
 8000ef6:	464b      	mov	r3, r9
 8000ef8:	4621      	mov	r1, r4
 8000efa:	4640      	mov	r0, r8
 8000efc:	f8cd a000 	str.w	sl, [sp]
 8000f00:	aa03      	add	r2, sp, #12
 8000f02:	f7ff fee3 	bl	8000ccc <_printf_common>
 8000f06:	3001      	adds	r0, #1
 8000f08:	d14a      	bne.n	8000fa0 <_printf_i+0x1f0>
 8000f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0e:	b004      	add	sp, #16
 8000f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f14:	6823      	ldr	r3, [r4, #0]
 8000f16:	f043 0320 	orr.w	r3, r3, #32
 8000f1a:	6023      	str	r3, [r4, #0]
 8000f1c:	2778      	movs	r7, #120	@ 0x78
 8000f1e:	4832      	ldr	r0, [pc, #200]	@ (8000fe8 <_printf_i+0x238>)
 8000f20:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000f24:	6823      	ldr	r3, [r4, #0]
 8000f26:	6831      	ldr	r1, [r6, #0]
 8000f28:	061f      	lsls	r7, r3, #24
 8000f2a:	f851 5b04 	ldr.w	r5, [r1], #4
 8000f2e:	d402      	bmi.n	8000f36 <_printf_i+0x186>
 8000f30:	065f      	lsls	r7, r3, #25
 8000f32:	bf48      	it	mi
 8000f34:	b2ad      	uxthmi	r5, r5
 8000f36:	6031      	str	r1, [r6, #0]
 8000f38:	07d9      	lsls	r1, r3, #31
 8000f3a:	bf44      	itt	mi
 8000f3c:	f043 0320 	orrmi.w	r3, r3, #32
 8000f40:	6023      	strmi	r3, [r4, #0]
 8000f42:	b11d      	cbz	r5, 8000f4c <_printf_i+0x19c>
 8000f44:	2310      	movs	r3, #16
 8000f46:	e7ad      	b.n	8000ea4 <_printf_i+0xf4>
 8000f48:	4826      	ldr	r0, [pc, #152]	@ (8000fe4 <_printf_i+0x234>)
 8000f4a:	e7e9      	b.n	8000f20 <_printf_i+0x170>
 8000f4c:	6823      	ldr	r3, [r4, #0]
 8000f4e:	f023 0320 	bic.w	r3, r3, #32
 8000f52:	6023      	str	r3, [r4, #0]
 8000f54:	e7f6      	b.n	8000f44 <_printf_i+0x194>
 8000f56:	4616      	mov	r6, r2
 8000f58:	e7bd      	b.n	8000ed6 <_printf_i+0x126>
 8000f5a:	6833      	ldr	r3, [r6, #0]
 8000f5c:	6825      	ldr	r5, [r4, #0]
 8000f5e:	1d18      	adds	r0, r3, #4
 8000f60:	6961      	ldr	r1, [r4, #20]
 8000f62:	6030      	str	r0, [r6, #0]
 8000f64:	062e      	lsls	r6, r5, #24
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	d501      	bpl.n	8000f6e <_printf_i+0x1be>
 8000f6a:	6019      	str	r1, [r3, #0]
 8000f6c:	e002      	b.n	8000f74 <_printf_i+0x1c4>
 8000f6e:	0668      	lsls	r0, r5, #25
 8000f70:	d5fb      	bpl.n	8000f6a <_printf_i+0x1ba>
 8000f72:	8019      	strh	r1, [r3, #0]
 8000f74:	2300      	movs	r3, #0
 8000f76:	4616      	mov	r6, r2
 8000f78:	6123      	str	r3, [r4, #16]
 8000f7a:	e7bc      	b.n	8000ef6 <_printf_i+0x146>
 8000f7c:	6833      	ldr	r3, [r6, #0]
 8000f7e:	2100      	movs	r1, #0
 8000f80:	1d1a      	adds	r2, r3, #4
 8000f82:	6032      	str	r2, [r6, #0]
 8000f84:	681e      	ldr	r6, [r3, #0]
 8000f86:	6862      	ldr	r2, [r4, #4]
 8000f88:	4630      	mov	r0, r6
 8000f8a:	f000 f859 	bl	8001040 <memchr>
 8000f8e:	b108      	cbz	r0, 8000f94 <_printf_i+0x1e4>
 8000f90:	1b80      	subs	r0, r0, r6
 8000f92:	6060      	str	r0, [r4, #4]
 8000f94:	6863      	ldr	r3, [r4, #4]
 8000f96:	6123      	str	r3, [r4, #16]
 8000f98:	2300      	movs	r3, #0
 8000f9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000f9e:	e7aa      	b.n	8000ef6 <_printf_i+0x146>
 8000fa0:	4632      	mov	r2, r6
 8000fa2:	4649      	mov	r1, r9
 8000fa4:	4640      	mov	r0, r8
 8000fa6:	6923      	ldr	r3, [r4, #16]
 8000fa8:	47d0      	blx	sl
 8000faa:	3001      	adds	r0, #1
 8000fac:	d0ad      	beq.n	8000f0a <_printf_i+0x15a>
 8000fae:	6823      	ldr	r3, [r4, #0]
 8000fb0:	079b      	lsls	r3, r3, #30
 8000fb2:	d413      	bmi.n	8000fdc <_printf_i+0x22c>
 8000fb4:	68e0      	ldr	r0, [r4, #12]
 8000fb6:	9b03      	ldr	r3, [sp, #12]
 8000fb8:	4298      	cmp	r0, r3
 8000fba:	bfb8      	it	lt
 8000fbc:	4618      	movlt	r0, r3
 8000fbe:	e7a6      	b.n	8000f0e <_printf_i+0x15e>
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	4632      	mov	r2, r6
 8000fc4:	4649      	mov	r1, r9
 8000fc6:	4640      	mov	r0, r8
 8000fc8:	47d0      	blx	sl
 8000fca:	3001      	adds	r0, #1
 8000fcc:	d09d      	beq.n	8000f0a <_printf_i+0x15a>
 8000fce:	3501      	adds	r5, #1
 8000fd0:	68e3      	ldr	r3, [r4, #12]
 8000fd2:	9903      	ldr	r1, [sp, #12]
 8000fd4:	1a5b      	subs	r3, r3, r1
 8000fd6:	42ab      	cmp	r3, r5
 8000fd8:	dcf2      	bgt.n	8000fc0 <_printf_i+0x210>
 8000fda:	e7eb      	b.n	8000fb4 <_printf_i+0x204>
 8000fdc:	2500      	movs	r5, #0
 8000fde:	f104 0619 	add.w	r6, r4, #25
 8000fe2:	e7f5      	b.n	8000fd0 <_printf_i+0x220>
 8000fe4:	08001149 	.word	0x08001149
 8000fe8:	0800115a 	.word	0x0800115a

08000fec <memmove>:
 8000fec:	4288      	cmp	r0, r1
 8000fee:	b510      	push	{r4, lr}
 8000ff0:	eb01 0402 	add.w	r4, r1, r2
 8000ff4:	d902      	bls.n	8000ffc <memmove+0x10>
 8000ff6:	4284      	cmp	r4, r0
 8000ff8:	4623      	mov	r3, r4
 8000ffa:	d807      	bhi.n	800100c <memmove+0x20>
 8000ffc:	1e43      	subs	r3, r0, #1
 8000ffe:	42a1      	cmp	r1, r4
 8001000:	d008      	beq.n	8001014 <memmove+0x28>
 8001002:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001006:	f803 2f01 	strb.w	r2, [r3, #1]!
 800100a:	e7f8      	b.n	8000ffe <memmove+0x12>
 800100c:	4601      	mov	r1, r0
 800100e:	4402      	add	r2, r0
 8001010:	428a      	cmp	r2, r1
 8001012:	d100      	bne.n	8001016 <memmove+0x2a>
 8001014:	bd10      	pop	{r4, pc}
 8001016:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800101a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800101e:	e7f7      	b.n	8001010 <memmove+0x24>

08001020 <_sbrk_r>:
 8001020:	b538      	push	{r3, r4, r5, lr}
 8001022:	2300      	movs	r3, #0
 8001024:	4d05      	ldr	r5, [pc, #20]	@ (800103c <_sbrk_r+0x1c>)
 8001026:	4604      	mov	r4, r0
 8001028:	4608      	mov	r0, r1
 800102a:	602b      	str	r3, [r5, #0]
 800102c:	f7ff fac6 	bl	80005bc <_sbrk>
 8001030:	1c43      	adds	r3, r0, #1
 8001032:	d102      	bne.n	800103a <_sbrk_r+0x1a>
 8001034:	682b      	ldr	r3, [r5, #0]
 8001036:	b103      	cbz	r3, 800103a <_sbrk_r+0x1a>
 8001038:	6023      	str	r3, [r4, #0]
 800103a:	bd38      	pop	{r3, r4, r5, pc}
 800103c:	200001f8 	.word	0x200001f8

08001040 <memchr>:
 8001040:	4603      	mov	r3, r0
 8001042:	b510      	push	{r4, lr}
 8001044:	b2c9      	uxtb	r1, r1
 8001046:	4402      	add	r2, r0
 8001048:	4293      	cmp	r3, r2
 800104a:	4618      	mov	r0, r3
 800104c:	d101      	bne.n	8001052 <memchr+0x12>
 800104e:	2000      	movs	r0, #0
 8001050:	e003      	b.n	800105a <memchr+0x1a>
 8001052:	7804      	ldrb	r4, [r0, #0]
 8001054:	3301      	adds	r3, #1
 8001056:	428c      	cmp	r4, r1
 8001058:	d1f6      	bne.n	8001048 <memchr+0x8>
 800105a:	bd10      	pop	{r4, pc}

0800105c <memcpy>:
 800105c:	440a      	add	r2, r1
 800105e:	4291      	cmp	r1, r2
 8001060:	f100 33ff 	add.w	r3, r0, #4294967295
 8001064:	d100      	bne.n	8001068 <memcpy+0xc>
 8001066:	4770      	bx	lr
 8001068:	b510      	push	{r4, lr}
 800106a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800106e:	4291      	cmp	r1, r2
 8001070:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001074:	d1f9      	bne.n	800106a <memcpy+0xe>
 8001076:	bd10      	pop	{r4, pc}

08001078 <_realloc_r>:
 8001078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800107c:	4607      	mov	r7, r0
 800107e:	4614      	mov	r4, r2
 8001080:	460d      	mov	r5, r1
 8001082:	b921      	cbnz	r1, 800108e <_realloc_r+0x16>
 8001084:	4611      	mov	r1, r2
 8001086:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800108a:	f7ff bc3b 	b.w	8000904 <_malloc_r>
 800108e:	b92a      	cbnz	r2, 800109c <_realloc_r+0x24>
 8001090:	f7ff fbce 	bl	8000830 <_free_r>
 8001094:	4625      	mov	r5, r4
 8001096:	4628      	mov	r0, r5
 8001098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800109c:	f000 f81a 	bl	80010d4 <_malloc_usable_size_r>
 80010a0:	4284      	cmp	r4, r0
 80010a2:	4606      	mov	r6, r0
 80010a4:	d802      	bhi.n	80010ac <_realloc_r+0x34>
 80010a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80010aa:	d8f4      	bhi.n	8001096 <_realloc_r+0x1e>
 80010ac:	4621      	mov	r1, r4
 80010ae:	4638      	mov	r0, r7
 80010b0:	f7ff fc28 	bl	8000904 <_malloc_r>
 80010b4:	4680      	mov	r8, r0
 80010b6:	b908      	cbnz	r0, 80010bc <_realloc_r+0x44>
 80010b8:	4645      	mov	r5, r8
 80010ba:	e7ec      	b.n	8001096 <_realloc_r+0x1e>
 80010bc:	42b4      	cmp	r4, r6
 80010be:	4622      	mov	r2, r4
 80010c0:	4629      	mov	r1, r5
 80010c2:	bf28      	it	cs
 80010c4:	4632      	movcs	r2, r6
 80010c6:	f7ff ffc9 	bl	800105c <memcpy>
 80010ca:	4629      	mov	r1, r5
 80010cc:	4638      	mov	r0, r7
 80010ce:	f7ff fbaf 	bl	8000830 <_free_r>
 80010d2:	e7f1      	b.n	80010b8 <_realloc_r+0x40>

080010d4 <_malloc_usable_size_r>:
 80010d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80010d8:	1f18      	subs	r0, r3, #4
 80010da:	2b00      	cmp	r3, #0
 80010dc:	bfbc      	itt	lt
 80010de:	580b      	ldrlt	r3, [r1, r0]
 80010e0:	18c0      	addlt	r0, r0, r3
 80010e2:	4770      	bx	lr

080010e4 <_init>:
 80010e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010e6:	bf00      	nop
 80010e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010ea:	bc08      	pop	{r3}
 80010ec:	469e      	mov	lr, r3
 80010ee:	4770      	bx	lr

080010f0 <_fini>:
 80010f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010f2:	bf00      	nop
 80010f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010f6:	bc08      	pop	{r3}
 80010f8:	469e      	mov	lr, r3
 80010fa:	4770      	bx	lr
